
node initial(a : bool) returns (holds : bool);
let
   holds = a -> true ;
tel ;

node before_always(p : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
let
   pre_state = 0 -> pre state;
   
   state =
      if (pre_state = 0)
      then
         if p
         then 1
         else if(not p and a)
         then 0
         else if(not p and not a)
         then 2
         else -1
      else if(pre_state = 1)
      then 1
      else if(pre_state = 2)
      then
         if(not p)
         then 2
         else if p
         then 3
         else -1
      else if(pre_state = 3)
      then 3
      else -1;

   holds = (state <> 3);
tel;

node before_exists(p : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if p
         then 2
         else if(not p and not a)
         then 0
         else if(not p and a)
         then 1
         else -1
      else if(pre_state = 1)
      then 1
      else if(pre_state = 2)
      then 2
      else -1;
      
   holds = (state <> 2);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node before_precedes(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;

   state =
      if (pre_state = 0)
      then
         if p
         then 1
         else if a
         then 1
         else if (not p and not a and b)
         then 2
         else if (not p and not a and not b)
         then 0
         else -1
      else if (pre_state = 1)
      then 1
      else if (pre_state = 2)
      then
         if p
         then 3
         else if (not p)
         then 2
         else -1
      else if (pre_state = 3)
      then 3
      else -1;
      
   holds = (state <> 3);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node before_responds(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if p
         then 2
         else if (not p and not b)
         then 0
         else if (not p and a and b)
         then 0
         else if (not p and not a and b)
         then 1
         else -1
      else if (pre_state = 1)
      then
         if p
         then 3
         else if (not p and not a)
         then 1
         else if (not p and a)
         then 0
         else -1
      else if (pre_state = 2)
      then 2
      else if (pre_state = 3)
      then 3
      else -1;
      
   holds = (state <> 3);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;


node after_exists(p : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and not a)
         then 1
         else if (p and a)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if (not a)
         then 1
         else if a
         then 2
         else -1
      else if (pre_state = 2)
      then 2
      else -1;
      
   holds = (state = 0) or (state = 2);
tel;

node after_always(p : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and not a)
         then 1
         else if (p and a)
         then 2
         else -1
      else if (pre_state = 1)
      then 1
      else if (pre_state = 2)
      then 
      	if a then 2
      	else 1
      else -1;
      
   holds = (state = 0) or (state = 2);
tel;

node after_precedes(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 3
         else if (p and a)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if a
         then 2
         else if (not a and not b)
         then 1
         else if (not a and b)
         then 3
         else -1
      else if (pre_state = 2)
      then 2
      else if (pre_state = 3)
      then 3
      else -1;
         
   holds = (state <> 3);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node after_responds(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and a)
         then 1
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if a
         then 1
         else if (not a and not b)
         then 1
         else if (not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then
         if a
         then 1
         else if (not a)
         then 2
         else -1
      else -1;
   
   holds = (state = 0) or (state = 1);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;


node while_always (p : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,1] of int;
   pre_state : subrange [-1,1] of int;
let
   pre_state = 0 -> pre state;

   state = 
      if(pre_state = 0) 
      then
         if (not p) 
         then 0
         else if (p and a)
         then 0
         else if (p and not a)
         then 1
         else -1
      else if(pre_state = 1) 
      then 1
      else -1;
      
   holds = (state <> 1);
tel;

node while_exists(p : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;

   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and not a)
         then 1
         else if (p and a)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if (not p)
         then 3
         else if (p and not a)
         then 1
         else if (p and a)
         then 2
         else -1
      else if (pre_state = 2)
      then
         if (not p)
         then 0
         else if p
         then 2
         else -1
      else if (pre_state = 3)
      then 3
      else -1;
      
   holds = (state <> 3);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node while_precedes(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state,pre_state : subrange [-1,2] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;

   state = 
      if(pre_state = 0)
      then
         if(not p)
         then 0
         else if (p and a)
         then 0
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if (not p)
         then 0
         else if a
         then 0
         else if(p and not a and not b)
         then 1
         else if(p and not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then 2
      else -1;
      
   holds = (state <> 2);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node while_responds(p : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and a)
         then 1
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if (not p)
         then 0
         else if (p and a)
         then 1
         else if (p and not a and not b)
         then 1
         else if (p and not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then
         if (not p)
         then 3
         else if (p and a)
         then 1
         else if (p and not a)
         then 2
         else -1
      else if (pre_state = 3)
      then 3
      else -1 ;
         
   holds = (state = 0) or (state = 1);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node global_always(a : bool) returns (holds : bool );
let
  holds = a and (true -> pre holds);
tel;

node global_responds_within(a : bool; b : bool; n : int) returns (holds : bool);
var
   state,pre_state : subrange [-1,2] of int;
   latch_n : int;
   i,pre_i : int;
let
   latch_n = n -> pre latch_n;

   pre_i = 0 -> pre i;
   
   i = 
      if (pre_state = 0)
      then 
         if (b and not a)
         then 0
         else pre_i
      else if (pre_state = 1)
      then
         if (not a)
         then pre_i + 1
         else pre_i
      else if (pre_state = 2)
      then pre_i
      else pre_i;
   
   pre_state = 0 -> pre state;

   state = 
      if (pre_state = 0)
      then
         if(not b)
         then 0
         else if(b and a)
         then 0
         else if(b and not a and latch_n > 0)
         then 1
         else if(b and not a and latch_n = 0)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if a
         then 0
         else if (not a and i < latch_n)
         then 1
         else if (not a and i >= latch_n)
         then 2
         else -1
      else if (pre_state = 2)
      then 2
      else -1;
      
   holds = (state = 0) or (state = 1);
tel;

node global_exists(a : bool) returns (holds : bool);
var
   state : subrange [-1,1] of int;
   pre_state : subrange [-1,1] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;

   state = 
      if (pre_state = 0)
      then
         if (not a)
         then 0
         else if a
         then 1
         else -1
      else if (pre_state = 1)
      then 1
      else -1;
      
   holds = (state = 1);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;


node global_precedes (a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if a
         then 1
         else if(not a and not b)
         then 0
         else if(not a and b)
         then 2
         else -1
      else if(pre_state = 1)
      then 1
      else if(pre_state = 2)
      then 2
      else -1;

   holds = (state <> 2);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node global_responds(a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,1] of int;
   pre_state : subrange [-1,1] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;

   state = 
      if (pre_state = 0)
      then 
         if (not b)
         then 0
         else if (a and b)
         then 0
         else if (not a and b)
         then 1
         else -1
      else if (pre_state = 1)
      then
         if (not a)
         then 1
         else if a
         then 0
         else -1
      else -1;
      
   holds = (state = 0);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;





node between_always (p : bool; q : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if(p and q)
         then 0
         else if(p and not q and a)
         then 1
         else if(p and not q and not a)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if q
         then 0
         else if(not q and a)
         then 1
         else if(not q and not a)
         then 2
         else -1
      else if (pre_state = 2)
      then
         if q
         then 3
         else if (not q)
         then 2
         else -1
      else if (pre_state = 3)
      then 3
      else -1;
      
      holds = (state <> 3);
tel;

node between_exists(p : bool; q : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if q
         then 0
         else if a
         then 0
         else if (p and not q and not a)
         then 1
         else -1
      else if (pre_state = 1)
      then
         if q
         then 2
         else if (not q and not a)
         then 1
         else if (not q and a)
         then 0
         else -1
      else if (pre_state = 2)
      then 2
      else -1;

   holds = (state <> 2);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node between_precedes (p : bool; q : bool; a : bool ; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state =
      if(pre_state = 0)
      then
         if not p
         then 0
         else if (p and q)
         then 0
         else if (p and a)
         then 0
         else if (p and not q and not a and not b)
         then 1
         else if (p and not q and not a and b)
         then 2
         else -1
      else if(pre_state = 1)
      then
         if q
         then 0
         else if a 
         then 0
         else if (not q and not a and not b)
         then 1
         else if (not q and not a and b)
         then 2
         else -1
      else if(pre_state = 2)
      then 
         if q
         then 3
         else if (not q)
         then 2
         else -1
      else if (pre_state = 3)
      then 3
      else -1;
      
   holds = (state <> 3);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node between_responds (p : bool; q : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state =
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if (p and q)
         then 0
         else if (p and not q and not b)
         then 1
         else if (p and not q and a and b)
         then 1
         else if (p and not q and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if q
         then 0
         else if (not q and not b)
         then 1
         else if (not q and a and b)
         then 1
         else if (not q and not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then 
         if q
         then 3
         else if (not q and not a)
         then 2
         else if (not q and a)
         then 1
         else -1
      else if (pre_state = 3)
      then 3
      else -1;
      
      holds = (state <> 3);
      prop1 = (state <> -1);
      --%PROPERTY prop1;
tel;


node after_until_always(p : bool; q : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
let
   pre_state = 0 -> pre state;
   
   state =
      if (pre_state = 0)
      then
         if(not p)
         then 0
         else if(p and q)
         then 0
         else if(p and not q and a)
         then 1
         else if(p and not q and not a)
         then 2
         else -1
      else if(pre_state = 1)
      then
         if q
         then 0
         else if (not q and a)
         then 1
         else if (not q and not a)
         then 2
         else -1
      else if(pre_state = 2)
      then 2
      else -1;
      
   holds = (state <> 2);
tel;

node after_until_exists(p : bool; q : bool; a : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if (not p)
         then 0
         else if(p and q)
         then 0
         else if(p and not a and not q)
         then 1
         else if(p and a and not q)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if q
         then 3
         else if (not q and a)
         then 2
         else if (not q and not a)
         then 1
         else -1
      else if (pre_state = 2)
      then
         if q
         then 0
         else if (p and not q and a)
         then 2
         else if (p and not q and not a)
         then 1
         else if (not p and not q)
         then 2
         else -1
      else if (pre_state = 3)
      then 3
      else -1;
      
   holds = (state = 0) or (state = 2);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;

node after_until_precedes(p : bool; q : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,2] of int;
   pre_state : subrange [-1,2] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then 
         if (not p)
         then 0
         else if (p and q)
         then 0
         else if (p and not q and a)
         then 0
         else if (p and not q and not a and not b)
         then 1
         else if (p and not q and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if q
         then 0
         else if a 
         then 0
         else if (not q and not a and not b)
         then 1
         else if (not q and not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then 2
      else -1;
         
   holds = (state <> 2);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;


node after_until_responds(p : bool; q : bool; a : bool; b : bool) returns (holds : bool);
var
   state : subrange [-1,3] of int;
   pre_state : subrange [-1,3] of int;
   prop1 : bool;
let
   pre_state = 0 -> pre state;
   
   state = 
      if (pre_state = 0)
      then
         if(not p)
         then 0
         else if(p and q)
         then 0
         else if(p and not q and a)
         then 1
         else if(p and not q and not a and not b)
         then 1
         else if(p and not q and not a and b)
         then 2
         else -1
      else if (pre_state = 1)
      then
         if q
         then 0
         else if (not q and a)
         then 1
         else if (not q and not a and not b)
         then 1
         else if (not q and not a and b)
         then 2
         else -1
      else if (pre_state = 2)
      then
         if q
         then 3
         else if (not q and not a)
         then 2
         else if (not q and a)
         then 1
         else -1
      else if (pre_state = 3)
      then 3
      else -1;
   
   holds = (state = 0) or (state = 1);
   prop1 = (state <> -1);
   --%PROPERTY prop1;
tel;


node H(a : bool) returns (holds : bool);
let
   holds = a and Z(holds);
tel;

node O(a : bool) returns (holds : bool);
let
   holds = a or Y(holds);
tel;

node Y(a : bool) returns (holds : bool);
let
   holds = (false -> pre a);
tel;

node Z(a : bool) returns (holds : bool);
let
   holds = (true -> pre a);
tel;

node S(a : bool; b : bool) returns (holds : bool);
let
   holds = b or (a and Y(holds));
tel;

node T(a : bool; b : bool) returns (holds : bool);
let
   holds = b and (a or Z(holds));
tel;

node holds_while(p : bool; c : bool) returns (holds : bool);
let
   holds = (Y(p) and c) => p;
tel;


const Ctrl_Tanks_definitions_MAX_PUMP_FLOWRATE = 0.2;

node Ctrl_Tanks_Pump(
  inflow : real;
  pump_on_state : bool;
  outflow : real
) returns (
  _gen_requirements_0 : bool
);
var
  a01 : bool;
  r01 : bool;
  r02 : bool;
  p01 : bool;
  canary : bool;
let
  --%MAIN
  a01 = global_always((inflow >= 0.2));

  r01 = while_always(pump_on_state, (outflow = 0.2));

  r02 = while_always((not pump_on_state), (outflow = 0.0));

  p01 = (_gen_requirements_0 => global_always((outflow >= 0.0)));

  canary = (_gen_requirements_0 => global_always(false));

  _gen_requirements_0 = H(((a01 and r01) and r02));

  --%PROPERTY p01;
  --%PROPERTY canary;

tel;
