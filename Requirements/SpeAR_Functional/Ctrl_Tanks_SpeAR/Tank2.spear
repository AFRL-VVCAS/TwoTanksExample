Relation Ctrl_Tanks.Tank2;
// This is the requirements on second tank (tank2) subcomponent
//	->	This is designed to act only as a liquid container, any logic to prevent overflow and underflow
//		is not the responsibility of this component.
//	->	In the event that an overflow or underflow occurs the component must inform the rest of the system.
//	->	This is an OPEN tank, therefore in the event the tank overflows then extra liquid will exceed the capacity

Uses Ctrl_Tanks.definitions.*;
Uses Ctrl_Tanks.definitions.tank2_output_type.*;

Inputs:
	inflow : real;				// dependent on the current valve tank1 outflow valve
	production_outflow : real;	// dependent on the current production outflow valve
	emergency_outflow : real;	// dependent on the current emergency outflow valve
	
Outputs:
	output : tank2_output_type;

State:
	level : real;
	overflow_state : bool;
	underflow_state : bool;
	
Macros:
	total_outflow : real = production_outflow + emergency_outflow;
	calculated_height : real = (pre level + ((inflow - total_outflow) / TANK2_CROSS_SECTIONAL_AREA)); 
	tank_liquid_height : real = if (calculated_height < 0.0) then 0.0 else
									if (calculated_height > MAX_TANK2_HEIGHT) then MAX_TANK2_HEIGHT else
									calculated_height;
//	tank_overflow : bool = if (calculated_height > MAX_TANK2_HEIGHT) then true else false;
	
Requirements:
	a01 = initial :: level == TANK2_INIT_LIQUID_HEIGHT;

	a_inflow_1 = global :: always inflow >= 0.0; 
	a_inflow_2 = global :: always inflow <= MAX_TANK1_VALVE_FLOWRATE;		// could argue that this is a property of the valve and not appropriate here
	a_p_outflow_1 = global :: always production_outflow >= 0.0;
	a_p_outflow_2 = global :: always production_outflow <= MAX_TANK2_P_VALVE_FLOWRATE;
	a_e_outflow_1 = global :: always emergency_outflow >= 0.0;
	a_e_outflow_2 = global :: always emergency_outflow <= MAX_TANK2_E_VALVE_FLOWRATE;

	r_liq_ht = global :: always level == tank_liquid_height;
	
	// Not currently working - Lucas is looking into
//	r_overflow_00 = before tank_overflow :: always not overflow_state;	
//	r_overflow_01 = after tank_overflow :: always overflow_state;
	
	// This works in the trace because we are using the gross height calculation to determine underflow and overflow
	// -> The trace is only showing the level which is protected to the proper height restrictions
	r_overflow_00 = while calculated_height <= MAX_TANK2_HEIGHT :: always not overflow_state;	
	r_overflow_01 = while calculated_height > MAX_TANK2_HEIGHT :: always overflow_state;
	
	r_underflow_00 = while calculated_height >= 0.0 :: always not underflow_state;	
	r_underflow_01 = while calculated_height < 0.0 :: always underflow_state;
	
	r_output = global :: always output == new tank2_output_type {tank2_output_type.water_lvl = level,
																 tank2_output_type.overflow = overflow_state,
																 tank2_output_type.underflow = underflow_state};	
	

Properties:
	// Verify liquid height remains in correct range
	p_t2_01 = global :: always level >= 0.0;
	p_t2_02 = global :: always level <= MAX_TANK2_HEIGHT;		// the tank can't hold more than the max height
	
	p_t2_03 = global :: always total_outflow == (production_outflow + emergency_outflow);

	// Counter-examples (designed to prove correct behavior of the system)
//	p_t2_CE01 = global :: always not overflow_state;
//	p_t2_CE02 = global :: always not underflow_state;	
//	canary = global :: always false;
	