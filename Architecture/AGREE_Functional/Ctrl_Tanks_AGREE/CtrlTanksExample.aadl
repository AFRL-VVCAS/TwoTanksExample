package tank_system
public 
   with Base_Types;
   with std;
   with config;
   with env_package;
   with controller_package;
   
annex agree {**
	-- time rates
	const init_period_s : int = config.init_period_s;
	const high_safety_margin_s : int = config.high_safety_margin_s;
	const low_safety_margin_s : int = config.low_safety_margin_s;
		
	-- height parameters for Tank 1
	const max_tank1_height_m : real = config.max_tank1_height_m;
	const tank1_empty_m : real = config.tank1_empty_m;
	
	-- safety parameters for Tank 1
	const t1_safety_hi_ht_m : real = config.tank1_safety_hi_ht_m;
	const t1_safety_lo_ht_m : real = config.tank1_safety_lo_ht_m;
	
	-- height parameters for Tank 2
	const max_tank2_height_m : real = config.max_tank2_height_m;
	const tank2_empty_m : real = config.tank2_empty_m;
	
	-- safety parameters for Tank 2
	const t2_safety_hi_ht_m : real = config.tank2_safety_hi_ht_m;
	const t2_safety_md_ht_m : real = config.tank2_safety_md_ht_m;
	const t2_safety_lo_ht_m : real = config.tank2_safety_lo_ht_m;
   	
**};

system Two_Tank_Two_Ctrl
	features
		Init_Height_Tank1: in data port Base_Types::Float;
		Init_Height_Tank2: in data port Base_Types::Float;
		Tank1_Height: out data port Base_Types::Float;
		Tank2_Height: out data port Base_Types::Float;
		
	annex agree {**
		
		eq t1_sensor_high : bool;
		eq t1_sensor_low : bool;
		
		-- Assumptions ----------------------------------
		assume "Tank 1 shall Init be empty":
			std.Init(Tank1_Height = tank_system.tank1_empty_m);
			
		assume "Tank 2 shall Init be empty":
			std.Init(Tank2_Height = tank_system.tank2_empty_m);
		
		assume "No sensors fail":
			true;
		-------------------------------------------------
			
		-- Safety Properties ----------------------------
		guarantee "Tank 1 shall not overflow":
			Tank1_Height <= tank_system.max_tank1_height_m;
			
		guarantee "Tank 2 shall not overflow":
			Tank2_Height <= tank_system.max_tank2_height_m;
			
--		guarantee "After an initial period n, the tank shall not be below the minimum threshold":
--			std.AfterN(Tank_Height >= CtrlTanksExample.t1_safety_lo_ht_m, CtrlTanksExample.init_period_s);
		
		guarantee "The height of the tank 1 liquid shall not be over the tank 1 high safety level for more than the specified length of time":
			std.AfterNReset(Tank1_Height < tank_system.t1_safety_hi_ht_m,tank_system.high_safety_margin_s,(Tank1_Height >= tank_system.t1_safety_hi_ht_m));
			
		guarantee "The height of the tank 1 liquid shall not be lower than the tank 1 low safety level (once it has already crossed it) for more than the specified length of time":
			 std.AfterNReset(Tank1_Height > tank_system.t1_safety_lo_ht_m,tank_system.low_safety_margin_s,std.AfterN(Tank1_Height <= tank_system.t1_safety_lo_ht_m,tank_system.init_period_s));
				
		guarantee "The height of the tank 2 liquid shall not be over the tank 2 high safety level for more than the specified length of time":
			std.AfterNReset(Tank2_Height < tank_system.t2_safety_hi_ht_m,tank_system.high_safety_margin_s,(Tank2_Height >= tank_system.t2_safety_hi_ht_m));
			
		guarantee "The height of the tank 2 liquid shall not be lower than the tank 2 low safety level (once it has already crossed it) for more than the specified length of time":
			 std.AfterNReset(Tank2_Height > tank_system.t2_safety_lo_ht_m,tank_system.low_safety_margin_s,std.AfterN(Tank2_Height <= tank_system.t2_safety_lo_ht_m,tank_system.init_period_s));
		-------------------------------------------------
		
		-- Sanity Checks (Designed to Fail) -------------
--		guarantee "The tank height will not be bewteen the 2 safety values":
--			not((Tank_Height > CtrlTanksExample.t1_safety_lo_ht_m) and (Tank_Height < CtrlTanksExample.t1_safety_hi_ht_m));
--			
--		guarantee "":
--			false;

--		guarantee "The emergency valve will never be on":
--			Tank2_Height < config.tank2_safety_hi_ht_m; 
		-------------------------------------------------
		
	**};
end Two_Tank_Two_Ctrl;

system implementation Two_Tank_Two_Ctrl.Impl
	subcomponents
		C_T1_sub : system controller_package::Controller_Tank1.Impl;
		C_T2_sub : system controller_package::Controller_Tank2.Impl;
		E_sub : system env_package::Two_Tank_Environment.Impl;
	connections
		-- Tank Heights
		E_T1_to_OUT: port E_sub.Tank1_Height -> Tank1_Height {Communication_Properties::Timing => immediate;};
		E_T2_to_OUT: port E_sub.Tank2_Height -> Tank2_Height {Communication_Properties::Timing => immediate;};
		
		-- Sensor interface
		E_sh_T1_to_C_T1_sh: port E_sub.Sensor_T1_High -> C_T1_sub.SH_Input {Communication_Properties::Timing => immediate;};
		E_sl_T1_to_C_T1_sl: port E_sub.Sensor_T1_Low -> C_T1_sub.SL_Input {Communication_Properties::Timing => immediate;};
		E_sh_T2_to_C_T2_sh: port E_sub.Sensor_T2_High -> C_T2_sub.SH_Input {Communication_Properties::Timing => immediate;};
		E_sm_T2_to_C_T2_sm: port E_sub.Sensor_T2_Mid -> C_T2_sub.SM_Input {Communication_Properties::Timing => immediate;};
		E_sl_T2_to_C_T2_sl: port E_sub.Sensor_T2_Low -> C_T2_sub.SL_Input {Communication_Properties::Timing => immediate;};
		
		-- Control Outputs
		C_T1_po_to_E_po: port C_T1_sub.Pump_State -> E_sub.Pump_On {Communication_Properties::Timing => immediate;};
		C_T1_vo_to_E_T1_vo: port C_T1_sub.Valve_State -> E_sub.Valve_T1_Open {Communication_Properties::Timing => immediate;};
		C_T1_vo_to_C_T2_v1: port C_T1_sub.Valve_State -> C_T2_sub.Valve_Input_State {Communication_Properties::Timing => immediate;};
		C_T2_pvo_to_E_T2_pvo: port C_T2_sub.Valve_Output_P_State -> E_sub.Valve_T2_P_Open {Communication_Properties::Timing => immediate;};
		C_T2_evo_to_E_T2_evo: port C_T2_sub.Valve_Output_E_State -> E_sub.Valve_T2_E_Open {Communication_Properties::Timing => immediate;};
		
		
	annex agree {**
		assert (C_T1_sub.SH_Input => C_T1_sub.SL_Input);
		assert (C_T2_sub.SH_Input => C_T2_sub.SM_Input);
		assert (C_T2_sub.SM_Input => C_T2_sub.SL_Input);
		
		assert (std.Init(not E_sub.Pump_On));			
		assert (std.Init(not E_sub.Valve_T1_Open));			
		assert (std.Init(not E_sub.Valve_T2_P_Open));			
		assert (std.Init(not E_sub.Valve_T2_E_Open));	
	**};
		
end Two_Tank_Two_Ctrl.Impl;

system Single_Tank
	features
		Init_Height: in data port Base_Types::Float;
		Tank_Height: out data port Base_Types::Float;
		
	annex agree {**
		
		-- Assumptions ----------------------------------
		assume "Tank shall Init be empty":
			std.Init(Tank_Height = tank_system.tank1_empty_m);
		
		assume "No sensors fail":
			true;
		-------------------------------------------------
			
		-- Safety Properties ----------------------------
		guarantee "Tank shall not overflow":
			Tank_Height <= tank_system.max_tank1_height_m;
			
--		guarantee "After an initial period n, the tank shall not be below the minimum threshold":
--			std.AfterN(Tank_Height >= CtrlTanksExample.t1_safety_lo_ht_m, CtrlTanksExample.init_period_s);
			
		guarantee "The height of the liquid shall not be over the high safety level for more than the specified length of time":
			std.AfterNReset(Tank_Height < tank_system.t1_safety_hi_ht_m,tank_system.high_safety_margin_s,(Tank_Height >= tank_system.t1_safety_hi_ht_m));
			
		guarantee "The height of the liquid shall not be lower than the low safety level (once it has already crossed it) for more than the specified length of time":
			 std.AfterNReset(Tank_Height > tank_system.t1_safety_lo_ht_m,tank_system.low_safety_margin_s,std.AfterN(Tank_Height <= tank_system.t1_safety_lo_ht_m,tank_system.init_period_s));
		-------------------------------------------------
		
		-- Sanity Checks (Designed to Fail) -------------
--		guarantee "The tank height will not be bewteen the 2 safety values":
--			not((Tank_Height > CtrlTanksExample.t1_safety_lo_ht_m) and (Tank_Height < CtrlTanksExample.t1_safety_hi_ht_m));
--			
--		guarantee "":
--			false;
		-------------------------------------------------
		
	**};
end Single_Tank;

system implementation Single_Tank.Impl
	subcomponents
		C_sub : system controller_package::Controller_Tank1.Impl;
		E_sub : system env_package::Single_Tank_Environment.Impl;
	connections
		E_tv_to_OUT: port E_sub.Tank_Height -> Tank_Height {Communication_Properties::Timing => immediate;};
		E_sh_to_C_sh: port E_sub.Sensor_High -> C_sub.SH_Input {Communication_Properties::Timing => immediate;};
		E_sl_to_C_sl: port E_sub.Sensor_Low -> C_sub.SL_Input {Communication_Properties::Timing => immediate;};
		C_po_to_E_po: port C_sub.Pump_State -> E_sub.Pump_On {Communication_Properties::Timing => immediate;};
		C_vo_to_E_vo: port C_sub.Valve_State -> E_sub.Valve_Open {Communication_Properties::Timing => immediate;};
		
	annex agree {**
		assert (C_sub.SH_Input => C_sub.SL_Input);
	**};
		
end Single_Tank.Impl;
	
end tank_system;