(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref #"system.ads" 1 0 0# =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection #"system.ads" 1 0 0# 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc #"system.ads" 1 0 0# 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref #"system.ads" 1 0 0# =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection #"system.ads" 1 0 0# 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc #"system.ads" 1 0 0# 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref #"system.ads" 1 0 0# =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection #"system.ads" 1 0 0# 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc #"system.ads" 1 0 0# 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref #"system.ads" 1 0 0# =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection #"system.ads" 1 0 0# 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc #"system.ads" 1 0 0# 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref #"system.ads" 1 0 0# =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection #"system.ads" 1 0 0# 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc #"system.ads" 1 0 0# 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref #"system.ads" 1 0 0# =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection #"system.ads" 1 0 0# 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc #"system.ads" 1 0 0# 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"system.ads" 1 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float32.t)  =
  #"system.ads" 1 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref #"system.ads" 1 0 0# =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection #"system.ads" 1 0 0# 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc #"system.ads" 1 0 0# 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last #"system.ads" 1 0 0# 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Float64.t)  =
  #"system.ads" 1 0 0# (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref #"system.ads" 1 0 0# =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection #"system.ads" 1 0 0# 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc #"system.ads" 1 0 0# 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  255
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref #"system.ads" 1 0 0# =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection #"system.ads" 1 0 0# 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc #"system.ads" 1 0 0# 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  65535
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  0
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_78 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_78) /\ (temp___idx_78 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_78)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_78))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type #"system.ads" 1 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string #"system.ads" 1 0 0# 
   (x : Main.__image) : string
 
 function from_string #"system.ads" 1 0 0# 
   (x : string) : Main.__image
 
 type string__ref #"system.ads" 1 0 0# =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection #"system.ads" 1 0 0# 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc #"system.ads" 1 0 0# 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_84 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_84) /\ (temp___idx_84 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_84)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_84))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_character.wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one #"system.ads" 1 0 0# 
   : int =
  1
 
 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_90 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_90) /\ (temp___idx_90 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_90)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_90))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type #"system.ads" 1 0 0# =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string #"system.ads" 1 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref #"system.ads" 1 0 0# =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection #"system.ads" 1 0 0# 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc #"system.ads" 1 0 0# 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration #"system.ads" 1 0 0# 
 
 function inv_small #"system.ads" 1 0 0# 
   : Main.__fixed =
  1000000000
 
 function first #"system.ads" 1 0 0# 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : Main.__fixed)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small
 
 type duration__ref #"system.ads" 1 0 0# =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection #"system.ads" 1 0 0# 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc #"system.ads" 1 0 0# 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -128 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  127
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref #"system.ads" 1 0 0# =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection #"system.ads" 1 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc #"system.ads" 1 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -32768 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  32767
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref #"system.ads" 1 0 0# =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection #"system.ads" 1 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc #"system.ads" 1 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  2147483647
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref #"system.ads" 1 0 0# =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection #"system.ads" 1 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc #"system.ads" 1 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref #"system.ads" 1 0 0# =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection #"system.ads" 1 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc #"system.ads" 1 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer #"system.ads" 1 0 0# 
 
 function first #"system.ads" 1 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"system.ads" 1 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"system.ads" 1 0 0# 
   (x : int)  =
  #"system.ads" 1 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref #"system.ads" 1 0 0# =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection #"system.ads" 1 0 0# 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc #"system.ads" 1 0 0# 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "root_stream_type" defined at a-stream.ads:70, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Ada__streams__root_stream_type__rep
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 type __split_fields #"system.ads" 1 0 0# =
  { rec__ext__ "model_trace:" "name:" : Main.__private }
 
 function __split_fields___projection #"system.ads" 1 0 0# 
   (a : __split_fields) : Main.__private =
  a.rec__ext__
 
 meta "model_projection" function __split_fields___projection
 
 meta "inline : no" function __split_fields___projection
 
 type __split_fields__ref #"system.ads" 1 0 0# =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection #"system.ads" 1 0 0# 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc #"system.ads" 1 0 0# 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep #"system.ads" 1 0 0# =
  { __split_fields "model_trace:" "name:" : __split_fields; attr__tag "model_trace:" "name:" : int }
 
 function __rep___projection #"system.ads" 1 0 0# 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function __rep___2__projection #"system.ads" 1 0 0# 
   (a : __rep) : int =
  a.attr__tag
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base #"system.ads" 1 0 0# 
   (a : __rep) : __rep =
  a
 
 function of_base #"system.ads" 1 0 0# 
   (a : __rep) : __rep =
  a
 
 function __dispatch_eq #"system.ads" 1 0 0# 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "root_stream_type" defined at a-stream.ads:70, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__root_stream_type
 use export Ada__streams__root_stream_type__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type root_stream_type #"a-stream.ads" 70 0 0# =
  __rep
 
 function __tag #"a-stream.ads" 70 0 0# 
   : int
 
 function value__size #"a-stream.ads" 70 0 0# 
   : int
 
 function object__size #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) : int
 
 function value__alignment #"a-stream.ads" 70 0 0# 
   : int
 
 function object__alignment #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a #"a-stream.ads" 70 0 0#  : root_stream_type.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a #"a-stream.ads" 70 0 0#  : root_stream_type.
   ((object__alignment a) >= 0))
 
 function user_eq #"a-stream.ads" 70 0 0# 
   (a : root_stream_type) (b : root_stream_type) : bool
 
 function dummy #"a-stream.ads" 70 0 0# 
   : root_stream_type
 
 type root_stream_type__ref #"a-stream.ads" 70 0 0# =
  { mutable root_stream_type__content "model_trace:" "name:" : root_stream_type }
 
 function root_stream_type__ref___projection #"a-stream.ads" 70 0 0# 
   (a : root_stream_type__ref) : root_stream_type =
  a.root_stream_type__content
 
 meta "model_projection" function root_stream_type__ref___projection
 
 meta "inline : no" function root_stream_type__ref___projection
 
 val root_stream_type__havoc #"a-stream.ads" 70 0 0# 
   (x : root_stream_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type stream_element #"a-stream.ads" 42 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"a-stream.ads" 42 0 0# 
   : BV8.t
 
 function first #"a-stream.ads" 42 0 0# 
   : BV8.t =
  ( BV8.of_int 0 )
 
 function last #"a-stream.ads" 42 0 0# 
   : BV8.t =
  ( BV8.of_int 255 )
 
 function first_int #"a-stream.ads" 42 0 0# 
   : int =
  0
 
 function last_int #"a-stream.ads" 42 0 0# 
   : int =
  255
 
 predicate in_range #"a-stream.ads" 42 0 0# 
   (x : BV8.t)  =
  #"a-stream.ads" 42 0 0# true
 
 predicate in_range_int #"a-stream.ads" 42 0 0# 
   (x : int)  =
  #"a-stream.ads" 42 0 0# BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = stream_element, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type stream_element__ref #"a-stream.ads" 42 0 0# =
  { mutable stream_element__content "model_trace:" "name:" : stream_element }
 
 function stream_element__ref___projection #"a-stream.ads" 42 0 0# 
   (a : stream_element__ref) : stream_element =
  a.stream_element__content
 
 meta "model_projection" function stream_element__ref___projection
 
 meta "inline : no" function stream_element__ref___projection
 
 val stream_element__havoc #"a-stream.ads" 42 0 0# 
   (x : stream_element__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element__rep
 use        Ada__streams__stream_element
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = Ada__streams__stream_element.stream_element, 
 predicate in_range = Ada__streams__stream_element.in_range, 
 predicate in_range_int = Ada__streams__stream_element.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__Tstream_element_offsetB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tstream_element_offsetB #"a-stream.ads" 44 0 0# 
 
 function first #"a-stream.ads" 44 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"a-stream.ads" 44 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"a-stream.ads" 44 0 0# 
   (x : int)  =
  #"a-stream.ads" 44 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tstream_element_offsetB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tstream_element_offsetB__ref #"a-stream.ads" 44 0 0# =
  { mutable tstream_element_offsetB__content "model_trace:" "name:" : tstream_element_offsetB }
 
 function tstream_element_offsetB__ref___projection #"a-stream.ads" 44 0 0# 
   (a : tstream_element_offsetB__ref) : tstream_element_offsetB =
  a.tstream_element_offsetB__content
 
 meta "model_projection" function tstream_element_offsetB__ref___projection
 
 meta "inline : no" function tstream_element_offsetB__ref___projection
 
 val tstream_element_offsetB__havoc #"a-stream.ads" 44 0 0# 
   (x : tstream_element_offsetB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__Tstream_element_offsetB__rep
 use        Ada__streams__Tstream_element_offsetB
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__streams__Tstream_element_offsetB.tstream_element_offsetB, 
 predicate in_range = Ada__streams__Tstream_element_offsetB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_offset
 use import "_gnatprove_standard".Main
 use import "int".Int

 type stream_element_offset #"a-stream.ads" 44 0 0# 
 
 function first #"a-stream.ads" 44 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"a-stream.ads" 44 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"a-stream.ads" 44 0 0# 
   (x : int)  =
  #"a-stream.ads" 44 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = stream_element_offset, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type stream_element_offset__ref #"a-stream.ads" 44 0 0# =
  { mutable stream_element_offset__content "model_trace:" "name:" : stream_element_offset }
 
 function stream_element_offset__ref___projection #"a-stream.ads" 44 0 0# 
   (a : stream_element_offset__ref) : stream_element_offset =
  a.stream_element_offset__content
 
 meta "model_projection" function stream_element_offset__ref___projection
 
 meta "inline : no" function stream_element_offset__ref___projection
 
 val stream_element_offset__havoc #"a-stream.ads" 44 0 0# 
   (x : stream_element_offset__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_offset__rep
 use        Ada__streams__stream_element_offset
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__streams__stream_element_offset.stream_element_offset, 
 predicate in_range = Ada__streams__stream_element_offset.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type stream_element_count #"a-stream.ads" 51 0 0# 
 
 function first #"a-stream.ads" 51 0 0# 
   : int =
  0
 
 function last #"a-stream.ads" 51 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"a-stream.ads" 51 0 0# 
   (x : int)  =
  #"a-stream.ads" 51 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = stream_element_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type stream_element_count__ref #"a-stream.ads" 51 0 0# =
  { mutable stream_element_count__content "model_trace:" "name:" : stream_element_count }
 
 function stream_element_count__ref___projection #"a-stream.ads" 51 0 0# 
   (a : stream_element_count__ref) : stream_element_count =
  a.stream_element_count__content
 
 meta "model_projection" function stream_element_count__ref___projection
 
 meta "inline : no" function stream_element_count__ref___projection
 
 val stream_element_count__havoc #"a-stream.ads" 51 0 0# 
   (x : stream_element_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_count__rep
 use        Ada__streams__stream_element_count
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__streams__stream_element_count.stream_element_count, 
 predicate in_range = Ada__streams__stream_element_count.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "stream_element_array" defined at a-stream.ads:54, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Ada__streams__stream_element
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8
 use        Ada__streams__stream_element
 use        Ada__streams__stream_element__rep

 function index_I1_one #"a-stream.ads" 51 0 0# 
   : int =
  1
 
 type component_type #"a-stream.ads" 51 0 0# =
  Ada__streams__stream_element.stream_element
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"a-stream.ads" 42 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_132 #"a-stream.ads" 42 0 0#  : int.
   (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
    ((Ada__streams__stream_element__rep.to_rep (get a temp___idx_132)) = (Ada__streams__stream_element__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"a-stream.ads" 42 0 0#  b #"a-stream.ads" 42 0 0#  : map.
  (forall a__first #"a-stream.ads" 42 0 0#  a__last #"a-stream.ads" 42 0 0#  b__first #"a-stream.ads" 42 0 0#  b__last #"a-stream.ads" 42 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_132 #"a-stream.ads" 42 0 0#  : int.
    (if (( (a__first <= temp___idx_132) /\ (temp___idx_132 <= a__last) )) then (
     ((Ada__streams__stream_element__rep.to_rep (get a temp___idx_132)) = (Ada__streams__stream_element__rep.to_rep (get b ((b__first - a__first) + temp___idx_132))))) else true)) ) )))
 
 function index_Index_one #"a-stream.ads" 42 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_BV8_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Ada__streams__stream_element__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "stream_element_array" defined at a-stream.ads:54, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__stream_element_array
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element
 use        Ada__streams__Tstream_element_offsetB
 use        Ada__streams__Tstream_element_offsetB__rep
 use        Ada__streams__stream_element_offset
 use        Array__Int__Ada__streams__stream_element

 type component_type #"a-stream.ads" 42 0 0# =
  Ada__streams__stream_element.stream_element
 
 function index_1_id #"a-stream.ads" 42 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Ada__streams__stream_element.map, 
 function array_bool_eq = Array__Int__Ada__streams__stream_element.bool_eq, 
 type index_base_type = Ada__streams__Tstream_element_offsetB.tstream_element_offsetB, 
 type index_rep_type = int, 
 function to_rep = Ada__streams__Tstream_element_offsetB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Ada__streams__Tstream_element_offsetB.in_range, 
 predicate index_dynamic_property = Ada__streams__stream_element_offset.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type stream_element_array #"a-stream.ads" 54 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type stream_element_array__ref #"a-stream.ads" 54 0 0# =
  { mutable stream_element_array__content "model_trace:" "name:" : stream_element_array }
 
 function stream_element_array__ref___projection #"a-stream.ads" 54 0 0# 
   (a : stream_element_array__ref) : stream_element_array =
  a.stream_element_array__content
 
 meta "model_projection" function stream_element_array__ref___projection
 
 meta "inline : no" function stream_element_array__ref___projection
 
 val stream_element_array__havoc #"a-stream.ads" 54 0 0# 
   (x : stream_element_array__ref) : unit
  writes {x}

end

(* Module for defining the constant "item" defined at a-stream.ads:65, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__write__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function item #"a-stream.ads" 65 0 0# "model_projected" "name:Item" "model_trace:5393" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-stream.ads:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Troot_stream_typeC" defined at a-stream.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Ada__streams__Troot_stream_typeC
 use export Ada__streams__root_stream_type
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at a-stream.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__write_sea__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function v #"a-stream.ads" 82 0 0# "model_projected" "name:V" "model_trace:5463" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write_sea__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "v" defined at a-stream.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__streams__stream_element_arraySW__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function v #"a-stream.ads" 85 0 0# 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__stream_element_arraySW__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name #"system.ads" 46 0 0# 
 
 function first #"system.ads" 46 0 0# 
   : int =
  0
 
 function last #"system.ads" 46 0 0# 
   : int =
  0
 
 predicate in_range #"system.ads" 46 0 0# 
   (x : int)  =
  #"system.ads" 46 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type name__ref #"system.ads" 46 0 0# =
  { mutable name__content "model_trace:" "name:" : name }
 
 function name__ref___projection #"system.ads" 46 0 0# 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc #"system.ads" 46 0 0# 
   (x : name__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name__rep
 use        System__name
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__name.name, 
 predicate in_range = System__name.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0# "model" "model_trace:5524" "name:System_Name" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 46 0 0# 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:116, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type address #"system.ads" 116 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"system.ads" 116 0 0# 
   : BV64.t
 
 function first #"system.ads" 116 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"system.ads" 116 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"system.ads" 116 0 0# 
   : int =
  0
 
 function last_int #"system.ads" 116 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"system.ads" 116 0 0# 
   (x : BV64.t)  =
  #"system.ads" 116 0 0# true
 
 predicate in_range_int #"system.ads" 116 0 0# 
   (x : int)  =
  #"system.ads" 116 0 0# BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type address__ref #"system.ads" 116 0 0# =
  { mutable address__content "model_trace:" "name:" : address }
 
 function address__ref___projection #"system.ads" 116 0 0# 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc #"system.ads" 116 0 0# 
   (x : address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "address" defined at system.ads:116, created in Gnat2Why.Types.Translate_Type *)
module System__address__rep
 use        System__address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__address.address, 
 predicate in_range = System__address.in_range, 
 predicate in_range_int = System__address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_address #"system.ads" 69 0 0# "model" "model_trace:5646" "name:Null_Address" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 77 0 0# "model" "model_trace:5695" "name:Left" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 77 0 0# "model" "model_trace:5702" "name:Right" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function olt #"system.ads" 77 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate olt__function_guard #"system.ads" 116 0 0# 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 78 0 0# "model" "name:Left" "model_trace:5722" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 78 0 0# "model" "name:Right" "model_trace:5729" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ole #"system.ads" 78 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ole__function_guard #"system.ads" 116 0 0# 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 79 0 0# "model" "name:Left" "model_trace:5749" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 79 0 0# "model" "name:Right" "model_trace:5756" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ogt #"system.ads" 79 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ogt__function_guard #"system.ads" 116 0 0# 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 80 0 0# "model" "name:Left" "model_trace:5776" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 80 0 0# "model" "name:Right" "model_trace:5783" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oge #"system.ads" 80 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oge__function_guard #"system.ads" 116 0 0# 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 81 0 0# "model" "name:Left" "model_trace:5803" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 81 0 0# "model" "name:Right" "model_trace:5810" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oeq #"system.ads" 81 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oeq__function_guard #"system.ads" 116 0 0# 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order #"system.ads" 91 0 0# 
 
 function first #"system.ads" 91 0 0# 
   : int =
  0
 
 function last #"system.ads" 91 0 0# 
   : int =
  1
 
 predicate in_range #"system.ads" 91 0 0# 
   (x : int)  =
  #"system.ads" 91 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type bit_order__ref #"system.ads" 91 0 0# =
  { mutable bit_order__content "model_trace:" "name:" : bit_order }
 
 function bit_order__ref___projection #"system.ads" 91 0 0# 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc #"system.ads" 91 0 0# 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order__rep
 use        System__bit_order
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__bit_order.bit_order, 
 predicate in_range = System__bit_order.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0# "model" "model_trace:5877" "name:Default_Bit_Order" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 91 0 0# 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 105 0 0# "model" "model_trace:5893" "name:Max_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 106 0 0# "model" "model_trace:5903" "name:Max_Interrupt_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority #"system.ads" 108 0 0# 
 
 function first #"system.ads" 108 0 0# 
   : int =
  0
 
 function last #"system.ads" 108 0 0# 
   : int =
  98
 
 predicate in_range #"system.ads" 108 0 0# 
   (x : int)  =
  #"system.ads" 108 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref #"system.ads" 108 0 0# =
  { mutable any_priority__content "model_trace:" "name:" : any_priority }
 
 function any_priority__ref___projection #"system.ads" 108 0 0# 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc #"system.ads" 108 0 0# 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:109, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority #"system.ads" 109 0 0# 
 
 function first #"system.ads" 109 0 0# 
   : int =
  0
 
 function last #"system.ads" 109 0 0# 
   : int =
  97
 
 predicate in_range #"system.ads" 109 0 0# 
   (x : int)  =
  #"system.ads" 109 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref #"system.ads" 109 0 0# =
  { mutable priority__content "model_trace:" "name:" : priority }
 
 function priority__ref___projection #"system.ads" 109 0 0# 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc #"system.ads" 109 0 0# 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:109, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:110, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority #"system.ads" 110 0 0# 
 
 function first #"system.ads" 110 0 0# 
   : int =
  98
 
 function last #"system.ads" 110 0 0# 
   : int =
  98
 
 predicate in_range #"system.ads" 110 0 0# 
   (x : int)  =
  #"system.ads" 110 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref #"system.ads" 110 0 0# =
  { mutable interrupt_priority__content "model_trace:" "name:" : interrupt_priority }
 
 function interrupt_priority__ref___projection #"system.ads" 110 0 0# 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc #"system.ads" 110 0 0# 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:110, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:112, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 112 0 0# "model" "model_trace:5955" "name:Default_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 109 0 0# 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 129 0 0# "model" "model_trace:5985" "name:Backend_Divide_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 129 0 0# 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 130 0 0# "model" "model_trace:5995" "name:Backend_Overflow_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 130 0 0# 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 131 0 0# "model" "model_trace:6005" "name:Command_Line_Args" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 131 0 0# 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 132 0 0# "model" "model_trace:6015" "name:Configurable_Run_Time" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 132 0 0# 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 133 0 0# "model" "model_trace:6025" "name:Denorm" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 133 0 0# 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 134 0 0# "model" "model_trace:6035" "name:Duration_32_Bits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 134 0 0# 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 135 0 0# "model" "model_trace:6045" "name:Exit_Status_Supported" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 135 0 0# 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 136 0 0# "model" "model_trace:6055" "name:Fractional_Fixed_Ops" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 136 0 0# 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 137 0 0# "model" "model_trace:6065" "name:Frontend_Layout" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 137 0 0# 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 138 0 0# "model" "model_trace:6075" "name:Machine_Overflows" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 138 0 0# 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 139 0 0# "model" "model_trace:6085" "name:Machine_Rounds" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 139 0 0# 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 140 0 0# "model" "model_trace:6095" "name:Preallocated_Stacks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 140 0 0# 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 141 0 0# "model" "model_trace:6105" "name:Signed_Zeros" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 141 0 0# 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 142 0 0# "model" "model_trace:6115" "name:Stack_Check_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 142 0 0# 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 143 0 0# "model" "model_trace:6125" "name:Stack_Check_Probes" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 143 0 0# 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 144 0 0# "model" "model_trace:6135" "name:Stack_Check_Limits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 144 0 0# 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 145 0 0# "model" "model_trace:6145" "name:Support_Aggregates" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 145 0 0# 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 146 0 0# "model" "model_trace:6155" "name:Support_Atomic_Primitives" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 146 0 0# 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 147 0 0# "model" "model_trace:6165" "name:Support_Composite_Assign" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 147 0 0# 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 148 0 0# "model" "model_trace:6175" "name:Support_Composite_Compare" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 148 0 0# 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 149 0 0# "model" "model_trace:6185" "name:Support_Long_Shifts" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 149 0 0# 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 150 0 0# "model" "model_trace:6195" "name:Always_Compatible_Rep" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 150 0 0# 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 151 0 0# "model" "model_trace:6205" "name:Suppress_Standard_Library" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 151 0 0# 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 152 0 0# "model" "model_trace:6215" "name:Use_Ada_Main_Program_Name" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 152 0 0# 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 153 0 0# "model" "model_trace:6225" "name:Frontend_Exceptions" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 153 0 0# 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 154 0 0# "model" "model_trace:6235" "name:ZCX_By_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 154 0 0# 
   : int

end

(* Module for axiomatizing type "Tsize_typeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Tsize_typeB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tsize_typeB #"s-parame.ads" 58 0 0# 
 
 function first #"s-parame.ads" 58 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-parame.ads" 58 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-parame.ads" 58 0 0# 
   (x : int)  =
  #"s-parame.ads" 58 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tsize_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tsize_typeB__ref #"s-parame.ads" 58 0 0# =
  { mutable tsize_typeB__content "model_trace:" "name:" : tsize_typeB }
 
 function tsize_typeB__ref___projection #"s-parame.ads" 58 0 0# 
   (a : tsize_typeB__ref) : tsize_typeB =
  a.tsize_typeB__content
 
 meta "model_projection" function tsize_typeB__ref___projection
 
 meta "inline : no" function tsize_typeB__ref___projection
 
 val tsize_typeB__havoc #"s-parame.ads" 58 0 0# 
   (x : tsize_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tsize_typeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__Tsize_typeB__rep
 use        System__parameters__Tsize_typeB
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__parameters__Tsize_typeB.tsize_typeB, 
 predicate in_range = System__parameters__Tsize_typeB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "size_type" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__size_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type size_type #"s-parame.ads" 58 0 0# 
 
 function first #"s-parame.ads" 58 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-parame.ads" 58 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-parame.ads" 58 0 0# 
   (x : int)  =
  #"s-parame.ads" 58 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = size_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type size_type__ref #"s-parame.ads" 58 0 0# =
  { mutable size_type__content "model_trace:" "name:" : size_type }
 
 function size_type__ref___projection #"s-parame.ads" 58 0 0# 
   (a : size_type__ref) : size_type =
  a.size_type__content
 
 meta "model_projection" function size_type__ref___projection
 
 meta "inline : no" function size_type__ref___projection
 
 val size_type__havoc #"s-parame.ads" 58 0 0# 
   (x : size_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "size_type" defined at s-parame.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__size_type__rep
 use        System__parameters__size_type
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__parameters__size_type.size_type, 
 predicate in_range = System__parameters__size_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "unspecified_size" defined at s-parame.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__unspecified_size
 use import "_gnatprove_standard".Main

 function unspecified_size #"s-parame.ads" 67 0 0# "model" "model_trace:10833" "name:Unspecified_Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 58 0 0# 
   : int

end

(* Module for possibly declaring a logic function for "default_stack_size" defined at s-parame.ads:70, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__default_stack_size
 use import "_gnatprove_standard".Main

 function default_stack_size #"s-parame.ads" 70 0 0# 
   (__void_param : unit) : int
 
 predicate default_stack_size__function_guard #"s-parame.ads" 58 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "minimum_stack_size" defined at s-parame.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__minimum_stack_size
 use import "_gnatprove_standard".Main

 function minimum_stack_size #"s-parame.ads" 73 0 0# 
   (__void_param : unit) : int
 
 predicate minimum_stack_size__function_guard #"s-parame.ads" 58 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "size" defined at s-parame.ads:76, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__adjust_storage_size__size
 use import "_gnatprove_standard".Main

 function size #"s-parame.ads" 76 0 0# "model" "model_trace:10872" "name:Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-parame.ads:76, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__parameters__adjust_storage_size__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "adjust_storage_size" defined at s-parame.ads:76, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__parameters__adjust_storage_size
 use import "_gnatprove_standard".Main

 function adjust_storage_size #"s-parame.ads" 76 0 0# 
   (size : int) : int
 
 predicate adjust_storage_size__function_guard #"s-parame.ads" 58 0 0# 
   (result : int) (size : int) 

end

(* Module for defining the constant "default_env_stack_size" defined at s-parame.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__default_env_stack_size
 use import "_gnatprove_standard".Main

 function default_env_stack_size #"s-parame.ads" 85 0 0# "model" "model_trace:10886" "name:Default_Env_Stack_Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 58 0 0# 
   : int

end

(* Module for defining the constant "stack_grows_down" defined at s-parame.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__stack_grows_down
 use import "_gnatprove_standard".Main

 function stack_grows_down #"s-parame.ads" 90 0 0# "model" "model_trace:10896" "name:Stack_Grows_Down" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 90 0 0# 
   : int

end

(* Module for defining the constant "runtime_default_sec_stack_size" defined at s-parame.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__runtime_default_sec_stack_size
 use import "_gnatprove_standard".Main

 function runtime_default_sec_stack_size #"s-parame.ads" 95 0 0# "model" "model_trace:10906" "name:Runtime_Default_Sec_Stack_Size" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 58 0 0# 
   : int

end

(* Module for defining the constant "sec_stack_dynamic" defined at s-parame.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__sec_stack_dynamic
 use import "_gnatprove_standard".Main

 function sec_stack_dynamic #"s-parame.ads" 99 0 0# "model" "model_trace:10918" "name:Sec_Stack_Dynamic" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 99 0 0# 
   : int

end

(* Module for axiomatizing type "c_address" defined at s-parame.ads:113, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__c_address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type c_address #"s-parame.ads" 113 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-parame.ads" 113 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function first #"s-parame.ads" 113 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"s-parame.ads" 113 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"s-parame.ads" 113 0 0# 
   : int =
  0
 
 function last_int #"s-parame.ads" 113 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"s-parame.ads" 113 0 0# 
   (x : BV64.t)  =
  #"s-parame.ads" 113 0 0# ( (BV64.ule first x) /\ (BV64.ule x last) )
 
 predicate in_range_int #"s-parame.ads" 113 0 0# 
   (x : int)  =
  #"s-parame.ads" 113 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt64 with
 type t = c_address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type c_address__ref #"s-parame.ads" 113 0 0# =
  { mutable c_address__content "model_trace:" "name:" : c_address }
 
 function c_address__ref___projection #"s-parame.ads" 113 0 0# 
   (a : c_address__ref) : c_address =
  a.c_address__content
 
 meta "model_projection" function c_address__ref___projection
 
 meta "inline : no" function c_address__ref___projection
 
 val c_address__havoc #"s-parame.ads" 113 0 0# 
   (x : c_address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "c_address" defined at s-parame.ads:113, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__c_address__rep
 use        System__parameters__c_address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV64 with
 type t = System__parameters__c_address.c_address, 
 predicate in_range = System__parameters__c_address.in_range, 
 predicate in_range_int = System__parameters__c_address.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = System__parameters__c_address.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T1s" defined at s-parame.ads:116, created in Gnat2Why.Types.Translate_Type *)
module System__parameters__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-parame.ads" 113 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  13
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "c_malloc_linkname" defined at s-parame.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__c_malloc_linkname
 use import "_gnatprove_standard".Main
 use        Standard__string

 function c_malloc_linkname #"s-parame.ads" 116 0 0# "model_projected" "model_trace:10961" "name:C_Malloc_Linkname" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "garbage_collected" defined at s-parame.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__garbage_collected
 use import "_gnatprove_standard".Main

 function garbage_collected #"s-parame.ads" 139 0 0# "model" "model_trace:10971" "name:Garbage_Collected" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 139 0 0# 
   : int

end

(* Module for defining the constant "single_lock" defined at s-parame.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__single_lock
 use import "_gnatprove_standard".Main

 function single_lock #"s-parame.ads" 154 0 0# "model" "model_trace:10981" "name:Single_Lock" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 154 0 0# 
   : int

end

(* Module for defining the constant "no_abort" defined at s-parame.ads:167, created in Gnat2Why.Decls.Translate_Constant *)
module System__parameters__no_abort
 use import "_gnatprove_standard".Main

 function no_abort #"s-parame.ads" 167 0 0# "model" "model_trace:10991" "name:No_Abort" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"s-parame.ads" 167 0 0# 
   : int

end

(* Module for axiomatizing type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__chars
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type chars #"s-crtl.ads" 41 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 41 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function first #"s-crtl.ads" 41 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"s-crtl.ads" 41 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"s-crtl.ads" 41 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 41 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"s-crtl.ads" 41 0 0# 
   (x : BV64.t)  =
  #"s-crtl.ads" 41 0 0# ( (BV64.ule first x) /\ (BV64.ule x last) )
 
 predicate in_range_int #"s-crtl.ads" 41 0 0# 
   (x : int)  =
  #"s-crtl.ads" 41 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt64 with
 type t = chars, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type chars__ref #"s-crtl.ads" 41 0 0# =
  { mutable chars__content "model_trace:" "name:" : chars }
 
 function chars__ref___projection #"s-crtl.ads" 41 0 0# 
   (a : chars__ref) : chars =
  a.chars__content
 
 meta "model_projection" function chars__ref___projection
 
 meta "inline : no" function chars__ref___projection
 
 val chars__havoc #"s-crtl.ads" 41 0 0# 
   (x : chars__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__chars__rep
 use        System__crtl__chars
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV64 with
 type t = System__crtl__chars.chars, 
 predicate in_range = System__crtl__chars.in_range, 
 predicate in_range_int = System__crtl__chars.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = System__crtl__chars.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__dirs
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type dirs #"s-crtl.ads" 47 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 47 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function first #"s-crtl.ads" 47 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"s-crtl.ads" 47 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"s-crtl.ads" 47 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 47 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"s-crtl.ads" 47 0 0# 
   (x : BV64.t)  =
  #"s-crtl.ads" 47 0 0# ( (BV64.ule first x) /\ (BV64.ule x last) )
 
 predicate in_range_int #"s-crtl.ads" 47 0 0# 
   (x : int)  =
  #"s-crtl.ads" 47 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt64 with
 type t = dirs, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type dirs__ref #"s-crtl.ads" 47 0 0# =
  { mutable dirs__content "model_trace:" "name:" : dirs }
 
 function dirs__ref___projection #"s-crtl.ads" 47 0 0# 
   (a : dirs__ref) : dirs =
  a.dirs__content
 
 meta "model_projection" function dirs__ref___projection
 
 meta "inline : no" function dirs__ref___projection
 
 val dirs__havoc #"s-crtl.ads" 47 0 0# 
   (x : dirs__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__dirs__rep
 use        System__crtl__dirs
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV64 with
 type t = System__crtl__dirs.dirs, 
 predicate in_range = System__crtl__dirs.in_range, 
 predicate in_range_int = System__crtl__dirs.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = System__crtl__dirs.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__files
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type files #"s-crtl.ads" 50 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 50 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function first #"s-crtl.ads" 50 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"s-crtl.ads" 50 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"s-crtl.ads" 50 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 50 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"s-crtl.ads" 50 0 0# 
   (x : BV64.t)  =
  #"s-crtl.ads" 50 0 0# ( (BV64.ule first x) /\ (BV64.ule x last) )
 
 predicate in_range_int #"s-crtl.ads" 50 0 0# 
   (x : int)  =
  #"s-crtl.ads" 50 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt64 with
 type t = files, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type files__ref #"s-crtl.ads" 50 0 0# =
  { mutable files__content "model_trace:" "name:" : files }
 
 function files__ref___projection #"s-crtl.ads" 50 0 0# 
   (a : files__ref) : files =
  a.files__content
 
 meta "model_projection" function files__ref___projection
 
 meta "inline : no" function files__ref___projection
 
 val files__havoc #"s-crtl.ads" 50 0 0# 
   (x : files__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__files__rep
 use        System__crtl__files
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV64 with
 type t = System__crtl__files.files, 
 predicate in_range = System__crtl__files.in_range, 
 predicate in_range_int = System__crtl__files.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = System__crtl__files.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int__ #"s-crtl.ads" 53 0 0# 
 
 function first #"s-crtl.ads" 53 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"s-crtl.ads" 53 0 0# 
   : int =
  2147483647
 
 predicate in_range #"s-crtl.ads" 53 0 0# 
   (x : int)  =
  #"s-crtl.ads" 53 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int____ref #"s-crtl.ads" 53 0 0# =
  { mutable int____content "model_trace:" "name:" : int__ }
 
 function int____ref___projection #"s-crtl.ads" 53 0 0# 
   (a : int____ref) : int__ =
  a.int____content
 
 meta "model_projection" function int____ref___projection
 
 meta "inline : no" function int____ref___projection
 
 val int____havoc #"s-crtl.ads" 53 0 0# 
   (x : int____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int__rep
 use        System__crtl__int
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__int.int__, 
 predicate in_range = System__crtl__int.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__TlongB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tlongB #"s-crtl.ads" 55 0 0# 
 
 function first #"s-crtl.ads" 55 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 55 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 55 0 0# 
   (x : int)  =
  #"s-crtl.ads" 55 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tlongB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tlongB__ref #"s-crtl.ads" 55 0 0# =
  { mutable tlongB__content "model_trace:" "name:" : tlongB }
 
 function tlongB__ref___projection #"s-crtl.ads" 55 0 0# 
   (a : tlongB__ref) : tlongB =
  a.tlongB__content
 
 meta "model_projection" function tlongB__ref___projection
 
 meta "inline : no" function tlongB__ref___projection
 
 val tlongB__havoc #"s-crtl.ads" 55 0 0# 
   (x : tlongB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__TlongB__rep
 use        System__crtl__TlongB
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__TlongB.tlongB, 
 predicate in_range = System__crtl__TlongB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__long
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long #"s-crtl.ads" 55 0 0# 
 
 function first #"s-crtl.ads" 55 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 55 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 55 0 0# 
   (x : int)  =
  #"s-crtl.ads" 55 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long__ref #"s-crtl.ads" 55 0 0# =
  { mutable long__content "model_trace:" "name:" : long }
 
 function long__ref___projection #"s-crtl.ads" 55 0 0# 
   (a : long__ref) : long =
  a.long__content
 
 meta "model_projection" function long__ref___projection
 
 meta "inline : no" function long__ref___projection
 
 val long__havoc #"s-crtl.ads" 55 0 0# 
   (x : long__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__long__rep
 use        System__crtl__long
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__long.long, 
 predicate in_range = System__crtl__long.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__off_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type off_t #"s-crtl.ads" 58 0 0# 
 
 function first #"s-crtl.ads" 58 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 58 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 58 0 0# 
   (x : int)  =
  #"s-crtl.ads" 58 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = off_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type off_t__ref #"s-crtl.ads" 58 0 0# =
  { mutable off_t__content "model_trace:" "name:" : off_t }
 
 function off_t__ref___projection #"s-crtl.ads" 58 0 0# 
   (a : off_t__ref) : off_t =
  a.off_t__content
 
 meta "model_projection" function off_t__ref___projection
 
 meta "inline : no" function off_t__ref___projection
 
 val off_t__havoc #"s-crtl.ads" 58 0 0# 
   (x : off_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__off_t__rep
 use        System__crtl__off_t
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__off_t.off_t, 
 predicate in_range = System__crtl__off_t.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__size_t
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type size_t #"s-crtl.ads" 60 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"s-crtl.ads" 60 0 0# 
   : BV64.t
 
 function first #"s-crtl.ads" 60 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"s-crtl.ads" 60 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"s-crtl.ads" 60 0 0# 
   : int =
  0
 
 function last_int #"s-crtl.ads" 60 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"s-crtl.ads" 60 0 0# 
   (x : BV64.t)  =
  #"s-crtl.ads" 60 0 0# true
 
 predicate in_range_int #"s-crtl.ads" 60 0 0# 
   (x : int)  =
  #"s-crtl.ads" 60 0 0# BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = size_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type size_t__ref #"s-crtl.ads" 60 0 0# =
  { mutable size_t__content "model_trace:" "name:" : size_t }
 
 function size_t__ref___projection #"s-crtl.ads" 60 0 0# 
   (a : size_t__ref) : size_t =
  a.size_t__content
 
 meta "model_projection" function size_t__ref___projection
 
 meta "inline : no" function size_t__ref___projection
 
 val size_t__havoc #"s-crtl.ads" 60 0 0# 
   (x : size_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__size_t__rep
 use        System__crtl__size_t
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__crtl__size_t.size_t, 
 predicate in_range = System__crtl__size_t.in_range, 
 predicate in_range_int = System__crtl__size_t.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tssize_tB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tssize_tB #"s-crtl.ads" 62 0 0# 
 
 function first #"s-crtl.ads" 62 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 62 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 62 0 0# 
   (x : int)  =
  #"s-crtl.ads" 62 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tssize_tB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tssize_tB__ref #"s-crtl.ads" 62 0 0# =
  { mutable tssize_tB__content "model_trace:" "name:" : tssize_tB }
 
 function tssize_tB__ref___projection #"s-crtl.ads" 62 0 0# 
   (a : tssize_tB__ref) : tssize_tB =
  a.tssize_tB__content
 
 meta "model_projection" function tssize_tB__ref___projection
 
 meta "inline : no" function tssize_tB__ref___projection
 
 val tssize_tB__havoc #"s-crtl.ads" 62 0 0# 
   (x : tssize_tB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tssize_tB__rep
 use        System__crtl__Tssize_tB
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__Tssize_tB.tssize_tB, 
 predicate in_range = System__crtl__Tssize_tB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__ssize_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ssize_t #"s-crtl.ads" 62 0 0# 
 
 function first #"s-crtl.ads" 62 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 62 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 62 0 0# 
   (x : int)  =
  #"s-crtl.ads" 62 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ssize_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ssize_t__ref #"s-crtl.ads" 62 0 0# =
  { mutable ssize_t__content "model_trace:" "name:" : ssize_t }
 
 function ssize_t__ref___projection #"s-crtl.ads" 62 0 0# 
   (a : ssize_t__ref) : ssize_t =
  a.ssize_t__content
 
 meta "model_projection" function ssize_t__ref___projection
 
 meta "inline : no" function ssize_t__ref___projection
 
 val ssize_t__havoc #"s-crtl.ads" 62 0 0# 
   (x : ssize_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__ssize_t__rep
 use        System__crtl__ssize_t
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__ssize_t.ssize_t, 
 predicate in_range = System__crtl__ssize_t.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tint64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tint64B #"s-crtl.ads" 65 0 0# 
 
 function first #"s-crtl.ads" 65 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 65 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 65 0 0# 
   (x : int)  =
  #"s-crtl.ads" 65 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tint64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tint64B__ref #"s-crtl.ads" 65 0 0# =
  { mutable tint64B__content "model_trace:" "name:" : tint64B }
 
 function tint64B__ref___projection #"s-crtl.ads" 65 0 0# 
   (a : tint64B__ref) : tint64B =
  a.tint64B__content
 
 meta "model_projection" function tint64B__ref___projection
 
 meta "inline : no" function tint64B__ref___projection
 
 val tint64B__havoc #"s-crtl.ads" 65 0 0# 
   (x : tint64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__Tint64B__rep
 use        System__crtl__Tint64B
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__Tint64B.tint64B, 
 predicate in_range = System__crtl__Tint64B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int64 #"s-crtl.ads" 65 0 0# 
 
 function first #"s-crtl.ads" 65 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"s-crtl.ads" 65 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"s-crtl.ads" 65 0 0# 
   (x : int)  =
  #"s-crtl.ads" 65 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int64__ref #"s-crtl.ads" 65 0 0# =
  { mutable int64__content "model_trace:" "name:" : int64 }
 
 function int64__ref___projection #"s-crtl.ads" 65 0 0# 
   (a : int64__ref) : int64 =
  a.int64__content
 
 meta "model_projection" function int64__ref___projection
 
 meta "inline : no" function int64__ref___projection
 
 val int64__havoc #"s-crtl.ads" 65 0 0# 
   (x : int64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__int64__rep
 use        System__crtl__int64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__int64.int64, 
 predicate in_range = System__crtl__int64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__filename_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type filename_encoding #"s-crtl.ads" 72 0 0# 
 
 function first #"s-crtl.ads" 72 0 0# 
   : int =
  0
 
 function last #"s-crtl.ads" 72 0 0# 
   : int =
  2
 
 predicate in_range #"s-crtl.ads" 72 0 0# 
   (x : int)  =
  #"s-crtl.ads" 72 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = filename_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type filename_encoding__ref #"s-crtl.ads" 72 0 0# =
  { mutable filename_encoding__content "model_trace:" "name:" : filename_encoding }
 
 function filename_encoding__ref___projection #"s-crtl.ads" 72 0 0# 
   (a : filename_encoding__ref) : filename_encoding =
  a.filename_encoding__content
 
 meta "model_projection" function filename_encoding__ref___projection
 
 meta "inline : no" function filename_encoding__ref___projection
 
 val filename_encoding__havoc #"s-crtl.ads" 72 0 0# 
   (x : filename_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Translate_Type *)
module System__crtl__filename_encoding__rep
 use        System__crtl__filename_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__crtl__filename_encoding.filename_encoding, 
 predicate in_range = System__crtl__filename_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "a" defined at s-crtl.ads:85, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strlen__a
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function a #"s-crtl.ads" 85 0 0# "model" "model_trace:9255" "name:A" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at s-crtl.ads:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strlen__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "strlen" defined at s-crtl.ads:85, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__strlen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function strlen #"s-crtl.ads" 85 0 0# 
   (a : BV64.t) : BV64.t
 
 predicate strlen__function_guard #"s-crtl.ads" 60 0 0# 
   (result : BV64.t) (a : BV64.t) 

end

(* Module for defining the constant "dest" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__dest
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function dest #"s-crtl.ads" 88 0 0# "model" "model_trace:9284" "name:dest" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dest" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__dest___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "src" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__src
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function src #"s-crtl.ads" 88 0 0# "model" "model_trace:9291" "name:src" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "src" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__src___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__strncpy__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"s-crtl.ads" 88 0 0# "model" "model_trace:9305" "name:n" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__strncpy__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "a" defined at s-crtl.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__atoi__a
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function a #"s-crtl.ads" 95 0 0# "model" "name:A" "model_trace:9331" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at s-crtl.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__atoi__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "atoi" defined at s-crtl.ads:95, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__atoi
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function atoi #"s-crtl.ads" 95 0 0# 
   (a : BV64.t) : int
 
 predicate atoi__function_guard #"system.ads" 1 0 0# 
   (result : int) (a : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__clearerr__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 98 0 0# "model" "model_trace:9360" "name:stream" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__clearerr__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handle" defined at s-crtl.ads:101, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 101 0 0# "model" "model_trace:9386" "name:handle" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dup" defined at s-crtl.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__dup
 use import "_gnatprove_standard".Main

 function dup #"s-crtl.ads" 101 0 0# 
   (handle : int) : int
 
 predicate dup__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (handle : int) 

end

(* Module for defining the constant "from" defined at s-crtl.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup2__from
 use import "_gnatprove_standard".Main

 function from #"s-crtl.ads" 104 0 0# "model" "model_trace:9413" "name:from" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "from" defined at s-crtl.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup2__from___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at s-crtl.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__dup2__to
 use import "_gnatprove_standard".Main

 function to__ #"s-crtl.ads" 104 0 0# "model" "model_trace:9420" "name:to" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at s-crtl.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__dup2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "dup2" defined at s-crtl.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__dup2
 use import "_gnatprove_standard".Main

 function dup2 #"s-crtl.ads" 104 0 0# 
   (from : int) (to__ : int) : int
 
 predicate dup2__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (from : int) (to__ : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fclose__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 107 0 0# "model" "name:stream" "model_trace:9448" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fclose__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fclose" defined at s-crtl.ads:107, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fclose
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fclose #"s-crtl.ads" 107 0 0# 
   (stream : BV64.t) : int
 
 predicate fclose__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "handle" defined at s-crtl.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fdopen__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 110 0 0# "model" "name:handle" "model_trace:9475" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fdopen__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fdopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 110 0 0# "model" "model_trace:9484" "name:mode" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fdopen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fdopen" defined at s-crtl.ads:110, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fdopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fdopen #"s-crtl.ads" 110 0 0# 
   (handle : int) (mode : BV64.t) : BV64.t
 
 predicate fdopen__function_guard #"s-crtl.ads" 50 0 0# 
   (result : BV64.t) (handle : int) (mode : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fflush__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 113 0 0# "model" "name:stream" "model_trace:9511" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fflush__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fflush" defined at s-crtl.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fflush
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fflush #"s-crtl.ads" 113 0 0# 
   (stream : BV64.t) : int
 
 predicate fflush__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:116, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgetc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 116 0 0# "model" "name:stream" "model_trace:9538" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgetc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fgetc" defined at s-crtl.ads:116, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fgetc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fgetc #"s-crtl.ads" 116 0 0# 
   (stream : BV64.t) : int
 
 predicate fgetc__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "strng" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__strng
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function strng #"s-crtl.ads" 119 0 0# "model" "model_trace:9565" "name:strng" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "strng" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__strng___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__n
 use import "_gnatprove_standard".Main

 function n #"s-crtl.ads" 119 0 0# "model" "name:n" "model_trace:9574" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fgets__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 119 0 0# "model" "name:stream" "model_trace:9583" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fgets__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fgets" defined at s-crtl.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fgets
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fgets #"s-crtl.ads" 119 0 0# 
   (strng : BV64.t) (n : int) (stream : BV64.t) : BV64.t
 
 predicate fgets__function_guard #"s-crtl.ads" 41 0 0# 
   (result : BV64.t) (strng : BV64.t) (n : int) (stream : BV64.t) 

end

(* Module for defining the constant "filename" defined at s-crtl.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 123 0 0# "model" "model_trace:9610" "name:filename" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 124 0 0# "model" "name:mode" "model_trace:9619" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:124, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fopen__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 125 0 0# "model" "model_trace:9628" "name:encoding" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 72 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:125, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fopen__encoding___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fopen" defined at s-crtl.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fopen #"s-crtl.ads" 122 0 0# 
   (filename : BV64.t) (mode : BV64.t) (encoding : int) : BV64.t
 
 predicate fopen__function_guard #"s-crtl.ads" 50 0 0# 
   (result : BV64.t) (filename : BV64.t) (mode : BV64.t) (encoding : int) 

end

(* Module for defining the constant "c" defined at s-crtl.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 128 0 0# "model" "model_trace:9656" "name:C" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputc__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 128 0 0# "model" "name:stream" "model_trace:9665" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:128, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputc" defined at s-crtl.ads:128, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fputc #"s-crtl.ads" 128 0 0# 
   (c : int) (stream : BV64.t) : int
 
 predicate fputc__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (c : int) (stream : BV64.t) 

end

(* Module for defining the constant "c" defined at s-crtl.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputwc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 131 0 0# "model" "name:C" "model_trace:9692" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputwc__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputwc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 131 0 0# "model" "name:stream" "model_trace:9701" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputwc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputwc" defined at s-crtl.ads:131, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputwc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fputwc #"s-crtl.ads" 131 0 0# 
   (c : int) (stream : BV64.t) : int
 
 predicate fputwc__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (c : int) (stream : BV64.t) 

end

(* Module for defining the constant "strng" defined at s-crtl.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputs__strng
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function strng #"s-crtl.ads" 134 0 0# "model" "model_trace:9728" "name:Strng" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "strng" defined at s-crtl.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputs__strng___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fputs__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 134 0 0# "model" "name:Stream" "model_trace:9737" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fputs__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fputs" defined at s-crtl.ads:134, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fputs
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fputs #"s-crtl.ads" 134 0 0# 
   (strng : BV64.t) (stream : BV64.t) : int
 
 predicate fputs__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (strng : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "ptr" defined at s-crtl.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__free__ptr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ptr #"s-crtl.ads" 137 0 0# "model" "model_trace:9764" "name:Ptr" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "ptr" defined at s-crtl.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__free__ptr___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "filename" defined at s-crtl.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 141 0 0# "model" "name:filename" "model_trace:9792" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:141, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 142 0 0# "model" "name:mode" "model_trace:9801" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 143 0 0# "model" "name:stream" "model_trace:9810" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__freopen__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 144 0 0# "model" "name:encoding" "model_trace:9819" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 72 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:144, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__freopen__encoding___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "freopen" defined at s-crtl.ads:140, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__freopen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function freopen #"s-crtl.ads" 140 0 0# 
   (filename : BV64.t) (mode : BV64.t) (stream : BV64.t) (encoding : int) : BV64.t
 
 predicate freopen__function_guard #"s-crtl.ads" 50 0 0# 
   (result : BV64.t) (filename : BV64.t) (mode : BV64.t) (stream : BV64.t) (encoding : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:148, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 148 0 0# "model" "name:stream" "model_trace:9847" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:148, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 149 0 0# "model" "model_trace:9856" "name:offset" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 55 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__offset___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "origin" defined at s-crtl.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek__origin
 use import "_gnatprove_standard".Main

 function origin #"s-crtl.ads" 150 0 0# "model" "model_trace:9865" "name:origin" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "origin" defined at s-crtl.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek__origin___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fseek" defined at s-crtl.ads:147, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fseek
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fseek #"s-crtl.ads" 147 0 0# 
   (stream : BV64.t) (offset : int) (origin : int) : int
 
 predicate fseek__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (stream : BV64.t) (offset : int) (origin : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 154 0 0# "model" "name:stream" "model_trace:9892" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 155 0 0# "model" "name:offset" "model_trace:9901" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 65 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__offset___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "origin" defined at s-crtl.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__fseek64__origin
 use import "_gnatprove_standard".Main

 function origin #"s-crtl.ads" 156 0 0# "model" "name:origin" "model_trace:9910" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "origin" defined at s-crtl.ads:156, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__fseek64__origin___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fseek64" defined at s-crtl.ads:153, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__fseek64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fseek64 #"s-crtl.ads" 153 0 0# 
   (stream : BV64.t) (offset : int) (origin : int) : int
 
 predicate fseek64__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (stream : BV64.t) (offset : int) (origin : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ftell__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 159 0 0# "model" "name:stream" "model_trace:9937" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ftell__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ftell" defined at s-crtl.ads:159, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ftell
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ftell #"s-crtl.ads" 159 0 0# 
   (stream : BV64.t) : int
 
 predicate ftell__function_guard #"s-crtl.ads" 55 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:162, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ftell64__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 162 0 0# "model" "name:stream" "model_trace:9964" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:162, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ftell64__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ftell64" defined at s-crtl.ads:162, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ftell64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ftell64 #"s-crtl.ads" 162 0 0# 
   (stream : BV64.t) : int
 
 predicate ftell64__function_guard #"s-crtl.ads" 65 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "s" defined at s-crtl.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__getenv__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"s-crtl.ads" 165 0 0# "model_projected" "model_trace:9991" "name:S" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at s-crtl.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__getenv__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "getenv" defined at s-crtl.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__getenv
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__string

 function getenv #"s-crtl.ads" 165 0 0# 
   (s : Standard__string.string) : BV64.t
 
 predicate getenv__function_guard #"system.ads" 116 0 0# 
   (result : BV64.t) (s : Standard__string.string) 

end

(* Module for defining the constant "handle" defined at s-crtl.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__isatty__handle
 use import "_gnatprove_standard".Main

 function handle #"s-crtl.ads" 168 0 0# "model" "name:handle" "model_trace:10020" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at s-crtl.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__isatty__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "isatty" defined at s-crtl.ads:168, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__isatty
 use import "_gnatprove_standard".Main

 function isatty #"s-crtl.ads" 168 0 0# 
   (handle : int) : int
 
 predicate isatty__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (handle : int) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 171 0 0# "model" "model_trace:10047" "name:fd" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "offset" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__offset
 use import "_gnatprove_standard".Main

 function offset #"s-crtl.ads" 171 0 0# "model" "name:offset" "model_trace:10056" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "offset" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__offset___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "direction" defined at s-crtl.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__lseek__direction
 use import "_gnatprove_standard".Main

 function direction #"s-crtl.ads" 171 0 0# "model" "model_trace:10065" "name:direction" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "direction" defined at s-crtl.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__lseek__direction___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lseek" defined at s-crtl.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__lseek
 use import "_gnatprove_standard".Main

 function lseek #"s-crtl.ads" 171 0 0# 
   (fd : int) (offset : int) (direction : int) : int
 
 predicate lseek__function_guard #"s-crtl.ads" 58 0 0# 
   (result : int) (fd : int) (offset : int) (direction : int) 

end

(* Module for defining the constant "size" defined at s-crtl.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__malloc__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"s-crtl.ads" 174 0 0# "model" "name:Size" "model_trace:10092" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__malloc__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "malloc" defined at s-crtl.ads:174, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__malloc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function malloc #"s-crtl.ads" 174 0 0# 
   (size : BV64.t) : BV64.t
 
 predicate malloc__function_guard #"system.ads" 116 0 0# 
   (result : BV64.t) (size : BV64.t) 

end

(* Module for defining the constant "s1" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__s1
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s1 #"s-crtl.ads" 177 0 0# "model" "model_trace:10121" "name:S1" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__s1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__s2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s2 #"s-crtl.ads" 177 0 0# "model" "model_trace:10132" "name:S2" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__s2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memcpy__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"s-crtl.ads" 177 0 0# "model" "model_trace:10143" "name:N" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memcpy__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s1" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__s1
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s1 #"s-crtl.ads" 180 0 0# "model" "name:S1" "model_trace:10169" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s1" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__s1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "s2" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__s2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function s2 #"s-crtl.ads" 180 0 0# "model" "name:S2" "model_trace:10180" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s2" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__s2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "n" defined at s-crtl.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__memmove__n
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function n #"s-crtl.ads" 180 0 0# "model" "name:N" "model_trace:10191" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at s-crtl.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__memmove__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "template" defined at s-crtl.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mktemp__template
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function template #"s-crtl.ads" 183 0 0# "model" "model_trace:10217" "name:template" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "template" defined at s-crtl.ads:183, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mktemp__template___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__pclose__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 186 0 0# "model" "name:stream" "model_trace:10243" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__pclose__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "pclose" defined at s-crtl.ads:186, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__pclose
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function pclose #"s-crtl.ads" 186 0 0# 
   (stream : BV64.t) : int
 
 predicate pclose__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "command" defined at s-crtl.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__popen__command
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function command #"s-crtl.ads" 189 0 0# "model" "model_trace:10272" "name:command" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "command" defined at s-crtl.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__popen__command___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__popen__mode
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function mode #"s-crtl.ads" 189 0 0# "model" "name:mode" "model_trace:10279" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__popen__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "popen" defined at s-crtl.ads:189, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__popen
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function popen #"s-crtl.ads" 189 0 0# 
   (command : BV64.t) (mode : BV64.t) : BV64.t
 
 predicate popen__function_guard #"system.ads" 116 0 0# 
   (result : BV64.t) (command : BV64.t) (mode : BV64.t) 

end

(* Module for defining the constant "ptr" defined at s-crtl.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__realloc__ptr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ptr #"s-crtl.ads" 193 0 0# "model" "name:Ptr" "model_trace:10313" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 116 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "ptr" defined at s-crtl.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__realloc__ptr___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at s-crtl.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__realloc__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"s-crtl.ads" 193 0 0# "model" "name:Size" "model_trace:10324" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:193, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__realloc__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "realloc" defined at s-crtl.ads:192, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__realloc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function realloc #"s-crtl.ads" 192 0 0# 
   (ptr : BV64.t) (size : BV64.t) : BV64.t
 
 predicate realloc__function_guard #"system.ads" 116 0 0# 
   (result : BV64.t) (ptr : BV64.t) (size : BV64.t) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:196, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__rewind__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 196 0 0# "model" "name:stream" "model_trace:10353" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:196, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__rewind__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:199, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__rmdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 199 0 0# "model_projected" "model_trace:10379" "name:dir_name" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:199, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__rmdir__dir_name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "rmdir" defined at s-crtl.ads:199, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__rmdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function rmdir #"s-crtl.ads" 199 0 0# 
   (dir_name : Standard__string.string) : int
 
 predicate rmdir__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (dir_name : Standard__string.string) 

end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:202, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__chdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 202 0 0# "model_projected" "name:dir_name" "model_trace:10406" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:202, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__chdir__dir_name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "chdir" defined at s-crtl.ads:202, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__chdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function chdir #"s-crtl.ads" 202 0 0# 
   (dir_name : Standard__string.string) : int
 
 predicate chdir__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (dir_name : Standard__string.string) 

end

(* Module for defining the constant "dir_name" defined at s-crtl.ads:206, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mkdir__dir_name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function dir_name #"s-crtl.ads" 206 0 0# "model_projected" "name:dir_name" "model_trace:10433" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "dir_name" defined at s-crtl.ads:206, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mkdir__dir_name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "encoding" defined at s-crtl.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__mkdir__encoding
 use import "_gnatprove_standard".Main

 function encoding #"s-crtl.ads" 207 0 0# "model" "name:encoding" "model_trace:10442" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 72 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "encoding" defined at s-crtl.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__mkdir__encoding___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mkdir" defined at s-crtl.ads:205, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__mkdir
 use import "_gnatprove_standard".Main
 use        Standard__string

 function mkdir #"s-crtl.ads" 205 0 0# 
   (dir_name : Standard__string.string) (encoding : int) : int
 
 predicate mkdir__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (dir_name : Standard__string.string) (encoding : int) 

end

(* Module for defining the constant "stream" defined at s-crtl.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 211 0 0# "model" "name:stream" "model_trace:10470" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:211, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"s-crtl.ads" 212 0 0# "model" "model_trace:10479" "name:buffer" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at s-crtl.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__mode
 use import "_gnatprove_standard".Main

 function mode #"s-crtl.ads" 213 0 0# "model" "name:mode" "model_trace:10488" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at s-crtl.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at s-crtl.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__setvbuf__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"s-crtl.ads" 214 0 0# "model" "model_trace:10497" "name:size" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at s-crtl.ads:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__setvbuf__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setvbuf" defined at s-crtl.ads:210, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__setvbuf
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function setvbuf #"s-crtl.ads" 210 0 0# 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
 
 predicate setvbuf__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) 

end

(* Module for defining the constant "str" defined at s-crtl.ads:217, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__tmpnam__str
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function str #"s-crtl.ads" 217 0 0# "model" "model_trace:10524" "name:str" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at s-crtl.ads:217, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__tmpnam__str___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tmpfile" defined at s-crtl.ads:220, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__tmpfile
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function tmpfile #"s-crtl.ads" 220 0 0# 
   (__void_param : unit) : BV64.t
 
 predicate tmpfile__function_guard #"s-crtl.ads" 50 0 0# 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for defining the constant "c" defined at s-crtl.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ungetc__c
 use import "_gnatprove_standard".Main

 function c #"s-crtl.ads" 223 0 0# "model" "model_trace:10568" "name:c" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-crtl.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ungetc__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at s-crtl.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__ungetc__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"s-crtl.ads" 223 0 0# "model" "name:stream" "model_trace:10577" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at s-crtl.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__ungetc__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ungetc" defined at s-crtl.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__ungetc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ungetc #"s-crtl.ads" 223 0 0# 
   (c : int) (stream : BV64.t) : int
 
 predicate ungetc__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (c : int) (stream : BV64.t) 

end

(* Module for defining the constant "filename" defined at s-crtl.ads:226, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__unlink__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 226 0 0# "model" "name:filename" "model_trace:10604" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:226, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__unlink__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unlink" defined at s-crtl.ads:226, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__unlink
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function unlink #"s-crtl.ads" 226 0 0# 
   (filename : BV64.t) : int
 
 predicate unlink__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (filename : BV64.t) 

end

(* Module for defining the constant "filename" defined at s-crtl.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__open__filename
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function filename #"s-crtl.ads" 229 0 0# "model" "name:filename" "model_trace:10631" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "filename" defined at s-crtl.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__open__filename___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "oflag" defined at s-crtl.ads:229, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__open__oflag
 use import "_gnatprove_standard".Main

 function oflag #"s-crtl.ads" 229 0 0# "model" "model_trace:10640" "name:oflag" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "oflag" defined at s-crtl.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__open__oflag___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "open" defined at s-crtl.ads:229, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__open
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function open #"s-crtl.ads" 229 0 0# 
   (filename : BV64.t) (oflag : int) : int
 
 predicate open__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (filename : BV64.t) (oflag : int) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:232, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__close__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 232 0 0# "model" "name:fd" "model_trace:10667" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:232, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__close__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "close" defined at s-crtl.ads:232, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__close
 use import "_gnatprove_standard".Main

 function close #"s-crtl.ads" 232 0 0# 
   (fd : int) : int
 
 predicate close__function_guard #"s-crtl.ads" 53 0 0# 
   (result : int) (fd : int) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 235 0 0# "model" "name:fd" "model_trace:10694" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"s-crtl.ads" 235 0 0# "model" "name:buffer" "model_trace:10703" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at s-crtl.ads:235, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__read__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"s-crtl.ads" 235 0 0# "model" "model_trace:10712" "name:count" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at s-crtl.ads:235, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__read__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "read" defined at s-crtl.ads:235, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__read
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function read #"s-crtl.ads" 235 0 0# 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
 
 predicate read__function_guard #"s-crtl.ads" 62 0 0# 
   (result : int) (fd : int) (buffer : BV64.t) (count : BV64.t) 

end

(* Module for defining the constant "fd" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__fd
 use import "_gnatprove_standard".Main

 function fd #"s-crtl.ads" 238 0 0# "model" "name:fd" "model_trace:10739" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fd" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__fd___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"s-crtl.ads" 238 0 0# "model" "name:buffer" "model_trace:10748" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at s-crtl.ads:238, created in Gnat2Why.Decls.Translate_Constant *)
module System__crtl__write__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"s-crtl.ads" 238 0 0# "model" "name:count" "model_trace:10757" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"s-crtl.ads" 60 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at s-crtl.ads:238, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__crtl__write__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "write" defined at s-crtl.ads:238, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__write
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function write #"s-crtl.ads" 238 0 0# 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
 
 predicate write__function_guard #"s-crtl.ads" 62 0 0# 
   (result : int) (fd : int) (buffer : BV64.t) (count : BV64.t) 

end

(* Module for axiomatizing type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_8B #"interfac.ads" 46 0 0# 
 
 function first #"interfac.ads" 46 0 0# 
   : int =
  ( -128 )
 
 function last #"interfac.ads" 46 0 0# 
   : int =
  127
 
 predicate in_range #"interfac.ads" 46 0 0# 
   (x : int)  =
  #"interfac.ads" 46 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_8B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_8B__ref #"interfac.ads" 46 0 0# =
  { mutable tinteger_8B__content "model_trace:" "name:" : tinteger_8B }
 
 function tinteger_8B__ref___projection #"interfac.ads" 46 0 0# 
   (a : tinteger_8B__ref) : tinteger_8B =
  a.tinteger_8B__content
 
 meta "model_projection" function tinteger_8B__ref___projection
 
 meta "inline : no" function tinteger_8B__ref___projection
 
 val tinteger_8B__havoc #"interfac.ads" 46 0 0# 
   (x : tinteger_8B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_8B__rep
 use        Interfaces__Tinteger_8B
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_8B.tinteger_8B, 
 predicate in_range = Interfaces__Tinteger_8B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 #"interfac.ads" 46 0 0# 
 
 function first #"interfac.ads" 46 0 0# 
   : int =
  ( -128 )
 
 function last #"interfac.ads" 46 0 0# 
   : int =
  127
 
 predicate in_range #"interfac.ads" 46 0 0# 
   (x : int)  =
  #"interfac.ads" 46 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref #"interfac.ads" 46 0 0# =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___2__projection #"interfac.ads" 46 0 0# 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___2__projection
 
 meta "inline : no" function integer_8__ref___2__projection
 
 val integer_8__havoc #"interfac.ads" 46 0 0# 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_8__rep
 use        Interfaces__integer_8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_8.integer_8, 
 predicate in_range = Interfaces__integer_8.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_16B #"interfac.ads" 49 0 0# 
 
 function first #"interfac.ads" 49 0 0# 
   : int =
  ( -32768 )
 
 function last #"interfac.ads" 49 0 0# 
   : int =
  32767
 
 predicate in_range #"interfac.ads" 49 0 0# 
   (x : int)  =
  #"interfac.ads" 49 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_16B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_16B__ref #"interfac.ads" 49 0 0# =
  { mutable tinteger_16B__content "model_trace:" "name:" : tinteger_16B }
 
 function tinteger_16B__ref___projection #"interfac.ads" 49 0 0# 
   (a : tinteger_16B__ref) : tinteger_16B =
  a.tinteger_16B__content
 
 meta "model_projection" function tinteger_16B__ref___projection
 
 meta "inline : no" function tinteger_16B__ref___projection
 
 val tinteger_16B__havoc #"interfac.ads" 49 0 0# 
   (x : tinteger_16B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_16B__rep
 use        Interfaces__Tinteger_16B
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_16B.tinteger_16B, 
 predicate in_range = Interfaces__Tinteger_16B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 #"interfac.ads" 49 0 0# 
 
 function first #"interfac.ads" 49 0 0# 
   : int =
  ( -32768 )
 
 function last #"interfac.ads" 49 0 0# 
   : int =
  32767
 
 predicate in_range #"interfac.ads" 49 0 0# 
   (x : int)  =
  #"interfac.ads" 49 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref #"interfac.ads" 49 0 0# =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___2__projection #"interfac.ads" 49 0 0# 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___2__projection
 
 meta "inline : no" function integer_16__ref___2__projection
 
 val integer_16__havoc #"interfac.ads" 49 0 0# 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_16__rep
 use        Interfaces__integer_16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_16.integer_16, 
 predicate in_range = Interfaces__integer_16.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_32B #"interfac.ads" 52 0 0# 
 
 function first #"interfac.ads" 52 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"interfac.ads" 52 0 0# 
   : int =
  2147483647
 
 predicate in_range #"interfac.ads" 52 0 0# 
   (x : int)  =
  #"interfac.ads" 52 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_32B__ref #"interfac.ads" 52 0 0# =
  { mutable tinteger_32B__content "model_trace:" "name:" : tinteger_32B }
 
 function tinteger_32B__ref___projection #"interfac.ads" 52 0 0# 
   (a : tinteger_32B__ref) : tinteger_32B =
  a.tinteger_32B__content
 
 meta "model_projection" function tinteger_32B__ref___projection
 
 meta "inline : no" function tinteger_32B__ref___projection
 
 val tinteger_32B__havoc #"interfac.ads" 52 0 0# 
   (x : tinteger_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_32B__rep
 use        Interfaces__Tinteger_32B
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_32B.tinteger_32B, 
 predicate in_range = Interfaces__Tinteger_32B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 #"interfac.ads" 52 0 0# 
 
 function first #"interfac.ads" 52 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"interfac.ads" 52 0 0# 
   : int =
  2147483647
 
 predicate in_range #"interfac.ads" 52 0 0# 
   (x : int)  =
  #"interfac.ads" 52 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref #"interfac.ads" 52 0 0# =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___2__projection #"interfac.ads" 52 0 0# 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___2__projection
 
 meta "inline : no" function integer_32__ref___2__projection
 
 val integer_32__havoc #"interfac.ads" 52 0 0# 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_32__rep
 use        Interfaces__integer_32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_32.integer_32, 
 predicate in_range = Interfaces__integer_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tinteger_64B #"interfac.ads" 55 0 0# 
 
 function first #"interfac.ads" 55 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"interfac.ads" 55 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"interfac.ads" 55 0 0# 
   (x : int)  =
  #"interfac.ads" 55 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tinteger_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tinteger_64B__ref #"interfac.ads" 55 0 0# =
  { mutable tinteger_64B__content "model_trace:" "name:" : tinteger_64B }
 
 function tinteger_64B__ref___projection #"interfac.ads" 55 0 0# 
   (a : tinteger_64B__ref) : tinteger_64B =
  a.tinteger_64B__content
 
 meta "model_projection" function tinteger_64B__ref___projection
 
 meta "inline : no" function tinteger_64B__ref___projection
 
 val tinteger_64B__havoc #"interfac.ads" 55 0 0# 
   (x : tinteger_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tinteger_64B__rep
 use        Interfaces__Tinteger_64B
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__Tinteger_64B.tinteger_64B, 
 predicate in_range = Interfaces__Tinteger_64B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 #"interfac.ads" 55 0 0# 
 
 function first #"interfac.ads" 55 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"interfac.ads" 55 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"interfac.ads" 55 0 0# 
   (x : int)  =
  #"interfac.ads" 55 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref #"interfac.ads" 55 0 0# =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___2__projection #"interfac.ads" 55 0 0# 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___2__projection
 
 meta "inline : no" function integer_64__ref___2__projection
 
 val integer_64__havoc #"interfac.ads" 55 0 0# 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__integer_64__rep
 use        Interfaces__integer_64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__integer_64.integer_64, 
 predicate in_range = Interfaces__integer_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV8

 type unsigned_8 #"interfac.ads" 63 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 63 0 0# 
   : BV8.t
 
 function first #"interfac.ads" 63 0 0# 
   : BV8.t =
  ( BV8.of_int 0 )
 
 function last #"interfac.ads" 63 0 0# 
   : BV8.t =
  ( BV8.of_int 255 )
 
 function first_int #"interfac.ads" 63 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 63 0 0# 
   : int =
  255
 
 predicate in_range #"interfac.ads" 63 0 0# 
   (x : BV8.t)  =
  #"interfac.ads" 63 0 0# true
 
 predicate in_range_int #"interfac.ads" 63 0 0# 
   (x : int)  =
  #"interfac.ads" 63 0 0# BV8.uint_in_range x
 
 clone export "ada__model".Static_Modular_8 with
 type t = unsigned_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_8__ref #"interfac.ads" 63 0 0# =
  { mutable unsigned_8__content "model_trace:" "name:" : unsigned_8 }
 
 function unsigned_8__ref___projection #"interfac.ads" 63 0 0# 
   (a : unsigned_8__ref) : unsigned_8 =
  a.unsigned_8__content
 
 meta "model_projection" function unsigned_8__ref___projection
 
 meta "inline : no" function unsigned_8__ref___projection
 
 val unsigned_8__havoc #"interfac.ads" 63 0 0# 
   (x : unsigned_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_8__rep
 use        Interfaces__unsigned_8
 use        "_gnatprove_standard".BV8
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV8 with
 type t = Interfaces__unsigned_8.unsigned_8, 
 predicate in_range = Interfaces__unsigned_8.in_range, 
 predicate in_range_int = Interfaces__unsigned_8.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV16

 type unsigned_16 #"interfac.ads" 66 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 66 0 0# 
   : BV16.t
 
 function first #"interfac.ads" 66 0 0# 
   : BV16.t =
  ( BV16.of_int 0 )
 
 function last #"interfac.ads" 66 0 0# 
   : BV16.t =
  ( BV16.of_int 65535 )
 
 function first_int #"interfac.ads" 66 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 66 0 0# 
   : int =
  65535
 
 predicate in_range #"interfac.ads" 66 0 0# 
   (x : BV16.t)  =
  #"interfac.ads" 66 0 0# true
 
 predicate in_range_int #"interfac.ads" 66 0 0# 
   (x : int)  =
  #"interfac.ads" 66 0 0# BV16.uint_in_range x
 
 clone export "ada__model".Static_Modular_16 with
 type t = unsigned_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_16__ref #"interfac.ads" 66 0 0# =
  { mutable unsigned_16__content "model_trace:" "name:" : unsigned_16 }
 
 function unsigned_16__ref___projection #"interfac.ads" 66 0 0# 
   (a : unsigned_16__ref) : unsigned_16 =
  a.unsigned_16__content
 
 meta "model_projection" function unsigned_16__ref___projection
 
 meta "inline : no" function unsigned_16__ref___projection
 
 val unsigned_16__havoc #"interfac.ads" 66 0 0# 
   (x : unsigned_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_16__rep
 use        Interfaces__unsigned_16
 use        "_gnatprove_standard".BV16
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV16 with
 type t = Interfaces__unsigned_16.unsigned_16, 
 predicate in_range = Interfaces__unsigned_16.in_range, 
 predicate in_range_int = Interfaces__unsigned_16.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_24 #"interfac.ads" 69 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 69 0 0# 
   : BV32.t =
  ( BV32.of_int 16777216 )
 
 function first #"interfac.ads" 69 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"interfac.ads" 69 0 0# 
   : BV32.t =
  ( BV32.of_int 16777215 )
 
 function first_int #"interfac.ads" 69 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 69 0 0# 
   : int =
  16777215
 
 predicate in_range #"interfac.ads" 69 0 0# 
   (x : BV32.t)  =
  #"interfac.ads" 69 0 0# ( (BV32.ule first x) /\ (BV32.ule x last) )
 
 predicate in_range_int #"interfac.ads" 69 0 0# 
   (x : int)  =
  #"interfac.ads" 69 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt32 with
 type t = unsigned_24, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type unsigned_24__ref #"interfac.ads" 69 0 0# =
  { mutable unsigned_24__content "model_trace:" "name:" : unsigned_24 }
 
 function unsigned_24__ref___projection #"interfac.ads" 69 0 0# 
   (a : unsigned_24__ref) : unsigned_24 =
  a.unsigned_24__content
 
 meta "model_projection" function unsigned_24__ref___projection
 
 meta "inline : no" function unsigned_24__ref___projection
 
 val unsigned_24__havoc #"interfac.ads" 69 0 0# 
   (x : unsigned_24__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_24__rep
 use        Interfaces__unsigned_24
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV32 with
 type t = Interfaces__unsigned_24.unsigned_24, 
 predicate in_range = Interfaces__unsigned_24.in_range, 
 predicate in_range_int = Interfaces__unsigned_24.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = Interfaces__unsigned_24.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV32

 type unsigned_32 #"interfac.ads" 74 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 74 0 0# 
   : BV32.t
 
 function first #"interfac.ads" 74 0 0# 
   : BV32.t =
  ( BV32.of_int 0 )
 
 function last #"interfac.ads" 74 0 0# 
   : BV32.t =
  ( BV32.of_int 4294967295 )
 
 function first_int #"interfac.ads" 74 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 74 0 0# 
   : int =
  4294967295
 
 predicate in_range #"interfac.ads" 74 0 0# 
   (x : BV32.t)  =
  #"interfac.ads" 74 0 0# true
 
 predicate in_range_int #"interfac.ads" 74 0 0# 
   (x : int)  =
  #"interfac.ads" 74 0 0# BV32.uint_in_range x
 
 clone export "ada__model".Static_Modular_32 with
 type t = unsigned_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_32__ref #"interfac.ads" 74 0 0# =
  { mutable unsigned_32__content "model_trace:" "name:" : unsigned_32 }
 
 function unsigned_32__ref___projection #"interfac.ads" 74 0 0# 
   (a : unsigned_32__ref) : unsigned_32 =
  a.unsigned_32__content
 
 meta "model_projection" function unsigned_32__ref___projection
 
 meta "inline : no" function unsigned_32__ref___projection
 
 val unsigned_32__havoc #"interfac.ads" 74 0 0# 
   (x : unsigned_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_32__rep
 use        Interfaces__unsigned_32
 use        "_gnatprove_standard".BV32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV32 with
 type t = Interfaces__unsigned_32.unsigned_32, 
 predicate in_range = Interfaces__unsigned_32.in_range, 
 predicate in_range_int = Interfaces__unsigned_32.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type unsigned_64 #"interfac.ads" 77 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"interfac.ads" 77 0 0# 
   : BV64.t
 
 function first #"interfac.ads" 77 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"interfac.ads" 77 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"interfac.ads" 77 0 0# 
   : int =
  0
 
 function last_int #"interfac.ads" 77 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"interfac.ads" 77 0 0# 
   (x : BV64.t)  =
  #"interfac.ads" 77 0 0# true
 
 predicate in_range_int #"interfac.ads" 77 0 0# 
   (x : int)  =
  #"interfac.ads" 77 0 0# BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = unsigned_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type unsigned_64__ref #"interfac.ads" 77 0 0# =
  { mutable unsigned_64__content "model_trace:" "name:" : unsigned_64 }
 
 function unsigned_64__ref___projection #"interfac.ads" 77 0 0# 
   (a : unsigned_64__ref) : unsigned_64 =
  a.unsigned_64__content
 
 meta "model_projection" function unsigned_64__ref___projection
 
 meta "inline : no" function unsigned_64__ref___projection
 
 val unsigned_64__havoc #"interfac.ads" 77 0 0# 
   (x : unsigned_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__unsigned_64__rep
 use        Interfaces__unsigned_64
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__unsigned_64.unsigned_64, 
 predicate in_range = Interfaces__unsigned_64.in_range, 
 predicate in_range_int = Interfaces__unsigned_64.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "value" defined at interfac.ads:82, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 82 0 0# "model" "model_trace:6820" "name:Value" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:82, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:83, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 83 0 0# "model" "model_trace:6829" "name:Amount" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:83, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:86, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 86 0 0# "model" "name:Value" "model_trace:6848" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:86, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:87, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 87 0 0# "model" "name:Amount" "model_trace:6857" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 90 0 0# "model" "name:Value" "model_trace:6876" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:91, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 91 0 0# "model" "name:Amount" "model_trace:6885" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:91, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 94 0 0# "model" "name:Value" "model_trace:6904" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 95 0 0# "model" "name:Amount" "model_trace:6913" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8

 function value #"interfac.ads" 98 0 0# "model" "name:Value" "model_trace:6932" 
   : BV8.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 63 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:99, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 99 0 0# "model" "name:Amount" "model_trace:6941" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:102, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 102 0 0# "model" "name:Value" "model_trace:6960" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:102, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 103 0 0# "model" "name:Amount" "model_trace:6969" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 106 0 0# "model" "name:Value" "model_trace:6988" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 107 0 0# "model" "name:Amount" "model_trace:6997" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:110, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 110 0 0# "model" "name:Value" "model_trace:7016" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:111, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 111 0 0# "model" "name:Amount" "model_trace:7025" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:111, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 114 0 0# "model" "name:Value" "model_trace:7044" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 115 0 0# "model" "name:Amount" "model_trace:7053" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:118, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16

 function value #"interfac.ads" 118 0 0# "model" "name:Value" "model_trace:7072" 
   : BV16.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 66 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:118, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:119, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__2__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 119 0 0# "model" "name:Amount" "model_trace:7081" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:119, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__2__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 122 0 0# "model" "name:Value" "model_trace:7100" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:122, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 123 0 0# "model" "name:Amount" "model_trace:7109" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:123, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 126 0 0# "model" "name:Value" "model_trace:7128" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:126, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 127 0 0# "model" "name:Amount" "model_trace:7137" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:127, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 130 0 0# "model" "name:Value" "model_trace:7156" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 131 0 0# "model" "name:Amount" "model_trace:7165" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 134 0 0# "model" "name:Value" "model_trace:7184" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:134, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 135 0 0# "model" "name:Amount" "model_trace:7193" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32

 function value #"interfac.ads" 138 0 0# "model" "name:Value" "model_trace:7212" 
   : BV32.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 74 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__3__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 139 0 0# "model" "name:Amount" "model_trace:7221" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__3__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 142 0 0# "model" "name:Value" "model_trace:7240" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 143 0 0# "model" "name:Amount" "model_trace:7249" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:143, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 146 0 0# "model" "name:Value" "model_trace:7268" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:146, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:147, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 147 0 0# "model" "name:Amount" "model_trace:7277" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:147, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 150 0 0# "model" "name:Value" "model_trace:7296" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:151, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__shift_right_arithmetic__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 151 0 0# "model" "name:Amount" "model_trace:7305" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:151, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__shift_right_arithmetic__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:154, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 154 0 0# "model" "name:Value" "model_trace:7324" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:154, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_left__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 155 0 0# "model" "name:Amount" "model_trace:7333" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_left__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "value" defined at interfac.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__value
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function value #"interfac.ads" 158 0 0# "model" "name:Value" "model_trace:7352" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"interfac.ads" 77 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "value" defined at interfac.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__value___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "amount" defined at interfac.ads:159, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__rotate_right__4__amount
 use import "_gnatprove_standard".Main

 function amount #"interfac.ads" 159 0 0# "model" "name:Amount" "model_trace:7361" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "amount" defined at interfac.ads:159, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__rotate_right__4__amount___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tieee_float_32B #"interfac.ads" 169 0 0# 
 
 function first #"interfac.ads" 169 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"interfac.ads" 169 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"interfac.ads" 169 0 0# 
   (x : Float32.t)  =
  #"interfac.ads" 169 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = tieee_float_32B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_32B__ref #"interfac.ads" 169 0 0# =
  { mutable tieee_float_32B__content "model_trace:" "name:" : tieee_float_32B }
 
 function tieee_float_32B__ref___projection #"interfac.ads" 169 0 0# 
   (a : tieee_float_32B__ref) : tieee_float_32B =
  a.tieee_float_32B__content
 
 meta "model_projection" function tieee_float_32B__ref___projection
 
 meta "inline : no" function tieee_float_32B__ref___projection
 
 val tieee_float_32B__havoc #"interfac.ads" 169 0 0# 
   (x : tieee_float_32B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_32B__rep
 use        Interfaces__Tieee_float_32B
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__Tieee_float_32B.tieee_float_32B, 
 predicate in_range = Interfaces__Tieee_float_32B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type ieee_float_32 #"interfac.ads" 169 0 0# 
 
 function first #"interfac.ads" 169 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"interfac.ads" 169 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"interfac.ads" 169 0 0# 
   (x : Float32.t)  =
  #"interfac.ads" 169 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = ieee_float_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_32__ref #"interfac.ads" 169 0 0# =
  { mutable ieee_float_32__content "model_trace:" "name:" : ieee_float_32 }
 
 function ieee_float_32__ref___projection #"interfac.ads" 169 0 0# 
   (a : ieee_float_32__ref) : ieee_float_32 =
  a.ieee_float_32__content
 
 meta "model_projection" function ieee_float_32__ref___projection
 
 meta "inline : no" function ieee_float_32__ref___projection
 
 val ieee_float_32__havoc #"interfac.ads" 169 0 0# 
   (x : ieee_float_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_32__rep
 use        Interfaces__ieee_float_32
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Interfaces__ieee_float_32.ieee_float_32, 
 predicate in_range = Interfaces__ieee_float_32.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type tieee_float_64B #"interfac.ads" 172 0 0# 
 
 function first #"interfac.ads" 172 0 0# 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last #"interfac.ads" 172 0 0# 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range #"interfac.ads" 172 0 0# 
   (x : Float64.t)  =
  #"interfac.ads" 172 0 0# (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = tieee_float_64B, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tieee_float_64B__ref #"interfac.ads" 172 0 0# =
  { mutable tieee_float_64B__content "model_trace:" "name:" : tieee_float_64B }
 
 function tieee_float_64B__ref___projection #"interfac.ads" 172 0 0# 
   (a : tieee_float_64B__ref) : tieee_float_64B =
  a.tieee_float_64B__content
 
 meta "model_projection" function tieee_float_64B__ref___projection
 
 meta "inline : no" function tieee_float_64B__ref___projection
 
 val tieee_float_64B__havoc #"interfac.ads" 172 0 0# 
   (x : tieee_float_64B__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__Tieee_float_64B__rep
 use        Interfaces__Tieee_float_64B
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__Tieee_float_64B.tieee_float_64B, 
 predicate in_range = Interfaces__Tieee_float_64B.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type ieee_float_64 #"interfac.ads" 172 0 0# 
 
 function first #"interfac.ads" 172 0 0# 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last #"interfac.ads" 172 0 0# 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range #"interfac.ads" 172 0 0# 
   (x : Float64.t)  =
  #"interfac.ads" 172 0 0# (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = ieee_float_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ieee_float_64__ref #"interfac.ads" 172 0 0# =
  { mutable ieee_float_64__content "model_trace:" "name:" : ieee_float_64 }
 
 function ieee_float_64__ref___projection #"interfac.ads" 172 0 0# 
   (a : ieee_float_64__ref) : ieee_float_64 =
  a.ieee_float_64__content
 
 meta "model_projection" function ieee_float_64__ref___projection
 
 meta "inline : no" function ieee_float_64__ref___projection
 
 val ieee_float_64__havoc #"interfac.ads" 172 0 0# 
   (x : ieee_float_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__ieee_float_64__rep
 use        Interfaces__ieee_float_64
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Interfaces__ieee_float_64.ieee_float_64, 
 predicate in_range = Interfaces__ieee_float_64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__chars
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type chars #"i-cstrea.ads" 40 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 40 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function first #"i-cstrea.ads" 40 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"i-cstrea.ads" 40 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"i-cstrea.ads" 40 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 40 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"i-cstrea.ads" 40 0 0# 
   (x : BV64.t)  =
  #"i-cstrea.ads" 40 0 0# ( (BV64.ule first x) /\ (BV64.ule x last) )
 
 predicate in_range_int #"i-cstrea.ads" 40 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 40 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt64 with
 type t = chars, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type chars__ref #"i-cstrea.ads" 40 0 0# =
  { mutable chars__content "model_trace:" "name:" : chars }
 
 function chars__ref___2__projection #"i-cstrea.ads" 40 0 0# 
   (a : chars__ref) : chars =
  a.chars__content
 
 meta "model_projection" function chars__ref___2__projection
 
 meta "inline : no" function chars__ref___2__projection
 
 val chars__havoc #"i-cstrea.ads" 40 0 0# 
   (x : chars__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__chars__rep
 use        Interfaces__c_streams__chars
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV64 with
 type t = Interfaces__c_streams__chars.chars, 
 predicate in_range = Interfaces__c_streams__chars.in_range, 
 predicate in_range_int = Interfaces__c_streams__chars.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = Interfaces__c_streams__chars.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__files
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type files #"i-cstrea.ads" 41 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 41 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function first #"i-cstrea.ads" 41 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"i-cstrea.ads" 41 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"i-cstrea.ads" 41 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 41 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"i-cstrea.ads" 41 0 0# 
   (x : BV64.t)  =
  #"i-cstrea.ads" 41 0 0# ( (BV64.ule first x) /\ (BV64.ule x last) )
 
 predicate in_range_int #"i-cstrea.ads" 41 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 41 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt64 with
 type t = files, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type files__ref #"i-cstrea.ads" 41 0 0# =
  { mutable files__content "model_trace:" "name:" : files }
 
 function files__ref___2__projection #"i-cstrea.ads" 41 0 0# 
   (a : files__ref) : files =
  a.files__content
 
 meta "model_projection" function files__ref___2__projection
 
 meta "inline : no" function files__ref___2__projection
 
 val files__havoc #"i-cstrea.ads" 41 0 0# 
   (x : files__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__files__rep
 use        Interfaces__c_streams__files
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV64 with
 type t = Interfaces__c_streams__files.files, 
 predicate in_range = Interfaces__c_streams__files.in_range, 
 predicate in_range_int = Interfaces__c_streams__files.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = Interfaces__c_streams__files.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int__ #"i-cstrea.ads" 42 0 0# 
 
 function first #"i-cstrea.ads" 42 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"i-cstrea.ads" 42 0 0# 
   : int =
  2147483647
 
 predicate in_range #"i-cstrea.ads" 42 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 42 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int____ref #"i-cstrea.ads" 42 0 0# =
  { mutable int____content "model_trace:" "name:" : int__ }
 
 function int____ref___2__projection #"i-cstrea.ads" 42 0 0# 
   (a : int____ref) : int__ =
  a.int____content
 
 meta "model_projection" function int____ref___2__projection
 
 meta "inline : no" function int____ref___2__projection
 
 val int____havoc #"i-cstrea.ads" 42 0 0# 
   (x : int____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int__rep
 use        Interfaces__c_streams__int
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__int.int__, 
 predicate in_range = Interfaces__c_streams__int.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__long
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long #"i-cstrea.ads" 43 0 0# 
 
 function first #"i-cstrea.ads" 43 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"i-cstrea.ads" 43 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"i-cstrea.ads" 43 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 43 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long__ref #"i-cstrea.ads" 43 0 0# =
  { mutable long__content "model_trace:" "name:" : long }
 
 function long__ref___2__projection #"i-cstrea.ads" 43 0 0# 
   (a : long__ref) : long =
  a.long__content
 
 meta "model_projection" function long__ref___2__projection
 
 meta "inline : no" function long__ref___2__projection
 
 val long__havoc #"i-cstrea.ads" 43 0 0# 
   (x : long__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__long__rep
 use        Interfaces__c_streams__long
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__long.long, 
 predicate in_range = Interfaces__c_streams__long.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__size_t
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type size_t #"i-cstrea.ads" 44 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 44 0 0# 
   : BV64.t
 
 function first #"i-cstrea.ads" 44 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"i-cstrea.ads" 44 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"i-cstrea.ads" 44 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 44 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"i-cstrea.ads" 44 0 0# 
   (x : BV64.t)  =
  #"i-cstrea.ads" 44 0 0# true
 
 predicate in_range_int #"i-cstrea.ads" 44 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 44 0 0# BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = size_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type size_t__ref #"i-cstrea.ads" 44 0 0# =
  { mutable size_t__content "model_trace:" "name:" : size_t }
 
 function size_t__ref___2__projection #"i-cstrea.ads" 44 0 0# 
   (a : size_t__ref) : size_t =
  a.size_t__content
 
 meta "model_projection" function size_t__ref___2__projection
 
 meta "inline : no" function size_t__ref___2__projection
 
 val size_t__havoc #"i-cstrea.ads" 44 0 0# 
   (x : size_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__size_t__rep
 use        Interfaces__c_streams__size_t
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = Interfaces__c_streams__size_t.size_t, 
 predicate in_range = Interfaces__c_streams__size_t.in_range, 
 predicate in_range_int = Interfaces__c_streams__size_t.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__ssize_t
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ssize_t #"i-cstrea.ads" 45 0 0# 
 
 function first #"i-cstrea.ads" 45 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"i-cstrea.ads" 45 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"i-cstrea.ads" 45 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 45 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ssize_t, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ssize_t__ref #"i-cstrea.ads" 45 0 0# =
  { mutable ssize_t__content "model_trace:" "name:" : ssize_t }
 
 function ssize_t__ref___2__projection #"i-cstrea.ads" 45 0 0# 
   (a : ssize_t__ref) : ssize_t =
  a.ssize_t__content
 
 meta "model_projection" function ssize_t__ref___2__projection
 
 meta "inline : no" function ssize_t__ref___2__projection
 
 val ssize_t__havoc #"i-cstrea.ads" 45 0 0# 
   (x : ssize_t__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__ssize_t__rep
 use        Interfaces__c_streams__ssize_t
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__ssize_t.ssize_t, 
 predicate in_range = Interfaces__c_streams__ssize_t.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type int64 #"i-cstrea.ads" 46 0 0# 
 
 function first #"i-cstrea.ads" 46 0 0# 
   : int =
  ( -9223372036854775808 )
 
 function last #"i-cstrea.ads" 46 0 0# 
   : int =
  9223372036854775807
 
 predicate in_range #"i-cstrea.ads" 46 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 46 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = int64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int64__ref #"i-cstrea.ads" 46 0 0# =
  { mutable int64__content "model_trace:" "name:" : int64 }
 
 function int64__ref___2__projection #"i-cstrea.ads" 46 0 0# 
   (a : int64__ref) : int64 =
  a.int64__content
 
 meta "model_projection" function int64__ref___2__projection
 
 meta "inline : no" function int64__ref___2__projection
 
 val int64__havoc #"i-cstrea.ads" 46 0 0# 
   (x : int64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__int64__rep
 use        Interfaces__c_streams__int64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__int64.int64, 
 predicate in_range = Interfaces__c_streams__int64.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__voids
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type voids #"i-cstrea.ads" 47 0 0# 
 
 function attr__ATTRIBUTE_MODULUS #"i-cstrea.ads" 47 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function first #"i-cstrea.ads" 47 0 0# 
   : BV64.t =
  ( BV64.of_int 0 )
 
 function last #"i-cstrea.ads" 47 0 0# 
   : BV64.t =
  ( BV64.of_int 18446744073709551615 )
 
 function first_int #"i-cstrea.ads" 47 0 0# 
   : int =
  0
 
 function last_int #"i-cstrea.ads" 47 0 0# 
   : int =
  18446744073709551615
 
 predicate in_range #"i-cstrea.ads" 47 0 0# 
   (x : BV64.t)  =
  #"i-cstrea.ads" 47 0 0# ( (BV64.ule first x) /\ (BV64.ule x last) )
 
 predicate in_range_int #"i-cstrea.ads" 47 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 47 0 0# ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Static_Modular_lt64 with
 type t = voids, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function attr__ATTRIBUTE_MODULUS = attr__ATTRIBUTE_MODULUS, 
 predicate in_range_int = in_range_int
 
 type voids__ref #"i-cstrea.ads" 47 0 0# =
  { mutable voids__content "model_trace:" "name:" : voids }
 
 function voids__ref___projection #"i-cstrea.ads" 47 0 0# 
   (a : voids__ref) : voids =
  a.voids__content
 
 meta "model_projection" function voids__ref___projection
 
 meta "inline : no" function voids__ref___projection
 
 val voids__havoc #"i-cstrea.ads" 47 0 0# 
   (x : voids__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__voids__rep
 use        Interfaces__c_streams__voids
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_ltBV64 with
 type t = Interfaces__c_streams__voids.voids, 
 predicate in_range = Interfaces__c_streams__voids.in_range, 
 predicate in_range_int = Interfaces__c_streams__voids.in_range_int, 
 function attr__ATTRIBUTE_MODULUS = Interfaces__c_streams__voids.attr__ATTRIBUTE_MODULUS
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_stream" defined at i-cstrea.ads:49, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__null_stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_stream #"i-cstrea.ads" 49 0 0# "model" "model_trace:7570" "name:NULL_Stream" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module for defining the constant "eof" defined at i-cstrea.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__eof
 use import "_gnatprove_standard".Main

 function eof #"i-cstrea.ads" 56 0 0# "model" "model_trace:7579" "name:EOF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "iofbf" defined at i-cstrea.ads:59, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__iofbf
 use import "_gnatprove_standard".Main

 function iofbf #"i-cstrea.ads" 59 0 0# "model" "model_trace:7588" "name:IOFBF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "iolbf" defined at i-cstrea.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__iolbf
 use import "_gnatprove_standard".Main

 function iolbf #"i-cstrea.ads" 60 0 0# "model" "model_trace:7597" "name:IOLBF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "ionbf" defined at i-cstrea.ads:61, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__ionbf
 use import "_gnatprove_standard".Main

 function ionbf #"i-cstrea.ads" 61 0 0# "model" "model_trace:7606" "name:IONBF" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "l_tmpnam" defined at i-cstrea.ads:64, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__l_tmpnam
 use import "_gnatprove_standard".Main

 function l_tmpnam #"i-cstrea.ads" 64 0 0# "model" "model_trace:7615" "name:L_tmpnam" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "seek_cur" defined at i-cstrea.ads:67, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_cur
 use import "_gnatprove_standard".Main

 function seek_cur #"i-cstrea.ads" 67 0 0# "model" "model_trace:7624" "name:SEEK_CUR" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "seek_end" defined at i-cstrea.ads:68, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_end
 use import "_gnatprove_standard".Main

 function seek_end #"i-cstrea.ads" 68 0 0# "model" "model_trace:7633" "name:SEEK_END" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for defining the constant "seek_set" defined at i-cstrea.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__seek_set
 use import "_gnatprove_standard".Main

 function seek_set #"i-cstrea.ads" 69 0 0# "model" "model_trace:7642" "name:SEEK_SET" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module for possibly declaring a logic function for "stdin" defined at i-cstrea.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stdin
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stdin #"i-cstrea.ads" 72 0 0# 
   (__void_param : unit) : BV64.t
 
 predicate stdin__function_guard #"i-cstrea.ads" 41 0 0# 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "stdout" defined at i-cstrea.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stdout
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stdout #"i-cstrea.ads" 73 0 0# 
   (__void_param : unit) : BV64.t
 
 predicate stdout__function_guard #"i-cstrea.ads" 41 0 0# 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "stderr" defined at i-cstrea.ads:74, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__stderr
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stderr #"i-cstrea.ads" 74 0 0# 
   (__void_param : unit) : BV64.t
 
 predicate stderr__function_guard #"i-cstrea.ads" 41 0 0# 
   (result : BV64.t) (__void_param : unit) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__feof__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 95 0 0# "model" "name:stream" "model_trace:7768" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__feof__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "feof" defined at i-cstrea.ads:95, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__feof
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function feof #"i-cstrea.ads" 95 0 0# 
   (stream : BV64.t) : int
 
 predicate feof__function_guard #"i-cstrea.ads" 42 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__ferror__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 97 0 0# "model" "name:stream" "model_trace:7787" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__ferror__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "ferror" defined at i-cstrea.ads:97, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__ferror
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ferror #"i-cstrea.ads" 97 0 0# 
   (stream : BV64.t) : int
 
 predicate ferror__function_guard #"i-cstrea.ads" 42 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:106, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fileno__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 106 0 0# "model" "name:stream" "model_trace:7896" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fileno__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fileno" defined at i-cstrea.ads:106, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fileno
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fileno #"i-cstrea.ads" 106 0 0# 
   (stream : BV64.t) : int
 
 predicate fileno__function_guard #"i-cstrea.ads" 42 0 0# 
   (result : int) (stream : BV64.t) 

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 129 0 0# "model" "name:buffer" "model_trace:8065" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 47 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:129, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 130 0 0# "model" "name:size" "model_trace:8074" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:130, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"i-cstrea.ads" 131 0 0# "model" "name:count" "model_trace:8083" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:131, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 132 0 0# "model" "name:stream" "model_trace:8092" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:132, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fread" defined at i-cstrea.ads:128, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fread
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fread #"i-cstrea.ads" 128 0 0# 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
 
 predicate fread__function_guard #"i-cstrea.ads" 44 0 0# 
   (result : BV64.t) (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 135 0 0# "model" "name:buffer" "model_trace:8111" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 47 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:135, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "index" defined at i-cstrea.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__index
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function index #"i-cstrea.ads" 136 0 0# "model" "model_trace:8120" "name:index" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "index" defined at i-cstrea.ads:136, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 137 0 0# "model" "name:size" "model_trace:8129" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:137, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"i-cstrea.ads" 138 0 0# "model" "name:count" "model_trace:8138" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:138, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fread__2__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 139 0 0# "model" "name:stream" "model_trace:8147" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:139, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fread__2__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fread__2" defined at i-cstrea.ads:134, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fread__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fread__2 #"i-cstrea.ads" 134 0 0# 
   (buffer : BV64.t) (index : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
 
 predicate fread__2__function_guard #"i-cstrea.ads" 44 0 0# 
   (result : BV64.t) (buffer : BV64.t) (index : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:172, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 172 0 0# "model" "name:buffer" "model_trace:8358" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 47 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:172, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:173, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 173 0 0# "model" "name:size" "model_trace:8367" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:173, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "count" defined at i-cstrea.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__count
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function count #"i-cstrea.ads" 174 0 0# "model" "name:count" "model_trace:8376" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at i-cstrea.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "stream" defined at i-cstrea.ads:175, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__fwrite__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 175 0 0# "model" "name:stream" "model_trace:8385" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:175, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__fwrite__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "fwrite" defined at i-cstrea.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__fwrite
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function fwrite #"i-cstrea.ads" 171 0 0# 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
 
 predicate fwrite__function_guard #"i-cstrea.ads" 44 0 0# 
   (result : BV64.t) (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) 

end

(* Module for defining the constant "stream" defined at i-cstrea.ads:185, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__stream
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function stream #"i-cstrea.ads" 185 0 0# "model" "name:stream" "model_trace:8474" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 41 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at i-cstrea.ads:185, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 186 0 0# "model" "name:buffer" "model_trace:8483" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at i-cstrea.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__mode
 use import "_gnatprove_standard".Main

 function mode #"i-cstrea.ads" 187 0 0# "model" "name:mode" "model_trace:8492" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at i-cstrea.ads:187, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "size" defined at i-cstrea.ads:188, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__setvbuf__size
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function size #"i-cstrea.ads" 188 0 0# "model" "name:size" "model_trace:8501" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "size" defined at i-cstrea.ads:188, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__setvbuf__size___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "setvbuf" defined at i-cstrea.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__setvbuf
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function setvbuf #"i-cstrea.ads" 184 0 0# 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
 
 predicate setvbuf__function_guard #"i-cstrea.ads" 42 0 0# 
   (result : int) (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) 

end

(* Module for defining the constant "name" defined at i-cstrea.ads:212, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__file_exists__name
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function name #"i-cstrea.ads" 212 0 0# "model" "model_trace:8615" "name:name" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at i-cstrea.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__file_exists__name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "file_exists" defined at i-cstrea.ads:212, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__file_exists
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function file_exists #"i-cstrea.ads" 212 0 0# 
   (name : BV64.t) : int
 
 predicate file_exists__function_guard #"i-cstrea.ads" 42 0 0# 
   (result : int) (name : BV64.t) 

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:215, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__is_regular_file__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 215 0 0# "model" "name:handle" "model_trace:8634" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:215, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__is_regular_file__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_regular_file" defined at i-cstrea.ads:215, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__is_regular_file
 use import "_gnatprove_standard".Main

 function is_regular_file #"i-cstrea.ads" 215 0 0# 
   (handle : int) : int
 
 predicate is_regular_file__function_guard #"i-cstrea.ads" 42 0 0# 
   (result : int) (handle : int) 

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:223, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_binary_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 223 0 0# "model" "name:handle" "model_trace:8653" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:223, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_binary_mode__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "handle" defined at i-cstrea.ads:224, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_text_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 224 0 0# "model" "name:handle" "model_trace:8671" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:224, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_text_mode__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type content_encoding #"i-cstrea.ads" 230 0 0# 
 
 function first #"i-cstrea.ads" 230 0 0# 
   : int =
  0
 
 function last #"i-cstrea.ads" 230 0 0# 
   : int =
  5
 
 predicate in_range #"i-cstrea.ads" 230 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 230 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type content_encoding__ref #"i-cstrea.ads" 230 0 0# =
  { mutable content_encoding__content "model_trace:" "name:" : content_encoding }
 
 function content_encoding__ref___projection #"i-cstrea.ads" 230 0 0# 
   (a : content_encoding__ref) : content_encoding =
  a.content_encoding__content
 
 meta "model_projection" function content_encoding__ref___projection
 
 meta "inline : no" function content_encoding__ref___projection
 
 val content_encoding__havoc #"i-cstrea.ads" 230 0 0# 
   (x : content_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__content_encoding__rep
 use        Interfaces__c_streams__content_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__content_encoding.content_encoding, 
 predicate in_range = Interfaces__c_streams__content_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__text_content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type text_content_encoding #"i-cstrea.ads" 248 0 0# 
 
 function first #"i-cstrea.ads" 248 0 0# 
   : int =
  1
 
 function last #"i-cstrea.ads" 248 0 0# 
   : int =
  5
 
 predicate in_range #"i-cstrea.ads" 248 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 248 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = text_content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type text_content_encoding__ref #"i-cstrea.ads" 248 0 0# =
  { mutable text_content_encoding__content "model_trace:" "name:" : text_content_encoding }
 
 function text_content_encoding__ref___projection #"i-cstrea.ads" 248 0 0# 
   (a : text_content_encoding__ref) : text_content_encoding =
  a.text_content_encoding__content
 
 meta "model_projection" function text_content_encoding__ref___projection
 
 meta "inline : no" function text_content_encoding__ref___projection
 
 val text_content_encoding__havoc #"i-cstrea.ads" 248 0 0# 
   (x : text_content_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__text_content_encoding__rep
 use        Interfaces__c_streams__text_content_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__text_content_encoding.text_content_encoding, 
 predicate in_range = Interfaces__c_streams__text_content_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__non_default_text_content_encoding
 use import "_gnatprove_standard".Main
 use import "int".Int

 type non_default_text_content_encoding #"i-cstrea.ads" 251 0 0# 
 
 function first #"i-cstrea.ads" 251 0 0# 
   : int =
  2
 
 function last #"i-cstrea.ads" 251 0 0# 
   : int =
  5
 
 predicate in_range #"i-cstrea.ads" 251 0 0# 
   (x : int)  =
  #"i-cstrea.ads" 251 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = non_default_text_content_encoding, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type non_default_text_content_encoding__ref #"i-cstrea.ads" 251 0 0# =
  { mutable non_default_text_content_encoding__content "model_trace:" "name:" : non_default_text_content_encoding }
 
 function non_default_text_content_encoding__ref___projection #"i-cstrea.ads" 251 0 0# 
   (a : non_default_text_content_encoding__ref) : non_default_text_content_encoding =
  a.non_default_text_content_encoding__content
 
 meta "model_projection" function non_default_text_content_encoding__ref___projection
 
 meta "inline : no" function non_default_text_content_encoding__ref___projection
 
 val non_default_text_content_encoding__havoc #"i-cstrea.ads" 251 0 0# 
   (x : non_default_text_content_encoding__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Translate_Type *)
module Interfaces__c_streams__non_default_text_content_encoding__rep
 use        Interfaces__c_streams__non_default_text_content_encoding
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Interfaces__c_streams__non_default_text_content_encoding.non_default_text_content_encoding, 
 predicate in_range = Interfaces__c_streams__non_default_text_content_encoding.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "handle" defined at i-cstrea.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_mode__handle
 use import "_gnatprove_standard".Main

 function handle #"i-cstrea.ads" 254 0 0# "model" "name:handle" "model_trace:8785" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 42 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "handle" defined at i-cstrea.ads:254, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_mode__handle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at i-cstrea.ads:254, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__set_mode__mode
 use import "_gnatprove_standard".Main

 function mode #"i-cstrea.ads" 254 0 0# "model" "model_trace:8794" "name:Mode" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 230 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at i-cstrea.ads:254, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__set_mode__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "nam" defined at i-cstrea.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__full_name__nam
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function nam #"i-cstrea.ads" 262 0 0# "model" "model_trace:8812" "name:nam" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "nam" defined at i-cstrea.ads:262, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__full_name__nam___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "buffer" defined at i-cstrea.ads:262, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__full_name__buffer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function buffer #"i-cstrea.ads" 262 0 0# "model" "name:buffer" "model_trace:8821" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS #"i-cstrea.ads" 40 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "buffer" defined at i-cstrea.ads:262, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Interfaces__c_streams__full_name__buffer___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "max_path_len" defined at i-cstrea.ads:270, created in Gnat2Why.Decls.Translate_Constant *)
module Interfaces__c_streams__max_path_len
 use import "_gnatprove_standard".Main

 function max_path_len #"i-cstrea.ads" 270 0 0# "model" "model_trace:8835" "name:max_path_len" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_mode #"s-ficobl.ads" 63 0 0# 
 
 function first #"s-ficobl.ads" 63 0 0# 
   : int =
  0
 
 function last #"s-ficobl.ads" 63 0 0# 
   : int =
  3
 
 predicate in_range #"s-ficobl.ads" 63 0 0# 
   (x : int)  =
  #"s-ficobl.ads" 63 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref #"s-ficobl.ads" 63 0 0# =
  { mutable file_mode__content "model_trace:" "name:" : file_mode }
 
 function file_mode__ref___projection #"s-ficobl.ads" 63 0 0# 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref___projection
 
 meta "inline : no" function file_mode__ref___projection
 
 val file_mode__havoc #"s-ficobl.ads" 63 0 0# 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__file_mode__rep
 use        System__file_control_block__file_mode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__file_control_block__file_mode.file_mode, 
 predicate in_range = System__file_control_block__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__read_file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type read_file_mode #"s-ficobl.ads" 64 0 0# 
 
 function first #"s-ficobl.ads" 64 0 0# 
   : int =
  0
 
 function last #"s-ficobl.ads" 64 0 0# 
   : int =
  1
 
 predicate in_range #"s-ficobl.ads" 64 0 0# 
   (x : int)  =
  #"s-ficobl.ads" 64 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = read_file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type read_file_mode__ref #"s-ficobl.ads" 64 0 0# =
  { mutable read_file_mode__content "model_trace:" "name:" : read_file_mode }
 
 function read_file_mode__ref___projection #"s-ficobl.ads" 64 0 0# 
   (a : read_file_mode__ref) : read_file_mode =
  a.read_file_mode__content
 
 meta "model_projection" function read_file_mode__ref___projection
 
 meta "inline : no" function read_file_mode__ref___projection
 
 val read_file_mode__havoc #"s-ficobl.ads" 64 0 0# 
   (x : read_file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__read_file_mode__rep
 use        System__file_control_block__read_file_mode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__file_control_block__read_file_mode.read_file_mode, 
 predicate in_range = System__file_control_block__read_file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__shared_status_type
 use import "_gnatprove_standard".Main
 use import "int".Int

 type shared_status_type #"s-ficobl.ads" 69 0 0# 
 
 function first #"s-ficobl.ads" 69 0 0# 
   : int =
  0
 
 function last #"s-ficobl.ads" 69 0 0# 
   : int =
  2
 
 predicate in_range #"s-ficobl.ads" 69 0 0# 
   (x : int)  =
  #"s-ficobl.ads" 69 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = shared_status_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type shared_status_type__ref #"s-ficobl.ads" 69 0 0# =
  { mutable shared_status_type__content "model_trace:" "name:" : shared_status_type }
 
 function shared_status_type__ref___projection #"s-ficobl.ads" 69 0 0# 
   (a : shared_status_type__ref) : shared_status_type =
  a.shared_status_type__content
 
 meta "model_projection" function shared_status_type__ref___projection
 
 meta "inline : no" function shared_status_type__ref___projection
 
 val shared_status_type__havoc #"s-ficobl.ads" 69 0 0# 
   (x : shared_status_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Translate_Type *)
module System__file_control_block__shared_status_type__rep
 use        System__file_control_block__shared_status_type
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__file_control_block__shared_status_type.shared_status_type, 
 predicate in_range = System__file_control_block__shared_status_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_methodB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type twc_encoding_methodB #"s-wchcon.ads" 94 0 0# 
 
 function first #"s-wchcon.ads" 94 0 0# 
   : int =
  ( -128 )
 
 function last #"s-wchcon.ads" 94 0 0# 
   : int =
  127
 
 predicate in_range #"s-wchcon.ads" 94 0 0# 
   (x : int)  =
  #"s-wchcon.ads" 94 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = twc_encoding_methodB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type twc_encoding_methodB__ref #"s-wchcon.ads" 94 0 0# =
  { mutable twc_encoding_methodB__content "model_trace:" "name:" : twc_encoding_methodB }
 
 function twc_encoding_methodB__ref___projection #"s-wchcon.ads" 94 0 0# 
   (a : twc_encoding_methodB__ref) : twc_encoding_methodB =
  a.twc_encoding_methodB__content
 
 meta "model_projection" function twc_encoding_methodB__ref___projection
 
 meta "inline : no" function twc_encoding_methodB__ref___projection
 
 val twc_encoding_methodB__havoc #"s-wchcon.ads" 94 0 0# 
   (x : twc_encoding_methodB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_methodB__rep
 use        System__wch_con__Twc_encoding_methodB
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 predicate in_range = System__wch_con__Twc_encoding_methodB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_encoding_method #"s-wchcon.ads" 94 0 0# 
 
 function first #"s-wchcon.ads" 94 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 94 0 0# 
   : int =
  6
 
 predicate in_range #"s-wchcon.ads" 94 0 0# 
   (x : int)  =
  #"s-wchcon.ads" 94 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wc_encoding_method__ref #"s-wchcon.ads" 94 0 0# =
  { mutable wc_encoding_method__content "model_trace:" "name:" : wc_encoding_method }
 
 function wc_encoding_method__ref___projection #"s-wchcon.ads" 94 0 0# 
   (a : wc_encoding_method__ref) : wc_encoding_method =
  a.wc_encoding_method__content
 
 meta "model_projection" function wc_encoding_method__ref___projection
 
 meta "inline : no" function wc_encoding_method__ref___projection
 
 val wc_encoding_method__havoc #"s-wchcon.ads" 94 0 0# 
   (x : wc_encoding_method__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_encoding_method__rep
 use        System__wch_con__wc_encoding_method
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__wc_encoding_method.wc_encoding_method, 
 predicate in_range = System__wch_con__wc_encoding_method.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "wcem_hex" defined at s-wchcon.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_hex
 use import "_gnatprove_standard".Main

 function wcem_hex #"s-wchcon.ads" 100 0 0# "model" "model_trace:11064" "name:WCEM_Hex" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_upper" defined at s-wchcon.ads:108, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_upper
 use import "_gnatprove_standard".Main

 function wcem_upper #"s-wchcon.ads" 108 0 0# "model" "model_trace:11074" "name:WCEM_Upper" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_shift_jis" defined at s-wchcon.ads:117, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_shift_jis
 use import "_gnatprove_standard".Main

 function wcem_shift_jis #"s-wchcon.ads" 117 0 0# "model" "model_trace:11084" "name:WCEM_Shift_JIS" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_euc" defined at s-wchcon.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_euc
 use import "_gnatprove_standard".Main

 function wcem_euc #"s-wchcon.ads" 126 0 0# "model" "model_trace:11094" "name:WCEM_EUC" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_utf8" defined at s-wchcon.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_utf8
 use import "_gnatprove_standard".Main

 function wcem_utf8 #"s-wchcon.ads" 134 0 0# "model" "model_trace:11104" "name:WCEM_UTF8" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for defining the constant "wcem_brackets" defined at s-wchcon.ads:156, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wcem_brackets
 use import "_gnatprove_standard".Main

 function wcem_brackets #"s-wchcon.ads" 156 0 0# "model" "model_trace:11114" "name:WCEM_Brackets" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module for axiomatizing type "Twc_encoding_lettersB" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_lettersB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character
 use        System__wch_con__Twc_encoding_methodB
 use        System__wch_con__Twc_encoding_methodB__rep
 use        System__wch_con__wc_encoding_method

 type component_type #"s-wchcon.ads" 94 0 0# =
  Standard__character.character
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 type index_rep_type = int, 
 function to_rep = System__wch_con__Twc_encoding_methodB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = System__wch_con__Twc_encoding_methodB.in_range, 
 predicate index_dynamic_property = System__wch_con__wc_encoding_method.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type twc_encoding_lettersB #"s-wchcon.ads" 169 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type twc_encoding_lettersB__ref #"s-wchcon.ads" 169 0 0# =
  { mutable twc_encoding_lettersB__content "model_trace:" "name:" : twc_encoding_lettersB }
 
 function twc_encoding_lettersB__ref___projection #"s-wchcon.ads" 169 0 0# 
   (a : twc_encoding_lettersB__ref) : twc_encoding_lettersB =
  a.twc_encoding_lettersB__content
 
 meta "model_projection" function twc_encoding_lettersB__ref___projection
 
 meta "inline : no" function twc_encoding_lettersB__ref___projection
 
 val twc_encoding_lettersB__havoc #"s-wchcon.ads" 169 0 0# 
   (x : twc_encoding_lettersB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Twc_encoding_lettersT" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_encoding_lettersT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-wchcon.ads" 169 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s #"s-wchcon.ads" 170 0 0# 
 
 function first #"s-wchcon.ads" 170 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 170 0 0# 
   : int =
  6
 
 predicate in_range #"s-wchcon.ads" 170 0 0# 
   (x : int)  =
  #"s-wchcon.ads" 170 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref #"s-wchcon.ads" 170 0 0# =
  { mutable t3s__content "model_trace:" "name:" : t3s }
 
 function t3s__ref___projection #"s-wchcon.ads" 170 0 0# 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc #"s-wchcon.ads" 170 0 0# 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T3s__rep
 use        System__wch_con__T3s
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__T3s.t3s, 
 predicate in_range = System__wch_con__T3s.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type #"s-wchcon.ads" 170 0 0# =
  Standard__character.character
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "wc_encoding_letters" defined at s-wchcon.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wc_encoding_letters
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function wc_encoding_letters #"s-wchcon.ads" 169 0 0# "model_projected" "model_trace:11124" "name:WC_Encoding_Letters" 
   : Array__Int__Standard__character.map
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 169 0 0# 
   : int

end

(* Module for axiomatizing type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_esc_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_esc_encoding_method #"s-wchcon.ads" 180 0 0# 
 
 function first #"s-wchcon.ads" 180 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 180 0 0# 
   : int =
  1
 
 predicate in_range #"s-wchcon.ads" 180 0 0# 
   (x : int)  =
  #"s-wchcon.ads" 180 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_esc_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wc_esc_encoding_method__ref #"s-wchcon.ads" 180 0 0# =
  { mutable wc_esc_encoding_method__content "model_trace:" "name:" : wc_esc_encoding_method }
 
 function wc_esc_encoding_method__ref___projection #"s-wchcon.ads" 180 0 0# 
   (a : wc_esc_encoding_method__ref) : wc_esc_encoding_method =
  a.wc_esc_encoding_method__content
 
 meta "model_projection" function wc_esc_encoding_method__ref___projection
 
 meta "inline : no" function wc_esc_encoding_method__ref___projection
 
 val wc_esc_encoding_method__havoc #"s-wchcon.ads" 180 0 0# 
   (x : wc_esc_encoding_method__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_esc_encoding_method__rep
 use        System__wch_con__wc_esc_encoding_method
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__wc_esc_encoding_method.wc_esc_encoding_method, 
 predicate in_range = System__wch_con__wc_esc_encoding_method.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_upper_half_encoding_method
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wc_upper_half_encoding_method #"s-wchcon.ads" 184 0 0# 
 
 function first #"s-wchcon.ads" 184 0 0# 
   : int =
  2
 
 function last #"s-wchcon.ads" 184 0 0# 
   : int =
  5
 
 predicate in_range #"s-wchcon.ads" 184 0 0# 
   (x : int)  =
  #"s-wchcon.ads" 184 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wc_upper_half_encoding_method, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wc_upper_half_encoding_method__ref #"s-wchcon.ads" 184 0 0# =
  { mutable wc_upper_half_encoding_method__content "model_trace:" "name:" : wc_upper_half_encoding_method }
 
 function wc_upper_half_encoding_method__ref___projection #"s-wchcon.ads" 184 0 0# 
   (a : wc_upper_half_encoding_method__ref) : wc_upper_half_encoding_method =
  a.wc_upper_half_encoding_method__content
 
 meta "model_projection" function wc_upper_half_encoding_method__ref___projection
 
 meta "inline : no" function wc_upper_half_encoding_method__ref___projection
 
 val wc_upper_half_encoding_method__havoc #"s-wchcon.ads" 184 0 0# 
   (x : wc_upper_half_encoding_method__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__wc_upper_half_encoding_method__rep
 use        System__wch_con__wc_upper_half_encoding_method
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__wc_upper_half_encoding_method.wc_upper_half_encoding_method, 
 predicate in_range = System__wch_con__wc_upper_half_encoding_method.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep

 function index_I1_one #"s-wchcon.ads" 184 0 0# 
   : int =
  1
 
 type component_type #"s-wchcon.ads" 184 0 0# =
  Standard__natural.natural
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq #"system.ads" 1 0 0# 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_142 #"system.ads" 1 0 0#  : int.
   (if (( (a__first <= temp___idx_142) /\ (temp___idx_142 <= a__last) )) then (
    ((Standard__natural__rep.to_rep (get a temp___idx_142)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_142))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a #"system.ads" 1 0 0#  b #"system.ads" 1 0 0#  : map.
  (forall a__first #"system.ads" 1 0 0#  a__last #"system.ads" 1 0 0#  b__first #"system.ads" 1 0 0#  b__last #"system.ads" 1 0 0#  : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_142 #"system.ads" 1 0 0#  : int.
    (if (( (a__first <= temp___idx_142) /\ (temp___idx_142 <= a__last) )) then (
     ((Standard__natural__rep.to_rep (get a temp___idx_142)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_142))))) else true)) ) )))
 
 function index_Index_one #"system.ads" 1 0 0# 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = component_type, 
 function to_rep = Standard__natural__rep.to_rep, 
 type map = map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = get, 
 function bool_eq = bool_eq

end

(* Module for axiomatizing type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_longest_sequencesB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        System__wch_con__Twc_encoding_methodB
 use        System__wch_con__Twc_encoding_methodB__rep
 use        System__wch_con__wc_encoding_method
 use        Array__Int__Standard__natural

 type component_type #"system.ads" 1 0 0# =
  Standard__natural.natural
 
 function index_1_id #"system.ads" 1 0 0# 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = System__wch_con__Twc_encoding_methodB.twc_encoding_methodB, 
 type index_rep_type = int, 
 function to_rep = System__wch_con__Twc_encoding_methodB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = System__wch_con__Twc_encoding_methodB.in_range, 
 predicate index_dynamic_property = System__wch_con__wc_encoding_method.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type twc_longest_sequencesB #"s-wchcon.ads" 193 0 0# =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type twc_longest_sequencesB__ref #"s-wchcon.ads" 193 0 0# =
  { mutable twc_longest_sequencesB__content "model_trace:" "name:" : twc_longest_sequencesB }
 
 function twc_longest_sequencesB__ref___projection #"s-wchcon.ads" 193 0 0# 
   (a : twc_longest_sequencesB__ref) : twc_longest_sequencesB =
  a.twc_longest_sequencesB__content
 
 meta "model_projection" function twc_longest_sequencesB__ref___projection
 
 meta "inline : no" function twc_longest_sequencesB__ref___projection
 
 val twc_longest_sequencesB__havoc #"s-wchcon.ads" 193 0 0# 
   (x : twc_longest_sequencesB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Twc_longest_sequencesT" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__Twc_longest_sequencesT
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type #"s-wchcon.ads" 193 0 0# =
  Standard__natural.natural
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T7s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t7s #"s-wchcon.ads" 194 0 0# 
 
 function first #"s-wchcon.ads" 194 0 0# 
   : int =
  1
 
 function last #"s-wchcon.ads" 194 0 0# 
   : int =
  6
 
 predicate in_range #"s-wchcon.ads" 194 0 0# 
   (x : int)  =
  #"s-wchcon.ads" 194 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t7s__ref #"s-wchcon.ads" 194 0 0# =
  { mutable t7s__content "model_trace:" "name:" : t7s }
 
 function t7s__ref___projection #"s-wchcon.ads" 194 0 0# 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref___projection
 
 meta "inline : no" function t7s__ref___projection
 
 val t7s__havoc #"s-wchcon.ads" 194 0 0# 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T7s__rep
 use        System__wch_con__T7s
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__wch_con__T7s.t7s, 
 predicate in_range = System__wch_con__T7s.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T8s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Translate_Type *)
module System__wch_con__T8s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Array__Int__Standard__natural

 type component_type #"s-wchcon.ads" 194 0 0# =
  Standard__natural.natural
 
 function first #"system.ads" 1 0 0# 
   : int =
  1
 
 function last #"system.ads" 1 0 0# 
   : int =
  6
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "wc_longest_sequences" defined at s-wchcon.ads:193, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__wc_longest_sequences
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__natural

 function wc_longest_sequences #"s-wchcon.ads" 193 0 0# "model_projected" "model_trace:11192" "name:WC_Longest_Sequences" 
   : Array__Int__Standard__natural.map
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 193 0 0# 
   : int

end

(* Module for defining the constant "c" defined at s-wchcon.ads:203, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__get_wc_encoding_method__c
 use import "_gnatprove_standard".Main

 function c #"s-wchcon.ads" 203 0 0# "model" "name:C" "model_trace:11230" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-wchcon.ads:203, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__get_wc_encoding_method__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_wc_encoding_method" defined at s-wchcon.ads:203, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__get_wc_encoding_method
 use import "_gnatprove_standard".Main

 function get_wc_encoding_method #"s-wchcon.ads" 203 0 0# 
   (c : int) : int
 
 predicate get_wc_encoding_method__function_guard #"s-wchcon.ads" 94 0 0# 
   (result : int) (c : int) 

end

(* Module for defining the constant "s" defined at s-wchcon.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__get_wc_encoding_method__2__s
 use import "_gnatprove_standard".Main
 use        Standard__string

 function s #"s-wchcon.ads" 207 0 0# "model_projected" "name:S" "model_trace:11249" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "s" defined at s-wchcon.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__get_wc_encoding_method__2__s___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_wc_encoding_method__2" defined at s-wchcon.ads:207, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__get_wc_encoding_method__2
 use import "_gnatprove_standard".Main
 use        Standard__string

 function get_wc_encoding_method__2 #"s-wchcon.ads" 207 0 0# 
   (s : Standard__string.string) : int
 
 predicate get_wc_encoding_method__2__function_guard #"s-wchcon.ads" 94 0 0# 
   (result : int) (s : Standard__string.string) 

end

(* Module for defining the constant "c" defined at s-wchcon.ads:213, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__is_start_of_encoding__c
 use import "_gnatprove_standard".Main

 function c #"s-wchcon.ads" 213 0 0# "model" "name:C" "model_trace:11268" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at s-wchcon.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__is_start_of_encoding__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "em" defined at s-wchcon.ads:214, created in Gnat2Why.Decls.Translate_Constant *)
module System__wch_con__is_start_of_encoding__em
 use import "_gnatprove_standard".Main

 function em #"s-wchcon.ads" 214 0 0# "model" "model_trace:11277" "name:EM" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "em" defined at s-wchcon.ads:214, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__wch_con__is_start_of_encoding__em___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_start_of_encoding" defined at s-wchcon.ads:212, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__wch_con__is_start_of_encoding
 use import "_gnatprove_standard".Main

 function is_start_of_encoding #"s-wchcon.ads" 212 0 0# 
   (c : int) (em : int) : bool
 
 predicate is_start_of_encoding__function_guard #"s-wchcon.ads" 94 0 0# 
   (result : bool) (c : int) (em : int) 

end

(* Module for axiomatizing the record theory associated to type "file_type" defined at a-textio.ads:52, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Ada__text_io__file_type__rep
 use import "_gnatprove_standard".Main

 type __main_type #"s-wchcon.ads" 94 0 0# 
 
 function __main_eq #"s-wchcon.ads" 94 0 0# 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep #"s-wchcon.ads" 94 0 0# 
 
 function to_base #"s-wchcon.ads" 94 0 0# 
   (a : __rep) : __rep =
  a
 
 function of_base #"s-wchcon.ads" 94 0 0# 
   (a : __rep) : __rep =
  a
 
 function bool_eq #"s-wchcon.ads" 94 0 0# 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "file_type" defined at a-textio.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_type
 use export Ada__text_io__file_type__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_type #"a-textio.ads" 52 0 0# =
  __rep
 
 function value__size #"a-textio.ads" 52 0 0# 
   : int
 
 function object__size #"a-textio.ads" 52 0 0# 
   (a : file_type) : int
 
 function value__alignment #"a-textio.ads" 52 0 0# 
   : int
 
 function object__alignment #"a-textio.ads" 52 0 0# 
   (a : file_type) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a #"a-textio.ads" 52 0 0#  : file_type.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a #"a-textio.ads" 52 0 0#  : file_type.
   ((object__alignment a) >= 0))
 
 function user_eq #"a-textio.ads" 52 0 0# 
   (a : file_type) (b : file_type) : bool
 
 function dummy #"a-textio.ads" 52 0 0# 
   : file_type
 
 type file_type__ref #"a-textio.ads" 52 0 0# =
  { mutable file_type__content "model_trace:" "name:" : file_type }
 
 function file_type__ref___projection #"a-textio.ads" 52 0 0# 
   (a : file_type__ref) : file_type =
  a.file_type__content
 
 meta "model_projection" function file_type__ref___projection
 
 meta "inline : no" function file_type__ref___projection
 
 val file_type__havoc #"a-textio.ads" 52 0 0# 
   (x : file_type__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode
 use import "_gnatprove_standard".Main
 use import "int".Int

 type file_mode #"a-textio.ads" 53 0 0# 
 
 function first #"a-textio.ads" 53 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 53 0 0# 
   : int =
  2
 
 predicate in_range #"a-textio.ads" 53 0 0# 
   (x : int)  =
  #"a-textio.ads" 53 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = file_mode, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type file_mode__ref #"a-textio.ads" 53 0 0# =
  { mutable file_mode__content "model_trace:" "name:" : file_mode }
 
 function file_mode__ref___2__projection #"a-textio.ads" 53 0 0# 
   (a : file_mode__ref) : file_mode =
  a.file_mode__content
 
 meta "model_projection" function file_mode__ref___2__projection
 
 meta "inline : no" function file_mode__ref___2__projection
 
 val file_mode__havoc #"a-textio.ads" 53 0 0# 
   (x : file_mode__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__file_mode__rep
 use        Ada__text_io__file_mode
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__file_mode.file_mode, 
 predicate in_range = Ada__text_io__file_mode.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tcountB #"a-textio.ads" 64 0 0# 
 
 function first #"a-textio.ads" 64 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"a-textio.ads" 64 0 0# 
   : int =
  2147483647
 
 predicate in_range #"a-textio.ads" 64 0 0# 
   (x : int)  =
  #"a-textio.ads" 64 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref #"a-textio.ads" 64 0 0# =
  { mutable tcountB__content "model_trace:" "name:" : tcountB }
 
 function tcountB__ref___projection #"a-textio.ads" 64 0 0# 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref___projection
 
 meta "inline : no" function tcountB__ref___projection
 
 val tcountB__havoc #"a-textio.ads" 64 0 0# 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type count #"a-textio.ads" 64 0 0# 
 
 function first #"a-textio.ads" 64 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 64 0 0# 
   : int =
  2147483647
 
 predicate in_range #"a-textio.ads" 64 0 0# 
   (x : int)  =
  #"a-textio.ads" 64 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref #"a-textio.ads" 64 0 0# =
  { mutable count__content "model_trace:" "name:" : count }
 
 function count__ref___projection #"a-textio.ads" 64 0 0# 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref___projection
 
 meta "inline : no" function count__ref___projection
 
 val count__havoc #"a-textio.ads" 64 0 0# 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive_count #"a-textio.ads" 68 0 0# 
 
 function first #"a-textio.ads" 68 0 0# 
   : int =
  1
 
 function last #"a-textio.ads" 68 0 0# 
   : int =
  2147483647
 
 predicate in_range #"a-textio.ads" 68 0 0# 
   (x : int)  =
  #"a-textio.ads" 68 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive_count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive_count__ref #"a-textio.ads" 68 0 0# =
  { mutable positive_count__content "model_trace:" "name:" : positive_count }
 
 function positive_count__ref___projection #"a-textio.ads" 68 0 0# 
   (a : positive_count__ref) : positive_count =
  a.positive_count__content
 
 meta "model_projection" function positive_count__ref___projection
 
 meta "inline : no" function positive_count__ref___projection
 
 val positive_count__havoc #"a-textio.ads" 68 0 0# 
   (x : positive_count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__positive_count__rep
 use        Ada__text_io__positive_count
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__positive_count.positive_count, 
 predicate in_range = Ada__text_io__positive_count.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "unbounded" defined at a-textio.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__unbounded
 use import "_gnatprove_standard".Main

 function unbounded #"a-textio.ads" 70 0 0# "model" "model_trace:2980" "name:Unbounded" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module for axiomatizing type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field
 use import "_gnatprove_standard".Main
 use import "int".Int

 type field #"a-textio.ads" 73 0 0# 
 
 function first #"a-textio.ads" 73 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 73 0 0# 
   : int =
  255
 
 predicate in_range #"a-textio.ads" 73 0 0# 
   (x : int)  =
  #"a-textio.ads" 73 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = field, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type field__ref #"a-textio.ads" 73 0 0# =
  { mutable field__content "model_trace:" "name:" : field }
 
 function field__ref___projection #"a-textio.ads" 73 0 0# 
   (a : field__ref) : field =
  a.field__content
 
 meta "model_projection" function field__ref___projection
 
 meta "inline : no" function field__ref___projection
 
 val field__havoc #"a-textio.ads" 73 0 0# 
   (x : field__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__field__rep
 use        Ada__text_io__field
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__field.field, 
 predicate in_range = Ada__text_io__field.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base
 use import "_gnatprove_standard".Main
 use import "int".Int

 type number_base #"a-textio.ads" 78 0 0# 
 
 function first #"a-textio.ads" 78 0 0# 
   : int =
  2
 
 function last #"a-textio.ads" 78 0 0# 
   : int =
  16
 
 predicate in_range #"a-textio.ads" 78 0 0# 
   (x : int)  =
  #"a-textio.ads" 78 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = number_base, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type number_base__ref #"a-textio.ads" 78 0 0# =
  { mutable number_base__content "model_trace:" "name:" : number_base }
 
 function number_base__ref___projection #"a-textio.ads" 78 0 0# 
   (a : number_base__ref) : number_base =
  a.number_base__content
 
 meta "model_projection" function number_base__ref___projection
 
 meta "inline : no" function number_base__ref___projection
 
 val number_base__havoc #"a-textio.ads" 78 0 0# 
   (x : number_base__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__number_base__rep
 use        Ada__text_io__number_base
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__number_base.number_base, 
 predicate in_range = Ada__text_io__number_base.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__type_set
 use import "_gnatprove_standard".Main
 use import "int".Int

 type type_set #"a-textio.ads" 80 0 0# 
 
 function first #"a-textio.ads" 80 0 0# 
   : int =
  0
 
 function last #"a-textio.ads" 80 0 0# 
   : int =
  1
 
 predicate in_range #"a-textio.ads" 80 0 0# 
   (x : int)  =
  #"a-textio.ads" 80 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = type_set, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type type_set__ref #"a-textio.ads" 80 0 0# =
  { mutable type_set__content "model_trace:" "name:" : type_set }
 
 function type_set__ref___projection #"a-textio.ads" 80 0 0# 
   (a : type_set__ref) : type_set =
  a.type_set__content
 
 meta "model_projection" function type_set__ref___projection
 
 meta "inline : no" function type_set__ref___projection
 
 val type_set__havoc #"a-textio.ads" 80 0 0# 
   (x : type_set__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__type_set__rep
 use        Ada__text_io__type_set
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__text_io__type_set.type_set, 
 predicate in_range = Ada__text_io__type_set.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "mode" defined at a-textio.ads:88, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 88 0 0# "model" "name:Mode" "model_trace:3058" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:88, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "name" defined at a-textio.ads:89, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function name #"a-textio.ads" 89 0 0# "model_projected" "model_trace:3068" "name:Name" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at a-textio.ads:89, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "form" defined at a-textio.ads:90, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__create__form
 use import "_gnatprove_standard".Main
 use        Standard__string

 function form #"a-textio.ads" 90 0 0# "model_projected" "model_trace:3078" "name:Form" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "form" defined at a-textio.ads:90, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__form___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at a-textio.ads:94, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 94 0 0# "model" "name:Mode" "model_trace:3106" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:94, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "name" defined at a-textio.ads:95, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__name
 use import "_gnatprove_standard".Main
 use        Standard__string

 function name #"a-textio.ads" 95 0 0# "model_projected" "name:Name" "model_trace:3115" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "name" defined at a-textio.ads:95, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__name___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "form" defined at a-textio.ads:96, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__open__form
 use import "_gnatprove_standard".Main
 use        Standard__string

 function form #"a-textio.ads" 96 0 0# "model_projected" "name:Form" "model_trace:3124" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "form" defined at a-textio.ads:96, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__form___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mode" defined at a-textio.ads:100, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__reset__mode
 use import "_gnatprove_standard".Main

 function mode #"a-textio.ads" 100 0 0# "model" "name:Mode" "model_trace:3188" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mode" defined at a-textio.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__mode___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:103, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__mode__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 103 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:103, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__mode__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mode" defined at a-textio.ads:103, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__mode
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function mode #"a-textio.ads" 103 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate mode__function_guard #"a-textio.ads" 53 0 0# 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__name__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 104 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:104, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__name__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "name" defined at a-textio.ads:104, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__name
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function name #"a-textio.ads" 104 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
 
 predicate name__function_guard #"system.ads" 1 0 0# 
   (result : Standard__string.string) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:105, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__form__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 105 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:105, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__form__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "form" defined at a-textio.ads:105, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__form
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function form #"a-textio.ads" 105 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
 
 predicate form__function_guard #"system.ads" 1 0 0# 
   (result : Standard__string.string) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:107, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__is_open__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 107 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:107, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__is_open__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_open" defined at a-textio.ads:107, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__is_open
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function is_open #"a-textio.ads" 107 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate is_open__function_guard #"a-textio.ads" 52 0 0# 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for defining the constant "file" defined at a-textio.ads:113, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_input__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 113 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:113, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_input__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:114, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_output__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 114 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_output__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:115, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_error__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 115 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:115, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_error__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "standard_input" defined at a-textio.ads:117, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_input
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_input #"a-textio.ads" 117 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate standard_input__function_guard #"a-textio.ads" 52 0 0# 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "standard_output" defined at a-textio.ads:118, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_output
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_output #"a-textio.ads" 118 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate standard_output__function_guard #"a-textio.ads" 52 0 0# 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "standard_error" defined at a-textio.ads:119, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__standard_error
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function standard_error #"a-textio.ads" 119 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate standard_error__function_guard #"a-textio.ads" 52 0 0# 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "current_input" defined at a-textio.ads:121, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_input
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_input #"a-textio.ads" 121 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate current_input__function_guard #"a-textio.ads" 52 0 0# 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "current_output" defined at a-textio.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_output
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_output #"a-textio.ads" 122 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate current_output__function_guard #"a-textio.ads" 52 0 0# 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for possibly declaring a logic function for "current_error" defined at a-textio.ads:123, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__current_error
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function current_error #"a-textio.ads" 123 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
 
 predicate current_error__function_guard #"a-textio.ads" 52 0 0# 
   (result : Ada__text_io__file_type.file_type) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__flush__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 142 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:142, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__flush__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 149 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:149, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 149 0 0# "model" "model_trace:3520" "name:To" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:149, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:150, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line_length__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 150 0 0# "model" "name:To" "model_trace:3538" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:150, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line_length__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 152 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:152, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 152 0 0# "model" "name:To" "model_trace:3565" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:152, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:153, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_page_length__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 153 0 0# "model" "name:To" "model_trace:3583" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:153, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_page_length__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:155, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__line_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 155 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:155, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__line_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:155, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function line_length #"a-textio.ads" 155 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate line_length__function_guard #"a-textio.ads" 64 0 0# 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:156, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use import "_gnatprove_standard".Main

 function line_length__2 #"a-textio.ads" 156 0 0# 
   (__void_param : unit) : int
 
 predicate line_length__2__function_guard #"a-textio.ads" 64 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:158, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__page_length__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 158 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:158, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__page_length__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:158, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function page_length #"a-textio.ads" 158 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate page_length__function_guard #"a-textio.ads" 64 0 0# 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:159, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use import "_gnatprove_standard".Main

 function page_length__2 #"a-textio.ads" 159 0 0# 
   (__void_param : unit) : int
 
 predicate page_length__2__function_guard #"a-textio.ads" 64 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 165 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 165 0 0# "model" "model_trace:3668" "name:Spacing" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:165, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:166, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_line__2__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 166 0 0# "model" "name:Spacing" "model_trace:3687" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:166, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_line__2__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 168 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:168, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 168 0 0# "model" "name:Spacing" "model_trace:3715" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:168, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "spacing" defined at a-textio.ads:169, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_line__2__spacing
 use import "_gnatprove_standard".Main

 function spacing #"a-textio.ads" 169 0 0# "model" "name:Spacing" "model_trace:3734" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "spacing" defined at a-textio.ads:169, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_line__2__spacing___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:171, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 171 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:171, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_line" defined at a-textio.ads:171, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_line
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_line #"a-textio.ads" 171 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate end_of_line__function_guard #"a-textio.ads" 52 0 0# 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "end_of_line__2" defined at a-textio.ads:172, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_line__2
 use import "_gnatprove_standard".Main

 function end_of_line__2 #"a-textio.ads" 172 0 0# 
   (__void_param : unit) : bool
 
 predicate end_of_line__2__function_guard #"a-textio.ads" 172 0 0# 
   (result : bool) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:174, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__new_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 174 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:174, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__new_page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:177, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__skip_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 177 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:177, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__skip_page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:180, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 180 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:180, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_page" defined at a-textio.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_page
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_page #"a-textio.ads" 180 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate end_of_page__function_guard #"a-textio.ads" 52 0 0# 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "end_of_page__2" defined at a-textio.ads:181, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_page__2
 use import "_gnatprove_standard".Main

 function end_of_page__2 #"a-textio.ads" 181 0 0# 
   (__void_param : unit) : bool
 
 predicate end_of_page__2__function_guard #"a-textio.ads" 181 0 0# 
   (result : bool) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:183, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__end_of_file__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 183 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:183, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__end_of_file__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "end_of_file" defined at a-textio.ads:183, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function end_of_file #"a-textio.ads" 183 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
 
 predicate end_of_file__function_guard #"a-textio.ads" 52 0 0# 
   (result : bool) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "end_of_file__2" defined at a-textio.ads:184, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__end_of_file__2
 use import "_gnatprove_standard".Main

 function end_of_file__2 #"a-textio.ads" 184 0 0# 
   (__void_param : unit) : bool
 
 predicate end_of_file__2__function_guard #"a-textio.ads" 184 0 0# 
   (result : bool) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 186 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:186, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 186 0 0# "model" "name:To" "model_trace:3903" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:186, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:187, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_col__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 187 0 0# "model" "name:To" "model_trace:3921" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:187, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_col__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 189 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:189, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 189 0 0# "model" "name:To" "model_trace:3948" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:189, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at a-textio.ads:190, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__set_line__2__to
 use import "_gnatprove_standard".Main

 function to__ #"a-textio.ads" 190 0 0# "model" "name:To" "model_trace:3966" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 68 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-textio.ads:190, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__set_line__2__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:192, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__col__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 192 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:192, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__col__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "col" defined at a-textio.ads:192, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__col
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function col #"a-textio.ads" 192 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate col__function_guard #"a-textio.ads" 68 0 0# 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "col__2" defined at a-textio.ads:193, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__col__2
 use import "_gnatprove_standard".Main

 function col__2 #"a-textio.ads" 193 0 0# 
   (__void_param : unit) : int
 
 predicate col__2__function_guard #"a-textio.ads" 68 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:195, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 195 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:195, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "line" defined at a-textio.ads:195, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function line #"a-textio.ads" 195 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate line__function_guard #"a-textio.ads" 68 0 0# 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "line__2" defined at a-textio.ads:196, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line__2
 use import "_gnatprove_standard".Main

 function line__2 #"a-textio.ads" 196 0 0# 
   (__void_param : unit) : int
 
 predicate line__2__function_guard #"a-textio.ads" 68 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:198, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__page__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 198 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:198, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__page__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "page" defined at a-textio.ads:198, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function page #"a-textio.ads" 198 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
 
 predicate page__function_guard #"a-textio.ads" 68 0 0# 
   (result : int) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "page__2" defined at a-textio.ads:199, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page__2
 use import "_gnatprove_standard".Main

 function page__2 #"a-textio.ads" 199 0 0# 
   (__void_param : unit) : int
 
 predicate page__2__function_guard #"a-textio.ads" 68 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:205, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 205 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:205, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 207 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:207, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__item
 use import "_gnatprove_standard".Main

 function item #"a-textio.ads" 207 0 0# "model" "name:Item" "model_trace:4125" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:207, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:208, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__2__item
 use import "_gnatprove_standard".Main

 function item #"a-textio.ads" 208 0 0# "model" "name:Item" "model_trace:4143" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:208, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:211, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__look_ahead__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 211 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:211, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:220, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_immediate__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 220 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:220, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:227, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_immediate__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 227 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:227, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:239, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 239 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:241, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 241 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:241, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__3__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 241 0 0# "model_projected" "name:Item" "model_trace:4386" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:241, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:242, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 242 0 0# "model_projected" "name:Item" "model_trace:4404" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:242, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:245, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 245 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:245, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-textio.ads:253, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__get_line__3__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 253 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:253, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__3__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line__3" defined at a-textio.ads:253, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__3
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 function get_line__3 #"a-textio.ads" 253 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
 
 predicate get_line__3__function_guard #"system.ads" 1 0 0# 
   (result : Standard__string.string) (file : Ada__text_io__file_type.file_type) 

end

(* Module for possibly declaring a logic function for "get_line__4" defined at a-textio.ads:256, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__4
 use import "_gnatprove_standard".Main
 use        Standard__string

 function get_line__4 #"a-textio.ads" 256 0 0# 
   (__void_param : unit) : Standard__string.string
 
 predicate get_line__4__function_guard #"system.ads" 1 0 0# 
   (result : Standard__string.string) (__void_param : unit) 

end

(* Module for defining the constant "file" defined at a-textio.ads:260, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-textio.ads" 260 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:260, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:261, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 261 0 0# "model_projected" "name:Item" "model_trace:4531" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:261, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:264, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put_line__2__item
 use import "_gnatprove_standard".Main
 use        Standard__string

 function item #"a-textio.ads" 264 0 0# "model_projected" "name:Item" "model_trace:4549" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:264, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put_line__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-textio.ads:439, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__write__2__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_array

 function item #"a-textio.ads" 439 0 0# "model_projected" "name:Item" "model_trace:5040" 
   : Ada__streams__stream_element_array.stream_element_array
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:439, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__write__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "eof_char" defined at a-textio.ads:460, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__eof_char
 use import "_gnatprove_standard".Main

 function eof_char #"a-textio.ads" 460 0 0# 
   (__void_param : unit) : int
 
 predicate eof_char__function_guard #"system.ads" 1 0 0# 
   (result : int) (__void_param : unit) 

end

(* Module for axiomatizing type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__integer_text_io__num
 use import "_gnatprove_standard".Main
 use import "int".Int

 type num #"a-tiinio.ads" 44 0 0# 
 
 function first #"a-tiinio.ads" 44 0 0# 
   : int =
  ( -2147483648 )
 
 function last #"a-tiinio.ads" 44 0 0# 
   : int =
  2147483647
 
 predicate in_range #"a-tiinio.ads" 44 0 0# 
   (x : int)  =
  #"a-tiinio.ads" 44 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = num, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type num__ref #"a-tiinio.ads" 44 0 0# =
  { mutable num__content "model_trace:" "name:" : num }
 
 function num__ref___projection #"a-tiinio.ads" 44 0 0# 
   (a : num__ref) : num =
  a.num__content
 
 meta "model_projection" function num__ref___projection
 
 meta "inline : no" function num__ref___projection
 
 val num__havoc #"a-tiinio.ads" 44 0 0# 
   (x : num__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__integer_text_io__num__rep
 use        Ada__integer_text_io__num
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Ada__integer_text_io__num.num, 
 predicate in_range = Ada__integer_text_io__num.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "file" defined at a-tiinio.ads:52 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__get__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-tiinio.ads" 52 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-tiinio.ads:52 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "width" defined at a-tiinio.ads:54 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__get__width
 use import "_gnatprove_standard".Main

 function width #"a-tiinio.ads" 54 0 0# "model" "model_trace:15609" "name:Width" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "width" defined at a-tiinio.ads:54 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__width___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "width" defined at a-tiinio.ads:58 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__get__2__width
 use import "_gnatprove_standard".Main

 function width #"a-tiinio.ads" 58 0 0# "model" "name:Width" "model_trace:15637" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "width" defined at a-tiinio.ads:58 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__2__width___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-tiinio.ads:61 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-tiinio.ads" 61 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-tiinio.ads:61 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-tiinio.ads:62 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__item
 use import "_gnatprove_standard".Main

 function item #"a-tiinio.ads" 62 0 0# "model" "name:Item" "model_trace:15665" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiinio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:62 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "width" defined at a-tiinio.ads:63 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__width
 use import "_gnatprove_standard".Main

 function width #"a-tiinio.ads" 63 0 0# "model" "name:Width" "model_trace:15674" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "width" defined at a-tiinio.ads:63 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__width___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "base" defined at a-tiinio.ads:64 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__base
 use import "_gnatprove_standard".Main

 function base #"a-tiinio.ads" 64 0 0# "model" "model_trace:15684" "name:Base" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 78 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at a-tiinio.ads:64 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-tiinio.ads:67 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__item
 use import "_gnatprove_standard".Main

 function item #"a-tiinio.ads" 67 0 0# "model" "name:Item" "model_trace:15703" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiinio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:67 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "width" defined at a-tiinio.ads:68 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__width
 use import "_gnatprove_standard".Main

 function width #"a-tiinio.ads" 68 0 0# "model" "name:Width" "model_trace:15712" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "width" defined at a-tiinio.ads:68 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__width___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "base" defined at a-tiinio.ads:69 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__2__base
 use import "_gnatprove_standard".Main

 function base #"a-tiinio.ads" 69 0 0# "model" "name:Base" "model_trace:15722" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 78 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at a-tiinio.ads:69 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__2__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "from" defined at a-tiinio.ads:72 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__get__3__from
 use import "_gnatprove_standard".Main
 use        Standard__string

 function from #"a-tiinio.ads" 72 0 0# "model_projected" "model_trace:15741" "name:From" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "from" defined at a-tiinio.ads:72 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__3__from___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-tiinio.ads:78 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__3__item
 use import "_gnatprove_standard".Main

 function item #"a-tiinio.ads" 78 0 0# "model" "name:Item" "model_trace:15786" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiinio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:78 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "base" defined at a-tiinio.ads:79 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__integer_text_io__put__3__base
 use import "_gnatprove_standard".Main

 function base #"a-tiinio.ads" 79 0 0# "model" "name:Base" "model_trace:15795" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 78 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at a-tiinio.ads:79 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__3__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "num" defined at a-tiflio.ads:44 instantiated at a-flteio.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__float_text_io__num
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type num #"a-tiflio.ads" 44 0 0# 
 
 function first #"a-tiflio.ads" 44 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"a-tiflio.ads" 44 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"a-tiflio.ads" 44 0 0# 
   (x : Float32.t)  =
  #"a-tiflio.ads" 44 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = num, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type num__ref #"a-tiflio.ads" 44 0 0# =
  { mutable num__content "model_trace:" "name:" : num }
 
 function num__ref___2__projection #"a-tiflio.ads" 44 0 0# 
   (a : num__ref) : num =
  a.num__content
 
 meta "model_projection" function num__ref___2__projection
 
 meta "inline : no" function num__ref___2__projection
 
 val num__havoc #"a-tiflio.ads" 44 0 0# 
   (x : num__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "num" defined at a-tiflio.ads:44 instantiated at a-flteio.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__float_text_io__num__rep
 use        Ada__float_text_io__num
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Ada__float_text_io__num.num, 
 predicate in_range = Ada__float_text_io__num.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "file" defined at a-tiflio.ads:53 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__get__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-tiflio.ads" 53 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-tiflio.ads:53 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "width" defined at a-tiflio.ads:55 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__get__width
 use import "_gnatprove_standard".Main

 function width #"a-tiflio.ads" 55 0 0# "model" "name:Width" "model_trace:16652" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "width" defined at a-tiflio.ads:55 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__width___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "width" defined at a-tiflio.ads:59 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__get__2__width
 use import "_gnatprove_standard".Main

 function width #"a-tiflio.ads" 59 0 0# "model" "name:Width" "model_trace:16680" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "width" defined at a-tiflio.ads:59 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__2__width___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "file" defined at a-tiflio.ads:62 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 function file #"a-tiflio.ads" 62 0 0# 
   : Ada__text_io__file_type.file_type
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-tiflio.ads:62 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-tiflio.ads:63 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__item
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function item #"a-tiflio.ads" 63 0 0# "model" "name:Item" "model_trace:16708" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiflio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiflio.ads:63 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fore" defined at a-tiflio.ads:64 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__fore
 use import "_gnatprove_standard".Main

 function fore #"a-tiflio.ads" 64 0 0# "model" "model_trace:16717" "name:Fore" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fore" defined at a-tiflio.ads:64 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__fore___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "aft" defined at a-tiflio.ads:65 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__aft
 use import "_gnatprove_standard".Main

 function aft #"a-tiflio.ads" 65 0 0# "model" "model_trace:16727" "name:Aft" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "aft" defined at a-tiflio.ads:65 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__aft___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "exp" defined at a-tiflio.ads:66 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__exp
 use import "_gnatprove_standard".Main

 function exp #"a-tiflio.ads" 66 0 0# "model" "model_trace:16737" "name:Exp" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "exp" defined at a-tiflio.ads:66 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__exp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-tiflio.ads:69 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__2__item
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function item #"a-tiflio.ads" 69 0 0# "model" "name:Item" "model_trace:16756" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiflio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiflio.ads:69 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "fore" defined at a-tiflio.ads:70 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__2__fore
 use import "_gnatprove_standard".Main

 function fore #"a-tiflio.ads" 70 0 0# "model" "name:Fore" "model_trace:16765" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "fore" defined at a-tiflio.ads:70 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__2__fore___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "aft" defined at a-tiflio.ads:71 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__2__aft
 use import "_gnatprove_standard".Main

 function aft #"a-tiflio.ads" 71 0 0# "model" "name:Aft" "model_trace:16775" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "aft" defined at a-tiflio.ads:71 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__2__aft___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "exp" defined at a-tiflio.ads:72 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__2__exp
 use import "_gnatprove_standard".Main

 function exp #"a-tiflio.ads" 72 0 0# "model" "name:Exp" "model_trace:16785" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "exp" defined at a-tiflio.ads:72 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__2__exp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "from" defined at a-tiflio.ads:75 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__get__3__from
 use import "_gnatprove_standard".Main
 use        Standard__string

 function from #"a-tiflio.ads" 75 0 0# "model_projected" "name:From" "model_trace:16804" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "from" defined at a-tiflio.ads:75 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__3__from___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "item" defined at a-tiflio.ads:81 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__3__item
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function item #"a-tiflio.ads" 81 0 0# "model" "name:Item" "model_trace:16849" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiflio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiflio.ads:81 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "aft" defined at a-tiflio.ads:82 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__3__aft
 use import "_gnatprove_standard".Main

 function aft #"a-tiflio.ads" 82 0 0# "model" "name:Aft" "model_trace:16858" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "aft" defined at a-tiflio.ads:82 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__3__aft___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "exp" defined at a-tiflio.ads:83 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__float_text_io__put__3__exp
 use import "_gnatprove_standard".Main

 function exp #"a-tiflio.ads" 83 0 0# "model" "name:Exp" "model_trace:16868" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "exp" defined at a-tiflio.ads:83 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__3__exp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "tank_height_float" defined at tank1.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Tank1__tank_height_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tank_height_float #"tank1.ads" 8 0 0# 
 
 function first #"tank1.ads" 8 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"tank1.ads" 8 0 0# 
   : Float32.t =
  (20.0:Float32.t)
 
 predicate in_range #"tank1.ads" 8 0 0# 
   (x : Float32.t)  =
  #"tank1.ads" 8 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = tank_height_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tank_height_float__ref #"tank1.ads" 8 0 0# =
  { mutable tank_height_float__content "model_trace:" "name:" : tank_height_float }
 
 function tank_height_float__ref___projection #"tank1.ads" 8 0 0# 
   (a : tank_height_float__ref) : tank_height_float =
  a.tank_height_float__content
 
 meta "model_projection" function tank_height_float__ref___projection
 
 meta "inline : no" function tank_height_float__ref___projection
 
 val tank_height_float__havoc #"tank1.ads" 8 0 0# 
   (x : tank_height_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tank_height_float" defined at tank1.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Tank1__tank_height_float__rep
 use        Tank1__tank_height_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Tank1__tank_height_float.tank_height_float, 
 predicate in_range = Tank1__tank_height_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "tank_area_float" defined at tank1.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Tank1__tank_area_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tank_area_float #"tank1.ads" 9 0 0# 
 
 function first #"tank1.ads" 9 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"tank1.ads" 9 0 0# 
   : Float32.t =
  (10.0:Float32.t)
 
 predicate in_range #"tank1.ads" 9 0 0# 
   (x : Float32.t)  =
  #"tank1.ads" 9 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = tank_area_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tank_area_float__ref #"tank1.ads" 9 0 0# =
  { mutable tank_area_float__content "model_trace:" "name:" : tank_area_float }
 
 function tank_area_float__ref___projection #"tank1.ads" 9 0 0# 
   (a : tank_area_float__ref) : tank_area_float =
  a.tank_area_float__content
 
 meta "model_projection" function tank_area_float__ref___projection
 
 meta "inline : no" function tank_area_float__ref___projection
 
 val tank_area_float__havoc #"tank1.ads" 9 0 0# 
   (x : tank_area_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tank_area_float" defined at tank1.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Tank1__tank_area_float__rep
 use        Tank1__tank_area_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Tank1__tank_area_float.tank_area_float, 
 predicate in_range = Tank1__tank_area_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "tank_volume_float" defined at tank1.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Tank1__tank_volume_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tank_volume_float #"tank1.ads" 10 0 0# 
 
 function first #"tank1.ads" 10 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"tank1.ads" 10 0 0# 
   : Float32.t =
  (200.0:Float32.t)
 
 predicate in_range #"tank1.ads" 10 0 0# 
   (x : Float32.t)  =
  #"tank1.ads" 10 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = tank_volume_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tank_volume_float__ref #"tank1.ads" 10 0 0# =
  { mutable tank_volume_float__content "model_trace:" "name:" : tank_volume_float }
 
 function tank_volume_float__ref___projection #"tank1.ads" 10 0 0# 
   (a : tank_volume_float__ref) : tank_volume_float =
  a.tank_volume_float__content
 
 meta "model_projection" function tank_volume_float__ref___projection
 
 meta "inline : no" function tank_volume_float__ref___projection
 
 val tank_volume_float__havoc #"tank1.ads" 10 0 0# 
   (x : tank_volume_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tank_volume_float" defined at tank1.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Tank1__tank_volume_float__rep
 use        Tank1__tank_volume_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Tank1__tank_volume_float.tank_volume_float, 
 predicate in_range = Tank1__tank_volume_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "crossection_area" defined at tank1.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Tank1__initialize__crossection_area
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function crossection_area #"tank1.ads" 13 0 0# "model" "model_trace:11428" "name:Crossection_Area" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank1.ads" 9 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "crossection_area" defined at tank1.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank1__initialize__crossection_area___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "height" defined at tank1.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Tank1__initialize__height
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function height #"tank1.ads" 14 0 0# "model" "model_trace:11437" "name:Height" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank1.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "height" defined at tank1.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank1__initialize__height___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "high_sensor_loc" defined at tank1.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Tank1__initialize__high_sensor_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function high_sensor_loc #"tank1.ads" 15 0 0# "model" "model_trace:11446" "name:High_Sensor_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank1.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "high_sensor_loc" defined at tank1.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank1__initialize__high_sensor_loc___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "low_sensor_loc" defined at tank1.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Tank1__initialize__low_sensor_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function low_sensor_loc #"tank1.ads" 16 0 0# "model" "model_trace:11455" "name:Low_Sensor_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank1.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "low_sensor_loc" defined at tank1.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank1__initialize__low_sensor_loc___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "flow_in" defined at tank1.ads:42, created in Gnat2Why.Decls.Translate_Constant *)
module Tank1__liquid_in__flow_in
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function flow_in #"tank1.ads" 42 0 0# "model" "model_trace:11550" "name:Flow_In" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank1.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "flow_in" defined at tank1.ads:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank1__liquid_in__flow_in___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "flow_out" defined at tank1.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Tank1__liquid_out__flow_out
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function flow_out #"tank1.ads" 51 0 0# "model" "model_trace:11593" "name:Flow_Out" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank1.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "flow_out" defined at tank1.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank1__liquid_out__flow_out___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "tank_height_float" defined at tank2.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Tank2__tank_height_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tank_height_float #"tank2.ads" 8 0 0# 
 
 function first #"tank2.ads" 8 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"tank2.ads" 8 0 0# 
   : Float32.t =
  (20.0:Float32.t)
 
 predicate in_range #"tank2.ads" 8 0 0# 
   (x : Float32.t)  =
  #"tank2.ads" 8 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = tank_height_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tank_height_float__ref #"tank2.ads" 8 0 0# =
  { mutable tank_height_float__content "model_trace:" "name:" : tank_height_float }
 
 function tank_height_float__ref___2__projection #"tank2.ads" 8 0 0# 
   (a : tank_height_float__ref) : tank_height_float =
  a.tank_height_float__content
 
 meta "model_projection" function tank_height_float__ref___2__projection
 
 meta "inline : no" function tank_height_float__ref___2__projection
 
 val tank_height_float__havoc #"tank2.ads" 8 0 0# 
   (x : tank_height_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tank_height_float" defined at tank2.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Tank2__tank_height_float__rep
 use        Tank2__tank_height_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Tank2__tank_height_float.tank_height_float, 
 predicate in_range = Tank2__tank_height_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "tank_area_float" defined at tank2.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Tank2__tank_area_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tank_area_float #"tank2.ads" 9 0 0# 
 
 function first #"tank2.ads" 9 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"tank2.ads" 9 0 0# 
   : Float32.t =
  (10.0:Float32.t)
 
 predicate in_range #"tank2.ads" 9 0 0# 
   (x : Float32.t)  =
  #"tank2.ads" 9 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = tank_area_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tank_area_float__ref #"tank2.ads" 9 0 0# =
  { mutable tank_area_float__content "model_trace:" "name:" : tank_area_float }
 
 function tank_area_float__ref___2__projection #"tank2.ads" 9 0 0# 
   (a : tank_area_float__ref) : tank_area_float =
  a.tank_area_float__content
 
 meta "model_projection" function tank_area_float__ref___2__projection
 
 meta "inline : no" function tank_area_float__ref___2__projection
 
 val tank_area_float__havoc #"tank2.ads" 9 0 0# 
   (x : tank_area_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tank_area_float" defined at tank2.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Tank2__tank_area_float__rep
 use        Tank2__tank_area_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Tank2__tank_area_float.tank_area_float, 
 predicate in_range = Tank2__tank_area_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "tank_volume_float" defined at tank2.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Tank2__tank_volume_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tank_volume_float #"tank2.ads" 10 0 0# 
 
 function first #"tank2.ads" 10 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"tank2.ads" 10 0 0# 
   : Float32.t =
  (200.0:Float32.t)
 
 predicate in_range #"tank2.ads" 10 0 0# 
   (x : Float32.t)  =
  #"tank2.ads" 10 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = tank_volume_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tank_volume_float__ref #"tank2.ads" 10 0 0# =
  { mutable tank_volume_float__content "model_trace:" "name:" : tank_volume_float }
 
 function tank_volume_float__ref___2__projection #"tank2.ads" 10 0 0# 
   (a : tank_volume_float__ref) : tank_volume_float =
  a.tank_volume_float__content
 
 meta "model_projection" function tank_volume_float__ref___2__projection
 
 meta "inline : no" function tank_volume_float__ref___2__projection
 
 val tank_volume_float__havoc #"tank2.ads" 10 0 0# 
   (x : tank_volume_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tank_volume_float" defined at tank2.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Tank2__tank_volume_float__rep
 use        Tank2__tank_volume_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Tank2__tank_volume_float.tank_volume_float, 
 predicate in_range = Tank2__tank_volume_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "crossection_area" defined at tank2.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Tank2__initialize__crossection_area
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function crossection_area #"tank2.ads" 13 0 0# "model" "name:Crossection_Area" "model_trace:11882" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank2.ads" 9 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "crossection_area" defined at tank2.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank2__initialize__crossection_area___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "height" defined at tank2.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Tank2__initialize__height
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function height #"tank2.ads" 14 0 0# "model" "name:Height" "model_trace:11891" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank2.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "height" defined at tank2.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank2__initialize__height___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "high_sensor_loc" defined at tank2.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Tank2__initialize__high_sensor_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function high_sensor_loc #"tank2.ads" 15 0 0# "model" "name:High_Sensor_Loc" "model_trace:11900" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank2.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "high_sensor_loc" defined at tank2.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank2__initialize__high_sensor_loc___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "mid_sensor_loc" defined at tank2.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Tank2__initialize__mid_sensor_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function mid_sensor_loc #"tank2.ads" 16 0 0# "model" "model_trace:11909" "name:Mid_Sensor_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank2.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "mid_sensor_loc" defined at tank2.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank2__initialize__mid_sensor_loc___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "low_sensor_loc" defined at tank2.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Tank2__initialize__low_sensor_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function low_sensor_loc #"tank2.ads" 17 0 0# "model" "name:Low_Sensor_Loc" "model_trace:11918" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank2.ads" 8 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "low_sensor_loc" defined at tank2.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank2__initialize__low_sensor_loc___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "flow_in" defined at tank2.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Tank2__liquid_in__flow_in
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function flow_in #"tank2.ads" 47 0 0# "model" "name:Flow_In" "model_trace:12027" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank2.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "flow_in" defined at tank2.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank2__liquid_in__flow_in___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "flow_out" defined at tank2.ads:56, created in Gnat2Why.Decls.Translate_Constant *)
module Tank2__liquid_out__flow_out
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function flow_out #"tank2.ads" 56 0 0# "model" "name:Flow_Out" "model_trace:12070" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"tank2.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "flow_out" defined at tank2.ads:56, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tank2__liquid_out__flow_out___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "hs_status" defined at control.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Control__tank1_control__hs_status
 use import "_gnatprove_standard".Main

 function hs_status #"control.ads" 9 0 0# "model" "model_trace:12310" "name:HS_Status" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 9 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "hs_status" defined at control.ads:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank1_control__hs_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "ls_status" defined at control.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Control__tank1_control__ls_status
 use import "_gnatprove_standard".Main

 function ls_status #"control.ads" 10 0 0# "model" "model_trace:12319" "name:LS_Status" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 10 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "ls_status" defined at control.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank1_control__ls_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "hs_status" defined at control.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Control__tank2_control__hs_status
 use import "_gnatprove_standard".Main

 function hs_status #"control.ads" 27 0 0# "model" "name:HS_Status" "model_trace:12419" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 27 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "hs_status" defined at control.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank2_control__hs_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "ms_status" defined at control.ads:28, created in Gnat2Why.Decls.Translate_Constant *)
module Control__tank2_control__ms_status
 use import "_gnatprove_standard".Main

 function ms_status #"control.ads" 28 0 0# "model" "model_trace:12428" "name:MS_Status" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 28 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "ms_status" defined at control.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank2_control__ms_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "ls_status" defined at control.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Control__tank2_control__ls_status
 use import "_gnatprove_standard".Main

 function ls_status #"control.ads" 29 0 0# "model" "name:LS_Status" "model_trace:12437" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 29 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "ls_status" defined at control.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank2_control__ls_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "tank1_valve" defined at control.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Control__tank2_control__tank1_valve
 use import "_gnatprove_standard".Main

 function tank1_valve #"control.ads" 30 0 0# "model" "model_trace:12446" "name:Tank1_Valve" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 30 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "tank1_valve" defined at control.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank2_control__tank1_valve___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "Tpump_typeB" defined at pump.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pump__Tpump_typeB
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tpump_typeB #"pump.ads" 11 0 0# 
 
 function first #"pump.ads" 11 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"pump.ads" 11 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"pump.ads" 11 0 0# 
   (x : Float32.t)  =
  #"pump.ads" 11 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = tpump_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpump_typeB__ref #"pump.ads" 11 0 0# =
  { mutable tpump_typeB__content "model_trace:" "name:" : tpump_typeB }
 
 function tpump_typeB__ref___projection #"pump.ads" 11 0 0# 
   (a : tpump_typeB__ref) : tpump_typeB =
  a.tpump_typeB__content
 
 meta "model_projection" function tpump_typeB__ref___projection
 
 meta "inline : no" function tpump_typeB__ref___projection
 
 val tpump_typeB__havoc #"pump.ads" 11 0 0# 
   (x : tpump_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tpump_typeB" defined at pump.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pump__Tpump_typeB__rep
 use        Pump__Tpump_typeB
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Pump__Tpump_typeB.tpump_typeB, 
 predicate in_range = Pump__Tpump_typeB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "pump_type" defined at pump.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pump__pump_type
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type pump_type #"pump.ads" 11 0 0# 
 
 function first #"pump.ads" 11 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"pump.ads" 11 0 0# 
   : Float32.t =
  (20.0:Float32.t)
 
 predicate in_range #"pump.ads" 11 0 0# 
   (x : Float32.t)  =
  #"pump.ads" 11 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = pump_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pump_type__ref #"pump.ads" 11 0 0# =
  { mutable pump_type__content "model_trace:" "name:" : pump_type }
 
 function pump_type__ref___projection #"pump.ads" 11 0 0# 
   (a : pump_type__ref) : pump_type =
  a.pump_type__content
 
 meta "model_projection" function pump_type__ref___projection
 
 meta "inline : no" function pump_type__ref___projection
 
 val pump_type__havoc #"pump.ads" 11 0 0# 
   (x : pump_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pump_type" defined at pump.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Pump__pump_type__rep
 use        Pump__pump_type
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Pump__pump_type.pump_type, 
 predicate in_range = Pump__pump_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "pump" defined at pump.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__pump_operate__pump
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function pump #"pump.ads" 16 0 0# "model" "model_trace:12573" "name:Pump" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump" defined at pump.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__pump_operate__pump___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "enable" defined at pump.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__pump_operate__enable
 use import "_gnatprove_standard".Main

 function enable #"pump.ads" 17 0 0# "model" "model_trace:12582" "name:Enable" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 17 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "enable" defined at pump.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__pump_operate__enable___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "pump" defined at pump.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__valid_pump__pump
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function pump #"pump.ads" 24 0 0# "model" "name:Pump" "model_trace:12627" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump" defined at pump.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__valid_pump__pump___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "valid_pump" defined at pump.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__valid_pump
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function valid_pump #"pump.ads" 24 0 0# 
   (pump : Float32.t) : bool
 
 predicate valid_pump__function_guard #"pump.ads" 11 0 0# 
   (result : bool) (pump : Float32.t) 

end

(* Module for defining the constant "flow" defined at pump.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Pump__valid_flow__flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function flow #"pump.ads" 32 0 0# "model" "model_trace:12669" "name:Flow" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "flow" defined at pump.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pump__valid_flow__flow___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "valid_flow" defined at pump.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__valid_flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function valid_flow #"pump.ads" 32 0 0# 
   (flow : Float32.t) : bool
 
 predicate valid_flow__function_guard #"system.ads" 1 0 0# 
   (result : bool) (flow : Float32.t) 

end

(* Module for possibly declaring a logic function for "pump_operate" defined at pump.ads:16, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pump__pump_operate
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function pump_operate #"pump.ads" 16 0 0# 
   (pump : Float32.t) (enable : bool) : Float32.t
 
 predicate pump_operate__function_guard #"system.ads" 1 0 0# 
   (result : Float32.t) (pump : Float32.t) (enable : bool) 

end

(* Module for axiomatizing type "Tvalve_typeB" defined at valve.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Valve__Tvalve_typeB
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type tvalve_typeB #"valve.ads" 11 0 0# 
 
 function first #"valve.ads" 11 0 0# 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last #"valve.ads" 11 0 0# 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range #"valve.ads" 11 0 0# 
   (x : Float32.t)  =
  #"valve.ads" 11 0 0# (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = tvalve_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tvalve_typeB__ref #"valve.ads" 11 0 0# =
  { mutable tvalve_typeB__content "model_trace:" "name:" : tvalve_typeB }
 
 function tvalve_typeB__ref___projection #"valve.ads" 11 0 0# 
   (a : tvalve_typeB__ref) : tvalve_typeB =
  a.tvalve_typeB__content
 
 meta "model_projection" function tvalve_typeB__ref___projection
 
 meta "inline : no" function tvalve_typeB__ref___projection
 
 val tvalve_typeB__havoc #"valve.ads" 11 0 0# 
   (x : tvalve_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tvalve_typeB" defined at valve.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Valve__Tvalve_typeB__rep
 use        Valve__Tvalve_typeB
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Valve__Tvalve_typeB.tvalve_typeB, 
 predicate in_range = Valve__Tvalve_typeB.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "valve_type" defined at valve.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Valve__valve_type
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type valve_type #"valve.ads" 11 0 0# 
 
 function first #"valve.ads" 11 0 0# 
   : Float32.t =
  (0.0E-1:Float32.t)
 
 function last #"valve.ads" 11 0 0# 
   : Float32.t =
  (20.0:Float32.t)
 
 predicate in_range #"valve.ads" 11 0 0# 
   (x : Float32.t)  =
  #"valve.ads" 11 0 0# ( (Float32.t'isFinite x) && ( (Float32.le first x) /\ (Float32.le x last) ) )
 
 clone export "ada__model".Static_Float32 with
 type t = valve_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type valve_type__ref #"valve.ads" 11 0 0# =
  { mutable valve_type__content "model_trace:" "name:" : valve_type }
 
 function valve_type__ref___projection #"valve.ads" 11 0 0# 
   (a : valve_type__ref) : valve_type =
  a.valve_type__content
 
 meta "model_projection" function valve_type__ref___projection
 
 meta "inline : no" function valve_type__ref___projection
 
 val valve_type__havoc #"valve.ads" 11 0 0# 
   (x : valve_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "valve_type" defined at valve.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Valve__valve_type__rep
 use        Valve__valve_type
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Valve__valve_type.valve_type, 
 predicate in_range = Valve__valve_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "valve" defined at valve.ads:15, created in Gnat2Why.Decls.Translate_Constant *)
module Valve__valve_operate__valve
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function valve #"valve.ads" 15 0 0# "model" "model_trace:12759" "name:Valve" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"valve.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "valve" defined at valve.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Valve__valve_operate__valve___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "enable" defined at valve.ads:16, created in Gnat2Why.Decls.Translate_Constant *)
module Valve__valve_operate__enable
 use import "_gnatprove_standard".Main

 function enable #"valve.ads" 16 0 0# "model" "name:Enable" "model_trace:12768" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS #"valve.ads" 16 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "enable" defined at valve.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Valve__valve_operate__enable___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "valve" defined at valve.ads:23, created in Gnat2Why.Decls.Translate_Constant *)
module Valve__valid_valve__valve
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function valve #"valve.ads" 23 0 0# "model" "name:Valve" "model_trace:12813" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"valve.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "valve" defined at valve.ads:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Valve__valid_valve__valve___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "valid_valve" defined at valve.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Valve__valid_valve
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function valid_valve #"valve.ads" 23 0 0# 
   (valve : Float32.t) : bool
 
 predicate valid_valve__function_guard #"valve.ads" 11 0 0# 
   (result : bool) (valve : Float32.t) 

end

(* Module for defining the constant "flow" defined at valve.ads:29, created in Gnat2Why.Decls.Translate_Constant *)
module Valve__valid_flow__flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function flow #"valve.ads" 29 0 0# "model" "name:Flow" "model_trace:12846" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "flow" defined at valve.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Valve__valid_flow__flow___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "valid_flow" defined at valve.ads:29, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Valve__valid_flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function valid_flow #"valve.ads" 29 0 0# 
   (flow : Float32.t) : bool
 
 predicate valid_flow__function_guard #"system.ads" 1 0 0# 
   (result : bool) (flow : Float32.t) 

end

(* Module for possibly declaring a logic function for "valve_operate" defined at valve.ads:15, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Valve__valve_operate
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function valve_operate #"valve.ads" 15 0 0# 
   (valve : Float32.t) (enable : bool) : Float32.t
 
 predicate valve_operate__function_guard #"system.ads" 1 0 0# 
   (result : Float32.t) (valve : Float32.t) (enable : bool) 

end

(* Module for defining the constant "the_pump" defined at tts.adb:16, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__the_pump
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function the_pump #"tts.adb" 16 0 0# "model" "model_trace:2333" "name:The_Pump" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"pump.ads" 11 0 0# 
   : int

end

(* Module for defining the constant "t1_valve" defined at tts.adb:21, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t1_valve
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t1_valve #"tts.adb" 21 0 0# "model" "model_trace:2364" "name:T1_Valve" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"valve.ads" 11 0 0# 
   : int

end

(* Module for defining the constant "prod_valve" defined at tts.adb:26, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__prod_valve
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function prod_valve #"tts.adb" 26 0 0# "model" "model_trace:2395" "name:Prod_Valve" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"valve.ads" 11 0 0# 
   : int

end

(* Module for defining the constant "emer_valve" defined at tts.adb:31, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__emer_valve
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function emer_valve #"tts.adb" 31 0 0# "model" "model_trace:2425" "name:Emer_Valve" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"valve.ads" 11 0 0# 
   : int

end

(* Module for defining the constant "t1_crossection" defined at tts.adb:36, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t1_crossection
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t1_crossection #"tts.adb" 36 0 0# "model" "model_trace:2456" "name:T1_Crossection" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t1_height" defined at tts.adb:37, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t1_height
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t1_height #"tts.adb" 37 0 0# "model" "model_trace:2466" "name:T1_Height" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t1_hs_loc" defined at tts.adb:38, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t1_hs_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t1_hs_loc #"tts.adb" 38 0 0# "model" "model_trace:2476" "name:T1_HS_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t1_ls_loc" defined at tts.adb:39, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t1_ls_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t1_ls_loc #"tts.adb" 39 0 0# "model" "model_trace:2486" "name:T1_LS_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t2_crossection" defined at tts.adb:42, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t2_crossection
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t2_crossection #"tts.adb" 42 0 0# "model" "model_trace:2496" "name:T2_Crossection" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t2_height" defined at tts.adb:43, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t2_height
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t2_height #"tts.adb" 43 0 0# "model" "model_trace:2506" "name:T2_Height" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t2_hs_loc" defined at tts.adb:44, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t2_hs_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t2_hs_loc #"tts.adb" 44 0 0# "model" "model_trace:2516" "name:T2_HS_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t2_ms_loc" defined at tts.adb:45, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t2_ms_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t2_ms_loc #"tts.adb" 45 0 0# "model" "model_trace:2526" "name:T2_MS_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for defining the constant "t2_ls_loc" defined at tts.adb:46, created in Gnat2Why.Decls.Translate_Constant *)
module Tts__t2_ls_loc
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function t2_ls_loc #"tts.adb" 46 0 0# "model" "model_trace:2536" "name:T2_LS_Loc" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module for axiomatizing type "T1b" defined at tts.adb:85, created in Gnat2Why.Types.Translate_Type *)
module Tts__L_1__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t1b #"tts.adb" 85 0 0# 
 
 function first #"tts.adb" 85 0 0# 
   : int =
  1
 
 function last #"tts.adb" 85 0 0# 
   : int =
  50
 
 predicate in_range #"tts.adb" 85 0 0# 
   (x : int)  =
  #"tts.adb" 85 0 0# ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t1b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t1b__ref #"tts.adb" 85 0 0# =
  { mutable t1b__content "model_trace:" "name:" : t1b }
 
 function t1b__ref___projection #"tts.adb" 85 0 0# 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref___projection
 
 meta "inline : no" function t1b__ref___projection
 
 val t1b__havoc #"tts.adb" 85 0 0# 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T1b" defined at tts.adb:85, created in Gnat2Why.Types.Translate_Type *)
module Tts__L_1__T1b__rep
 use        Tts__L_1__T1b
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Tts__L_1__T1b.t1b, 
 predicate in_range = Tts__L_1__T1b.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end
(* Module for defining a ref holding the value of variable "stream" defined at a-stream.ads:58, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__stream
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 val stream__split_fields #"a-stream.ads" 58 0 0# "model_projected" "model_trace:5348" "name:Stream"  : Ada__streams__root_stream_type.__split_fields__ref 
 
 function stream__attr__tag #"a-stream.ads" 58 0 0# 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 58 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at a-stream.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-stream.ads:59, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val item #"a-stream.ads" 59 0 0# "model_projected" "model_trace:5357" "name:Item"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function item__first #"a-stream.ads" 59 0 0# "model_projected" "name:Item" "model_trace:5357'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function item__last #"a-stream.ads" 59 0 0# "model_projected" "name:Item" "model_trace:5357'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-stream.ads:59, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-stream.ads:60, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read__last
 use import "_gnatprove_standard".Main

 val last #"a-stream.ads" 60 0 0# "model_projected" "model_trace:5366" "name:Last"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-stream.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "stream" defined at a-stream.ads:64, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__write__stream
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 val stream__split_fields #"a-stream.ads" 64 0 0# "model_projected" "name:Stream" "model_trace:5384"  : Ada__streams__root_stream_type.__split_fields__ref 
 
 function stream__attr__tag #"a-stream.ads" 64 0 0# 
   : int
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 64 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "stream" defined at a-stream.ads:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__write__stream___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at a-stream.ads:78, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__read_sea__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val v #"a-stream.ads" 78 0 0# "model_projected" "model_trace:5433" "name:V"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function v__first #"a-stream.ads" 78 0 0# "model_projected" "name:V" "model_trace:5433'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function v__last #"a-stream.ads" 78 0 0# "model_projected" "name:V" "model_trace:5433'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__read_sea__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "v" defined at a-stream.ads:84, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__streams__stream_element_arraySR__v
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val v #"a-stream.ads" 84 0 0#  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function v__first #"a-stream.ads" 84 0 0# 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function v__last #"a-stream.ads" 84 0 0# 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "v" defined at a-stream.ads:84, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__streams__stream_element_arraySR__v___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:87, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__create__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 87 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__create__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:93, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__open__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 93 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:93, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__open__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:98, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__close__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 98 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__close__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:99, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__delete__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 99 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:99, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__delete__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:100, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__reset__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 100 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "file" defined at a-textio.ads:101, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__reset__2__file
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val file #"a-textio.ads" 101 0 0#  : Ada__text_io__file_type.file_type__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 52 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "file" defined at a-textio.ads:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__reset__2__file___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:205, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 205 0 0# "model_projected" "name:Item" "model_trace:4080"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:205, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:206, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 206 0 0# "model_projected" "name:Item" "model_trace:4098"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:206, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:212, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 212 0 0# "model_projected" "name:Item" "model_trace:4170"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:212, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at a-textio.ads:213, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__end_of_line
 use import "_gnatprove_standard".Main

 val end_of_line #"a-textio.ads" 213 0 0# "model_projected" "model_trace:4179" "name:End_Of_Line"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 213 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "end_of_line" defined at a-textio.ads:213, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__end_of_line___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:216, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 216 0 0# "model_projected" "name:Item" "model_trace:4197"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:216, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "end_of_line" defined at a-textio.ads:217, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__look_ahead__2__end_of_line
 use import "_gnatprove_standard".Main

 val end_of_line #"a-textio.ads" 217 0 0# "model_projected" "name:End_Of_Line" "model_trace:4206"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 217 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "end_of_line" defined at a-textio.ads:217, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__look_ahead__2__end_of_line___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:221, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 221 0 0# "model_projected" "name:Item" "model_trace:4233"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:221, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:224, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__2__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 224 0 0# "model_projected" "name:Item" "model_trace:4251"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:224, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:228, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__3__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 228 0 0# "model_projected" "name:Item" "model_trace:4278"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:228, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "available" defined at a-textio.ads:229, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__3__available
 use import "_gnatprove_standard".Main

 val available #"a-textio.ads" 229 0 0# "model_projected" "model_trace:4287" "name:Available"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 229 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "available" defined at a-textio.ads:229, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__3__available___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:232, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__4__item
 use import "_gnatprove_standard".Main

 val item #"a-textio.ads" 232 0 0# "model_projected" "name:Item" "model_trace:4305"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:232, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__4__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "available" defined at a-textio.ads:233, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_immediate__4__available
 use import "_gnatprove_standard".Main

 val available #"a-textio.ads" 233 0 0# "model_projected" "name:Available" "model_trace:4314"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 233 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "available" defined at a-textio.ads:233, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_immediate__4__available___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:239, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__3__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 239 0 0# "model_projected" "name:Item" "model_trace:4341"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 239 0 0# "model_projected" "name:Item" "model_trace:4341'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 239 0 0# "model_projected" "name:Item" "model_trace:4341'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:239, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:240, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get__4__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 240 0 0# "model_projected" "name:Item" "model_trace:4359"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 240 0 0# "model_projected" "name:Item" "model_trace:4359'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 240 0 0# "model_projected" "name:Item" "model_trace:4359'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:240, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get__4__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:246, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 246 0 0# "model_projected" "name:Item" "model_trace:4431"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 246 0 0# "model_projected" "name:Item" "model_trace:4431'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 246 0 0# "model_projected" "name:Item" "model_trace:4431'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:246, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:247, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 247 0 0# "model_projected" "name:Last" "model_trace:4440"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:247, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:250, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val item #"a-textio.ads" 250 0 0# "model_projected" "name:Item" "model_trace:4458"  : Array__Int__Standard__character.map__ref 
 
 function item__first #"a-textio.ads" 250 0 0# "model_projected" "name:Item" "model_trace:4458'First" 
   : Standard__integer.integer
 
 function item__last #"a-textio.ads" 250 0 0# "model_projected" "name:Item" "model_trace:4458'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:250, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:251, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 251 0 0# "model_projected" "name:Last" "model_trace:4467"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:251, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_wcem" defined at a-textio.ads:362, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__default_wcem
 use import "_gnatprove_standard".Main

 val default_wcem #"a-textio.ads" 362 0 0# "model_projected" "model_trace:4734" "name:Default_WCEM"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"s-wchcon.ads" 94 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "default_wcem" defined at a-textio.ads:362, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__default_wcem___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:433, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__read__2__item
 use import "_gnatprove_standard".Main
 use        Ada__streams__Tstream_element_offsetB
 use        Array__Int__Ada__streams__stream_element

 val item #"a-textio.ads" 433 0 0# "model_projected" "name:Item" "model_trace:4996"  : Array__Int__Ada__streams__stream_element.map__ref 
 
 function item__first #"a-textio.ads" 433 0 0# "model_projected" "name:Item" "model_trace:4996'First" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function item__last #"a-textio.ads" 433 0 0# "model_projected" "name:Item" "model_trace:4996'Last" 
   : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:433, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__read__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:434, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__read__2__last
 use import "_gnatprove_standard".Main

 val last #"a-textio.ads" 434 0 0# "model_projected" "name:Last" "model_trace:5009"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-stream.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:434, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__read__2__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_width" defined at a-tiinio.ads:48 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__default_width
 use import "_gnatprove_standard".Main

 val default_width #"a-tiinio.ads" 48 0 0# "model_projected" "model_trace:15561" "name:Default_Width"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "default_width" defined at a-tiinio.ads:48 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__default_width___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_base" defined at a-tiinio.ads:49 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__default_base
 use import "_gnatprove_standard".Main

 val default_base #"a-tiinio.ads" 49 0 0# "model_projected" "model_trace:15572" "name:Default_Base"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 78 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "default_base" defined at a-tiinio.ads:49 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__default_base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-tiinio.ads:53 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__get__item
 use import "_gnatprove_standard".Main

 val item #"a-tiinio.ads" 53 0 0# "model_projected" "name:Item" "model_trace:15600"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiinio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:53 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-tiinio.ads:57 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__get__2__item
 use import "_gnatprove_standard".Main

 val item #"a-tiinio.ads" 57 0 0# "model_projected" "name:Item" "model_trace:15628"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiinio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:57 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-tiinio.ads:73 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__get__3__item
 use import "_gnatprove_standard".Main

 val item #"a-tiinio.ads" 73 0 0# "model_projected" "name:Item" "model_trace:15750"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiinio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiinio.ads:73 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-tiinio.ads:74 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__get__3__last
 use import "_gnatprove_standard".Main

 val last #"a-tiinio.ads" 74 0 0# "model_projected" "name:Last" "model_trace:15759"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-tiinio.ads:74 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__get__3__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "to" defined at a-tiinio.ads:77 instantiated at a-inteio.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__integer_text_io__put__3__to
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val to__ #"a-tiinio.ads" 77 0 0# "model_projected" "name:To" "model_trace:15777"  : Array__Int__Standard__character.map__ref 
 
 function to____first #"a-tiinio.ads" 77 0 0# "model_projected" "name:To" "model_trace:15777'First" 
   : Standard__integer.integer
 
 function to____last #"a-tiinio.ads" 77 0 0# "model_projected" "name:To" "model_trace:15777'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-tiinio.ads:77 instantiated at a-inteio.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__integer_text_io__put__3__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_fore" defined at a-tiflio.ads:48 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__default_fore
 use import "_gnatprove_standard".Main

 val default_fore #"a-tiflio.ads" 48 0 0# "model_projected" "model_trace:16592" "name:Default_Fore"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "default_fore" defined at a-tiflio.ads:48 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__default_fore___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_aft" defined at a-tiflio.ads:49 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__default_aft
 use import "_gnatprove_standard".Main

 val default_aft #"a-tiflio.ads" 49 0 0# "model_projected" "model_trace:16602" "name:Default_Aft"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "default_aft" defined at a-tiflio.ads:49 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__default_aft___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "default_exp" defined at a-tiflio.ads:50 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__default_exp
 use import "_gnatprove_standard".Main

 val default_exp #"a-tiflio.ads" 50 0 0# "model_projected" "model_trace:16615" "name:Default_Exp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-textio.ads" 73 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "default_exp" defined at a-tiflio.ads:50 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__default_exp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-tiflio.ads:54 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__get__item
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val item #"a-tiflio.ads" 54 0 0# "model_projected" "name:Item" "model_trace:16643"  : Float32.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiflio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiflio.ads:54 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-tiflio.ads:58 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__get__2__item
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val item #"a-tiflio.ads" 58 0 0# "model_projected" "name:Item" "model_trace:16671"  : Float32.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiflio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiflio.ads:58 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__2__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "item" defined at a-tiflio.ads:76 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__get__3__item
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val item #"a-tiflio.ads" 76 0 0# "model_projected" "name:Item" "model_trace:16813"  : Float32.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"a-tiflio.ads" 44 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "item" defined at a-tiflio.ads:76 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__3__item___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "last" defined at a-tiflio.ads:77 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__get__3__last
 use import "_gnatprove_standard".Main

 val last #"a-tiflio.ads" 77 0 0# "model_projected" "name:Last" "model_trace:16822"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "last" defined at a-tiflio.ads:77 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__get__3__last___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "to" defined at a-tiflio.ads:80 instantiated at a-flteio.ads:20, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__float_text_io__put__3__to
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val to__ #"a-tiflio.ads" 80 0 0# "model_projected" "name:To" "model_trace:16840"  : Array__Int__Standard__character.map__ref 
 
 function to____first #"a-tiflio.ads" 80 0 0# "model_projected" "name:To" "model_trace:16840'First" 
   : Standard__integer.integer
 
 function to____last #"a-tiflio.ads" 80 0 0# "model_projected" "name:To" "model_trace:16840'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at a-tiflio.ads:80 instantiated at a-flteio.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__float_text_io__put__3__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_signal" defined at control.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Control__tank1_control__pump_signal
 use import "_gnatprove_standard".Main

 val pump_signal #"control.ads" 11 0 0# "model_projected" "model_trace:12328" "name:Pump_Signal"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 11 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_signal" defined at control.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank1_control__pump_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "valve_signal" defined at control.ads:12, created in Gnat2Why.Decls.Translate_Variable *)
module Control__tank1_control__valve_signal
 use import "_gnatprove_standard".Main

 val valve_signal #"control.ads" 12 0 0# "model_projected" "model_trace:12337" "name:Valve_Signal"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 12 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "valve_signal" defined at control.ads:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank1_control__valve_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "prod_valve_signal" defined at control.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Control__tank2_control__prod_valve_signal
 use import "_gnatprove_standard".Main

 val prod_valve_signal #"control.ads" 31 0 0# "model_projected" "model_trace:12455" "name:Prod_Valve_Signal"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 31 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "prod_valve_signal" defined at control.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank2_control__prod_valve_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "emer_valve_signal" defined at control.ads:32, created in Gnat2Why.Decls.Translate_Variable *)
module Control__tank2_control__emer_valve_signal
 use import "_gnatprove_standard".Main

 val emer_valve_signal #"control.ads" 32 0 0# "model_projected" "model_trace:12464" "name:Emer_Valve_Signal"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"control.ads" 32 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "emer_valve_signal" defined at control.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Control__tank2_control__emer_valve_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_flow" defined at tts.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__pump_flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val pump_flow #"tts.adb" 17 0 0# "model_projected" "model_trace:2345" "name:Pump_Flow"  : Float32.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_flow" defined at tts.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__pump_flow___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "pump_signal" defined at tts.adb:18, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__pump_signal
 use import "_gnatprove_standard".Main

 val pump_signal #"tts.adb" 18 0 0# "model_projected" "name:Pump_Signal" "model_trace:2354"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 18 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "pump_signal" defined at tts.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__pump_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "t1_valve_flow" defined at tts.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__t1_valve_flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val t1_valve_flow #"tts.adb" 22 0 0# "model_projected" "model_trace:2376" "name:T1_Valve_Flow"  : Float32.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "t1_valve_flow" defined at tts.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__t1_valve_flow___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "t1_valve_signal" defined at tts.adb:23, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__t1_valve_signal
 use import "_gnatprove_standard".Main

 val t1_valve_signal #"tts.adb" 23 0 0# "model_projected" "model_trace:2385" "name:T1_Valve_Signal"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 23 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "t1_valve_signal" defined at tts.adb:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__t1_valve_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "prod_valve_flow" defined at tts.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__prod_valve_flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val prod_valve_flow #"tts.adb" 27 0 0# "model_projected" "model_trace:2407" "name:Prod_Valve_Flow"  : Float32.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "prod_valve_flow" defined at tts.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__prod_valve_flow___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "prod_valve_signal" defined at tts.adb:28, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__prod_valve_signal
 use import "_gnatprove_standard".Main

 val prod_valve_signal #"tts.adb" 28 0 0# "model_projected" "name:Prod_Valve_Signal" "model_trace:2416"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 28 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "prod_valve_signal" defined at tts.adb:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__prod_valve_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "emer_valve_flow" defined at tts.adb:32, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__emer_valve_flow
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val emer_valve_flow #"tts.adb" 32 0 0# "model_projected" "model_trace:2437" "name:Emer_Valve_Flow"  : Float32.t__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"system.ads" 1 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "emer_valve_flow" defined at tts.adb:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__emer_valve_flow___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "emer_valve_signal" defined at tts.adb:33, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__emer_valve_signal
 use import "_gnatprove_standard".Main

 val emer_valve_signal #"tts.adb" 33 0 0# "model_projected" "name:Emer_Valve_Signal" "model_trace:2446"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 33 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "emer_valve_signal" defined at tts.adb:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__emer_valve_signal___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "t1_hs_status" defined at tts.adb:49, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__t1_hs_status
 use import "_gnatprove_standard".Main

 val t1_hs_status #"tts.adb" 49 0 0# "model_projected" "model_trace:2546" "name:T1_HS_Status"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 49 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "t1_hs_status" defined at tts.adb:49, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__t1_hs_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "t1_ls_status" defined at tts.adb:50, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__t1_ls_status
 use import "_gnatprove_standard".Main

 val t1_ls_status #"tts.adb" 50 0 0# "model_projected" "model_trace:2555" "name:T1_LS_Status"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 50 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "t1_ls_status" defined at tts.adb:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__t1_ls_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "t2_hs_status" defined at tts.adb:53, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__t2_hs_status
 use import "_gnatprove_standard".Main

 val t2_hs_status #"tts.adb" 53 0 0# "model_projected" "model_trace:2564" "name:T2_HS_Status"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 53 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "t2_hs_status" defined at tts.adb:53, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__t2_hs_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "t2_ms_status" defined at tts.adb:54, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__t2_ms_status
 use import "_gnatprove_standard".Main

 val t2_ms_status #"tts.adb" 54 0 0# "model_projected" "model_trace:2573" "name:T2_MS_Status"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 54 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "t2_ms_status" defined at tts.adb:54, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__t2_ms_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "t2_ls_status" defined at tts.adb:55, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__t2_ls_status
 use import "_gnatprove_standard".Main

 val t2_ls_status #"tts.adb" 55 0 0# "model_projected" "model_trace:2582" "name:T2_LS_Status"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 55 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "t2_ls_status" defined at tts.adb:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__t2_ls_status___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "count" defined at tts.adb:85, created in Gnat2Why.Decls.Translate_Variable *)
module Tts__L_1__count
 use import "_gnatprove_standard".Main

 val count #"tts.adb" 85 0 0# "model_projected" "model_trace:2611" "name:Count"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS #"tts.adb" 85 0 0# 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at tts.adb:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__L_1__count___axiom
 use import "_gnatprove_standard".Main


end

(* Module declaring the external object "tank_state" defined at tank1.ads:4, created in Gnat2Why.Decls.Translate_External_Object *)
module Tank1__tank_state
 use import "_gnatprove_standard".Main

 val tank_state #"tank1.ads" 4 0 0#  : Main.__private__ref 

end

(* Module declaring the external object "tank_state" defined at tank2.ads:4, created in Gnat2Why.Decls.Translate_External_Object *)
module Tank2__tank_state
 use import "_gnatprove_standard".Main

 val tank_state #"tank2.ads" 4 0 0#  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant #"tank2.ads" 4 0 0# "inline" 
   (temp___expr_3 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_3)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_4 : int) (temp___skip_top_level_5 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_9 : int) (temp___is_init_6 : bool) (temp___skip_constant_7 : bool) (temp___do_toplevel_8 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_6 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_9)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_10 : int) (temp___skip_top_level_11 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_15 : int) (temp___is_init_12 : bool) (temp___skip_constant_13 : bool) (temp___do_toplevel_14 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_12 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_15)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_16 : int) (temp___skip_top_level_17 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_21 : int) (temp___is_init_18 : bool) (temp___skip_constant_19 : bool) (temp___do_toplevel_20 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_18 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_21)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_22 : int) (temp___skip_top_level_23 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_27 : int) (temp___is_init_24 : bool) (temp___skip_constant_25 : bool) (temp___do_toplevel_26 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_24 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_27)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_28 : int) (temp___skip_top_level_29 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_33 : int) (temp___is_init_30 : bool) (temp___skip_constant_31 : bool) (temp___do_toplevel_32 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_30 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_33)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_34 : int) (temp___skip_top_level_35 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_39 : int) (temp___is_init_36 : bool) (temp___skip_constant_37 : bool) (temp___do_toplevel_38 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_36 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_39)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_45 : Float32.t) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_42 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_45)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_46 : Float32.t) (temp___skip_top_level_47 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_51 : Float32.t) (temp___is_init_48 : bool) (temp___skip_constant_49 : bool) (temp___do_toplevel_50 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_48 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_51)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_52 : Float32.t) (temp___skip_top_level_53 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_57 : Float64.t) (temp___is_init_54 : bool) (temp___skip_constant_55 : bool) (temp___do_toplevel_56 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_54 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_57)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_58 : Float64.t) (temp___skip_top_level_59 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_63 : int) (temp___is_init_60 : bool) (temp___skip_constant_61 : bool) (temp___do_toplevel_62 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_60 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_63)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_64 : int) (temp___skip_top_level_65 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_69 : int) (temp___is_init_66 : bool) (temp___skip_constant_67 : bool) (temp___do_toplevel_68 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_66 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_69)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_70 : int) (temp___skip_top_level_71 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_75 : int) (temp___is_init_72 : bool) (temp___skip_constant_73 : bool) (temp___do_toplevel_74 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_72 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_75)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_76 : int) (temp___skip_top_level_77 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_82 : Standard__string.string) (temp___is_init_79 : bool) (temp___skip_constant_80 : bool) (temp___do_toplevel_81 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_80) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_82) (Standard__string.last temp___expr_82))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_88 : Standard__wide_string.wide_string) (temp___is_init_85 : bool) (temp___skip_constant_86 : bool) (temp___do_toplevel_87 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_86) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_88) (Standard__wide_string.last temp___expr_88))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_94 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_91 : bool) (temp___skip_constant_92 : bool) (temp___do_toplevel_93 : bool)  =
  #"system.ads" 1 0 0# (if (temp___skip_constant_92) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_94) (Standard__wide_wide_string.last temp___expr_94))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_99 : Standard__duration.duration) (temp___is_init_96 : bool) (temp___skip_constant_97 : bool) (temp___do_toplevel_98 : bool)  =
  #"system.ads" 1 0 0# true
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_100 : Standard__duration.duration) (temp___skip_top_level_101 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_105 : int) (temp___is_init_102 : bool) (temp___skip_constant_103 : bool) (temp___do_toplevel_104 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_102 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_105)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_106 : int) (temp___skip_top_level_107 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_111 : int) (temp___is_init_108 : bool) (temp___skip_constant_109 : bool) (temp___do_toplevel_110 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_108 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_111)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_112 : int) (temp___skip_top_level_113 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_117 : int) (temp___is_init_114 : bool) (temp___skip_constant_115 : bool) (temp___do_toplevel_116 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_114 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_117)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_118 : int) (temp___skip_top_level_119 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_123 : int) (temp___is_init_120 : bool) (temp___skip_constant_121 : bool) (temp___do_toplevel_122 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_120 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_123)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant #"system.ads" 1 0 0# "inline" 
   (temp___expr_129 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool)  =
  #"system.ads" 1 0 0# (if (( temp___is_init_126 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_129)) else true)
 
 predicate default_initial_assumption #"system.ads" 1 0 0# "inline" 
   (temp___expr_130 : int) (temp___skip_top_level_131 : bool)  =
  #"system.ads" 1 0 0# true

end

(* Module for possibly declaring a logic function for "read" defined at a-stream.ads:57, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__streams__read
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "write" defined at a-stream.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__streams__write
 use import "_gnatprove_standard".Main


end

(* Module for defining a value for string literal  defined at s-parame.ads:116, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_133
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_133 #"s-parame.ads" 116 0 0# 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_133__def_axiom :
  (forall __void_param #"s-parame.ads" 116 0 0#  : unit [(temp___String_Literal_133 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 1)) = 95) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 2)) = 95) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 3)) = 103) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 4)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 5)) = 97) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 6)) = 116) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 7)) = 95) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 8)) = 109) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 9)) = 97) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 10)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 11)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 12)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_133 __void_param) 13)) = 99) ))

end

(* Module for possibly declaring a logic function for "strncpy" defined at s-crtl.ads:88, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__strncpy
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "clearerr" defined at s-crtl.ads:98, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__clearerr
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "free" defined at s-crtl.ads:137, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__free
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "memcpy" defined at s-crtl.ads:177, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__memcpy
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "memmove" defined at s-crtl.ads:180, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__memmove
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "mktemp" defined at s-crtl.ads:183, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__mktemp
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "rewind" defined at s-crtl.ads:196, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__rewind
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tmpnam" defined at s-crtl.ads:217, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__crtl__tmpnam
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_binary_mode" defined at i-cstrea.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_binary_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_text_mode" defined at i-cstrea.ads:224, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_text_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_mode" defined at i-cstrea.ads:254, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__set_mode
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "full_name" defined at i-cstrea.ads:262, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Interfaces__c_streams__full_name
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of the aggregate at s-wchcon.ads:170, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_encoding_letters__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function system__wch_con__wc_encoding_letters__aggregate_def #"s-wchcon.ads" 170 0 0# 
   (temp___135 : int) (temp___136 : int) (temp___137 : int) (temp___138 : int) (temp___139 : int) (temp___140 : int) : Array__Int__Standard__character.map
 
 axiom def_axiom :
  (forall temp___135 #"s-wchcon.ads" 170 0 0#  temp___136 #"s-wchcon.ads" 170 0 0#  temp___137 #"s-wchcon.ads" 170 0 0#  temp___138 #"s-wchcon.ads" 170 0 0#  temp___139 #"s-wchcon.ads" 170 0 0#  temp___140 #"s-wchcon.ads" 170 0 0#  : int.
   (let temp___134 = (system__wch_con__wc_encoding_letters__aggregate_def temp___135 temp___136 temp___137 temp___138 temp___139 temp___140) in (
    ( ( ( ( ( ((Array__Int__Standard__character.get temp___134 1) = (Standard__character__rep.of_rep temp___135)) /\ ((Array__Int__Standard__character.get temp___134 2) = (Standard__character__rep.of_rep temp___136)) ) /\ ((Array__Int__Standard__character.get temp___134 3) = (Standard__character__rep.of_rep temp___137)) ) /\ ((Array__Int__Standard__character.get temp___134 4) = (Standard__character__rep.of_rep temp___138)) ) /\ ((Array__Int__Standard__character.get temp___134 5) = (Standard__character__rep.of_rep temp___139)) ) /\ ((Array__Int__Standard__character.get temp___134 6) = (Standard__character__rep.of_rep temp___140)) )))
  )

end

(* Module for defining the value of the aggregate at s-wchcon.ads:194, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__wch_con__wc_longest_sequences__aggregate_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 function system__wch_con__wc_longest_sequences__aggregate_def #"s-wchcon.ads" 194 0 0# 
   (temp___144 : int) (temp___145 : int) (temp___146 : int) (temp___147 : int) (temp___148 : int) (temp___149 : int) : Array__Int__Standard__natural.map
 
 axiom def_axiom :
  (forall temp___144 #"s-wchcon.ads" 194 0 0#  temp___145 #"s-wchcon.ads" 194 0 0#  temp___146 #"s-wchcon.ads" 194 0 0#  temp___147 #"s-wchcon.ads" 194 0 0#  temp___148 #"s-wchcon.ads" 194 0 0#  temp___149 #"s-wchcon.ads" 194 0 0#  : int.
   (let temp___143 = (system__wch_con__wc_longest_sequences__aggregate_def temp___144 temp___145 temp___146 temp___147 temp___148 temp___149) in (
    ( ( ( ( ( ((Array__Int__Standard__natural.get temp___143 1) = (Standard__natural__rep.of_rep temp___144)) /\ ((Array__Int__Standard__natural.get temp___143 2) = (Standard__natural__rep.of_rep temp___145)) ) /\ ((Array__Int__Standard__natural.get temp___143 3) = (Standard__natural__rep.of_rep temp___146)) ) /\ ((Array__Int__Standard__natural.get temp___143 4) = (Standard__natural__rep.of_rep temp___147)) ) /\ ((Array__Int__Standard__natural.get temp___143 5) = (Standard__natural__rep.of_rep temp___148)) ) /\ ((Array__Int__Standard__natural.get temp___143 6) = (Standard__natural__rep.of_rep temp___149)) )))
  )

end

(* Module for possibly declaring a logic function for "create" defined at a-textio.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__create
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "open" defined at a-textio.ads:92, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__open
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "close" defined at a-textio.ads:98, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__close
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "delete" defined at a-textio.ads:99, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__delete
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset" defined at a-textio.ads:100, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__reset
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reset__2" defined at a-textio.ads:101, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__reset__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_input" defined at a-textio.ads:113, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_input
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_output" defined at a-textio.ads:114, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_output
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_error" defined at a-textio.ads:115, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_error
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flush" defined at a-textio.ads:142, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__flush
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "flush__2" defined at a-textio.ads:143, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__flush__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line_length" defined at a-textio.ads:149, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line_length
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line_length__2" defined at a-textio.ads:150, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line_length__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_page_length" defined at a-textio.ads:152, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_page_length
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_page_length__2" defined at a-textio.ads:153, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_page_length__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line" defined at a-textio.ads:165, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_line__2" defined at a-textio.ads:166, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_line" defined at a-textio.ads:168, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_line__2" defined at a-textio.ads:169, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_page" defined at a-textio.ads:174, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "new_page__2" defined at a-textio.ads:175, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__new_page__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_page" defined at a-textio.ads:177, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_page
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "skip_page__2" defined at a-textio.ads:178, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__skip_page__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_col" defined at a-textio.ads:186, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_col
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_col__2" defined at a-textio.ads:187, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_col__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line" defined at a-textio.ads:189, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "set_line__2" defined at a-textio.ads:190, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__set_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get" defined at a-textio.ads:205, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__2" defined at a-textio.ads:206, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put" defined at a-textio.ads:207, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at a-textio.ads:208, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "look_ahead" defined at a-textio.ads:210, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__look_ahead
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "look_ahead__2" defined at a-textio.ads:215, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__look_ahead__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate" defined at a-textio.ads:219, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__2" defined at a-textio.ads:223, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__3" defined at a-textio.ads:226, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_immediate__4" defined at a-textio.ads:231, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_immediate__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__3" defined at a-textio.ads:239, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__4" defined at a-textio.ads:240, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at a-textio.ads:241, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:242, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line" defined at a-textio.ads:244, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line" defined at a-textio.ads:259, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put_line__2" defined at a-textio.ads:263, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put_line__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initialize_standard_files" defined at a-textio.ads:466, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__initialize_standard_files
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get" defined at a-tiinio.ads:51 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__get
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__2" defined at a-tiinio.ads:56 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__get__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put" defined at a-tiinio.ads:60 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at a-tiinio.ads:66 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__3" defined at a-tiinio.ads:71 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__get__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at a-tiinio.ads:76 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__integer_text_io__put__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get" defined at a-tiflio.ads:52 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__float_text_io__get
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__2" defined at a-tiflio.ads:57 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__float_text_io__get__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put" defined at a-tiflio.ads:61 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__float_text_io__put
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__2" defined at a-tiflio.ads:68 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__float_text_io__put__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "get__3" defined at a-tiflio.ads:74 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__float_text_io__get__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "put__3" defined at a-tiflio.ads:79 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__float_text_io__put__3
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "initialize" defined at tank1.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__initialize
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "liquid_height" defined at tank1.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__liquid_height
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function liquid_height #"tank1.ads" 34 0 0# 
   (tank1__tank_state : Main.__private) : Float32.t
 
 predicate liquid_height__function_guard #"system.ads" 1 0 0# 
   (result : Float32.t) (tank1__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "valid_tank" defined at tank1.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__valid_tank
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function valid_tank #"tank1.ads" 79 0 0# 
   (tank1__tank_state : Main.__private) : bool
 
 predicate valid_tank__function_guard #"tank1.ads" 79 0 0# 
   (result : bool) (tank1__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "liquid_in" defined at tank1.ads:42, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__liquid_in
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "liquid_out" defined at tank1.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__liquid_out
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "high_sensor_status" defined at tank1.ads:59, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__high_sensor_status
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function high_sensor_status #"tank1.ads" 59 0 0# 
   (tank1__tank_state : Main.__private) : bool
 
 predicate high_sensor_status__function_guard #"tank1.ads" 59 0 0# 
   (result : bool) (tank1__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "low_sensor_status" defined at tank1.ads:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__low_sensor_status
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function low_sensor_status #"tank1.ads" 66 0 0# 
   (tank1__tank_state : Main.__private) : bool
 
 predicate low_sensor_status__function_guard #"tank1.ads" 66 0 0# 
   (result : bool) (tank1__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "valid_sensors" defined at tank1.ads:73, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__valid_sensors
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function valid_sensors #"tank1.ads" 73 0 0# 
   (tank1__tank_state : Main.__private) : bool
 
 predicate valid_sensors__function_guard #"tank1.ads" 73 0 0# 
   (result : bool) (tank1__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "no_overflow" defined at tank1.ads:86, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__no_overflow
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function no_overflow #"tank1.ads" 86 0 0# 
   (tank1__tank_state : Main.__private) : bool
 
 predicate no_overflow__function_guard #"tank1.ads" 86 0 0# 
   (result : bool) (tank1__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "no_underflow" defined at tank1.ads:92, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank1__no_underflow
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function no_underflow #"tank1.ads" 92 0 0# 
   (tank1__tank_state : Main.__private) : bool
 
 predicate no_underflow__function_guard #"tank1.ads" 92 0 0# 
   (result : bool) (tank1__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "valid_tank" defined at tank2.ads:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__valid_tank
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function valid_tank #"tank2.ads" 84 0 0# 
   (tank2__tank_state : Main.__private) : bool
 
 predicate valid_tank__function_guard #"tank2.ads" 84 0 0# 
   (result : bool) (tank2__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "initialize" defined at tank2.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__initialize
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "liquid_height" defined at tank2.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__liquid_height
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function liquid_height #"tank2.ads" 40 0 0# 
   (tank2__tank_state : Main.__private) : Float32.t
 
 predicate liquid_height__function_guard #"system.ads" 1 0 0# 
   (result : Float32.t) (tank2__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "liquid_in" defined at tank2.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__liquid_in
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "liquid_out" defined at tank2.ads:56, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__liquid_out
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "high_sensor_status" defined at tank2.ads:64, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__high_sensor_status
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function high_sensor_status #"tank2.ads" 64 0 0# 
   (tank2__tank_state : Main.__private) : bool
 
 predicate high_sensor_status__function_guard #"tank2.ads" 64 0 0# 
   (result : bool) (tank2__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "mid_sensor_status" defined at tank2.ads:71, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__mid_sensor_status
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function mid_sensor_status #"tank2.ads" 71 0 0# 
   (tank2__tank_state : Main.__private) : bool
 
 predicate mid_sensor_status__function_guard #"tank2.ads" 71 0 0# 
   (result : bool) (tank2__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "low_sensor_status" defined at tank2.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__low_sensor_status
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function low_sensor_status #"tank2.ads" 78 0 0# 
   (tank2__tank_state : Main.__private) : bool
 
 predicate low_sensor_status__function_guard #"tank2.ads" 78 0 0# 
   (result : bool) (tank2__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "no_overflow" defined at tank2.ads:90, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__no_overflow
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function no_overflow #"tank2.ads" 90 0 0# 
   (tank2__tank_state : Main.__private) : bool
 
 predicate no_overflow__function_guard #"tank2.ads" 90 0 0# 
   (result : bool) (tank2__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "no_underflow" defined at tank2.ads:96, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tank2__no_underflow
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main

 function no_underflow #"tank2.ads" 96 0 0# 
   (tank2__tank_state : Main.__private) : bool
 
 predicate no_underflow__function_guard #"tank2.ads" 96 0 0# 
   (result : bool) (tank2__tank_state : Main.__private) 

end

(* Module for possibly declaring a logic function for "tank1_control" defined at control.ads:9, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Control__tank1_control
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tank2_control" defined at control.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Control__tank2_control
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tts" defined at tts.adb:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Tts
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at tts.adb:85, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Tts__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at tts.adb:85, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Tts__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "root_stream_type" defined at a-stream.ads:70, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__root_stream_type___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 predicate dynamic_invariant #"tts.adb" 85 0 0# "inline" 
   (temp___expr_154 : Ada__streams__root_stream_type.root_stream_type) (temp___is_init_151 : bool) (temp___skip_constant_152 : bool) (temp___do_toplevel_153 : bool)  =
  #"a-stream.ads" 70 0 0# true
 
 predicate default_initial_assumption #"a-stream.ads" 70 0 0# "inline" 
   (temp___expr_155 : Ada__streams__root_stream_type.root_stream_type) (temp___skip_top_level_156 : bool)  =
  #"a-stream.ads" 70 0 0# ((Ada__streams__root_stream_type.attr__tag temp___expr_155) = Ada__streams__root_stream_type.__tag)

end

(* Module giving axioms for type "stream_element" defined at a-stream.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Ada__streams__stream_element

 predicate dynamic_invariant #"a-stream.ads" 70 0 0# "inline" 
   (temp___expr_160 : BV8.t) (temp___is_init_157 : bool) (temp___skip_constant_158 : bool) (temp___do_toplevel_159 : bool)  =
  #"a-stream.ads" 42 0 0# (if (( temp___is_init_157 \/ (BV8.ule Ada__streams__stream_element.first Ada__streams__stream_element.last) )) then (
   (Ada__streams__stream_element.dynamic_property Ada__streams__stream_element.first Ada__streams__stream_element.last temp___expr_160)) else true)
 
 predicate default_initial_assumption #"a-stream.ads" 42 0 0# "inline" 
   (temp___expr_161 : BV8.t) (temp___skip_top_level_162 : bool)  =
  #"a-stream.ads" 42 0 0# true

end

(* Module giving axioms for type "Tstream_element_offsetB" defined at a-stream.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__Tstream_element_offsetB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "stream_element_offset" defined at a-stream.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_offset___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element_offset

 predicate dynamic_invariant #"a-stream.ads" 42 0 0# "inline" 
   (temp___expr_166 : int) (temp___is_init_163 : bool) (temp___skip_constant_164 : bool) (temp___do_toplevel_165 : bool)  =
  #"a-stream.ads" 44 0 0# (if (( temp___is_init_163 \/ (Ada__streams__stream_element_offset.first <= Ada__streams__stream_element_offset.last) )) then (
   (Ada__streams__stream_element_offset.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last temp___expr_166)) else true)
 
 predicate default_initial_assumption #"a-stream.ads" 44 0 0# "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  #"a-stream.ads" 44 0 0# true

end

(* Module giving axioms for type "stream_element_count" defined at a-stream.ads:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_count___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__streams__stream_element_count

 predicate dynamic_invariant #"a-stream.ads" 44 0 0# "inline" 
   (temp___expr_172 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool)  =
  #"a-stream.ads" 51 0 0# (if (( temp___is_init_169 \/ (Ada__streams__stream_element_count.first <= Ada__streams__stream_element_count.last) )) then (
   (Ada__streams__stream_element_count.dynamic_property Ada__streams__stream_element_count.first Ada__streams__stream_element_count.last temp___expr_172)) else true)
 
 predicate default_initial_assumption #"a-stream.ads" 51 0 0# "inline" 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool)  =
  #"a-stream.ads" 51 0 0# true

end

(* Module giving axioms for type "stream_element_array" defined at a-stream.ads:54, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__stream_element_array___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__stream_element_offset
 use        Ada__streams__stream_element_array

 predicate dynamic_invariant #"a-stream.ads" 51 0 0# "inline" 
   (temp___expr_178 : Ada__streams__stream_element_array.stream_element_array) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool)  =
  #"a-stream.ads" 54 0 0# (if (temp___skip_constant_176) then (
   true) else (
   (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last (Ada__streams__stream_element_array.first temp___expr_178) (Ada__streams__stream_element_array.last temp___expr_178))))

end

(* Module giving axioms for type "Troot_stream_typeC" defined at a-stream.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__streams__Troot_stream_typeC___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type

 predicate dynamic_invariant #"a-stream.ads" 54 0 0# "inline" 
   (temp___expr_188 : Ada__streams__root_stream_type.root_stream_type) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool)  =
  #"a-stream.ads" 70 0 0# true

end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant #"a-stream.ads" 70 0 0# "inline" 
   (temp___expr_192 : int) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool)  =
  #"system.ads" 46 0 0# (if (( temp___is_init_189 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_192)) else true)
 
 predicate default_initial_assumption #"system.ads" 46 0 0# "inline" 
   (temp___expr_193 : int) (temp___skip_top_level_194 : bool)  =
  #"system.ads" 46 0 0# true

end

(* Module giving axioms for type "address" defined at system.ads:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address

 predicate dynamic_invariant #"system.ads" 46 0 0# "inline" 
   (temp___expr_198 : BV64.t) (temp___is_init_195 : bool) (temp___skip_constant_196 : bool) (temp___do_toplevel_197 : bool)  =
  #"system.ads" 116 0 0# (if (( temp___is_init_195 \/ (BV64.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_198)) else true)
 
 predicate default_initial_assumption #"system.ads" 116 0 0# "inline" 
   (temp___expr_199 : BV64.t) (temp___skip_top_level_200 : bool)  =
  #"system.ads" 116 0 0# true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant #"system.ads" 116 0 0# "inline" 
   (temp___expr_204 : int) (temp___is_init_201 : bool) (temp___skip_constant_202 : bool) (temp___do_toplevel_203 : bool)  =
  #"system.ads" 91 0 0# (if (( temp___is_init_201 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_204)) else true)
 
 predicate default_initial_assumption #"system.ads" 91 0 0# "inline" 
   (temp___expr_205 : int) (temp___skip_top_level_206 : bool)  =
  #"system.ads" 91 0 0# true

end

(* Module giving axioms for type "any_priority" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant #"system.ads" 91 0 0# "inline" 
   (temp___expr_210 : int) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool)  =
  #"system.ads" 108 0 0# (if (( temp___is_init_207 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_210)) else true)
 
 predicate default_initial_assumption #"system.ads" 108 0 0# "inline" 
   (temp___expr_211 : int) (temp___skip_top_level_212 : bool)  =
  #"system.ads" 108 0 0# true

end

(* Module giving axioms for type "priority" defined at system.ads:109, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant #"system.ads" 108 0 0# "inline" 
   (temp___expr_216 : int) (temp___is_init_213 : bool) (temp___skip_constant_214 : bool) (temp___do_toplevel_215 : bool)  =
  #"system.ads" 109 0 0# (if (( temp___is_init_213 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_216)) else true)
 
 predicate default_initial_assumption #"system.ads" 109 0 0# "inline" 
   (temp___expr_217 : int) (temp___skip_top_level_218 : bool)  =
  #"system.ads" 109 0 0# true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:110, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant #"system.ads" 109 0 0# "inline" 
   (temp___expr_222 : int) (temp___is_init_219 : bool) (temp___skip_constant_220 : bool) (temp___do_toplevel_221 : bool)  =
  #"system.ads" 110 0 0# (if (( temp___is_init_219 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_222)) else true)
 
 predicate default_initial_assumption #"system.ads" 110 0 0# "inline" 
   (temp___expr_223 : int) (temp___skip_top_level_224 : bool)  =
  #"system.ads" 110 0 0# true

end

(* Module giving axioms for type "Tsize_typeB" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__Tsize_typeB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "size_type" defined at s-parame.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__size_type___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__size_type

 predicate dynamic_invariant #"system.ads" 110 0 0# "inline" 
   (temp___expr_228 : int) (temp___is_init_225 : bool) (temp___skip_constant_226 : bool) (temp___do_toplevel_227 : bool)  =
  #"s-parame.ads" 58 0 0# (if (( temp___is_init_225 \/ (System__parameters__size_type.first <= System__parameters__size_type.last) )) then (
   (System__parameters__size_type.dynamic_property System__parameters__size_type.first System__parameters__size_type.last temp___expr_228)) else true)
 
 predicate default_initial_assumption #"s-parame.ads" 58 0 0# "inline" 
   (temp___expr_229 : int) (temp___skip_top_level_230 : bool)  =
  #"s-parame.ads" 58 0 0# true

end

(* Module giving axioms for type "c_address" defined at s-parame.ads:113, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__c_address___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1s" defined at s-parame.ads:116, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__parameters__T1s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "chars" defined at s-crtl.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__chars___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "dirs" defined at s-crtl.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__dirs___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "files" defined at s-crtl.ads:50, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__files___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int" defined at s-crtl.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__int___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__int

 predicate dynamic_invariant #"s-parame.ads" 58 0 0# "inline" 
   (temp___expr_234 : int) (temp___is_init_231 : bool) (temp___skip_constant_232 : bool) (temp___do_toplevel_233 : bool)  =
  #"s-crtl.ads" 53 0 0# (if (( temp___is_init_231 \/ (System__crtl__int.first <= System__crtl__int.last) )) then (
   (System__crtl__int.dynamic_property System__crtl__int.first System__crtl__int.last temp___expr_234)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 53 0 0# "inline" 
   (temp___expr_235 : int) (temp___skip_top_level_236 : bool)  =
  #"s-crtl.ads" 53 0 0# true

end

(* Module giving axioms for type "TlongB" defined at s-crtl.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__TlongB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "long" defined at s-crtl.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__long___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__long

 predicate dynamic_invariant #"s-crtl.ads" 53 0 0# "inline" 
   (temp___expr_240 : int) (temp___is_init_237 : bool) (temp___skip_constant_238 : bool) (temp___do_toplevel_239 : bool)  =
  #"s-crtl.ads" 55 0 0# (if (( temp___is_init_237 \/ (System__crtl__long.first <= System__crtl__long.last) )) then (
   (System__crtl__long.dynamic_property System__crtl__long.first System__crtl__long.last temp___expr_240)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 55 0 0# "inline" 
   (temp___expr_241 : int) (temp___skip_top_level_242 : bool)  =
  #"s-crtl.ads" 55 0 0# true

end

(* Module giving axioms for type "off_t" defined at s-crtl.ads:58, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__off_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__off_t

 predicate dynamic_invariant #"s-crtl.ads" 55 0 0# "inline" 
   (temp___expr_246 : int) (temp___is_init_243 : bool) (temp___skip_constant_244 : bool) (temp___do_toplevel_245 : bool)  =
  #"s-crtl.ads" 58 0 0# (if (( temp___is_init_243 \/ (System__crtl__off_t.first <= System__crtl__off_t.last) )) then (
   (System__crtl__off_t.dynamic_property System__crtl__off_t.first System__crtl__off_t.last temp___expr_246)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 58 0 0# "inline" 
   (temp___expr_247 : int) (temp___skip_top_level_248 : bool)  =
  #"s-crtl.ads" 58 0 0# true

end

(* Module giving axioms for type "size_t" defined at s-crtl.ads:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__size_t___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__size_t

 predicate dynamic_invariant #"s-crtl.ads" 58 0 0# "inline" 
   (temp___expr_252 : BV64.t) (temp___is_init_249 : bool) (temp___skip_constant_250 : bool) (temp___do_toplevel_251 : bool)  =
  #"s-crtl.ads" 60 0 0# (if (( temp___is_init_249 \/ (BV64.ule System__crtl__size_t.first System__crtl__size_t.last) )) then (
   (System__crtl__size_t.dynamic_property System__crtl__size_t.first System__crtl__size_t.last temp___expr_252)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 60 0 0# "inline" 
   (temp___expr_253 : BV64.t) (temp___skip_top_level_254 : bool)  =
  #"s-crtl.ads" 60 0 0# true

end

(* Module giving axioms for type "Tssize_tB" defined at s-crtl.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__Tssize_tB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ssize_t" defined at s-crtl.ads:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__ssize_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__ssize_t

 predicate dynamic_invariant #"s-crtl.ads" 60 0 0# "inline" 
   (temp___expr_258 : int) (temp___is_init_255 : bool) (temp___skip_constant_256 : bool) (temp___do_toplevel_257 : bool)  =
  #"s-crtl.ads" 62 0 0# (if (( temp___is_init_255 \/ (System__crtl__ssize_t.first <= System__crtl__ssize_t.last) )) then (
   (System__crtl__ssize_t.dynamic_property System__crtl__ssize_t.first System__crtl__ssize_t.last temp___expr_258)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 62 0 0# "inline" 
   (temp___expr_259 : int) (temp___skip_top_level_260 : bool)  =
  #"s-crtl.ads" 62 0 0# true

end

(* Module giving axioms for type "Tint64B" defined at s-crtl.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__Tint64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int64" defined at s-crtl.ads:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__int64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__int64

 predicate dynamic_invariant #"s-crtl.ads" 62 0 0# "inline" 
   (temp___expr_264 : int) (temp___is_init_261 : bool) (temp___skip_constant_262 : bool) (temp___do_toplevel_263 : bool)  =
  #"s-crtl.ads" 65 0 0# (if (( temp___is_init_261 \/ (System__crtl__int64.first <= System__crtl__int64.last) )) then (
   (System__crtl__int64.dynamic_property System__crtl__int64.first System__crtl__int64.last temp___expr_264)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 65 0 0# "inline" 
   (temp___expr_265 : int) (temp___skip_top_level_266 : bool)  =
  #"s-crtl.ads" 65 0 0# true

end

(* Module giving axioms for type "filename_encoding" defined at s-crtl.ads:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__crtl__filename_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__crtl__filename_encoding

 predicate dynamic_invariant #"s-crtl.ads" 65 0 0# "inline" 
   (temp___expr_270 : int) (temp___is_init_267 : bool) (temp___skip_constant_268 : bool) (temp___do_toplevel_269 : bool)  =
  #"s-crtl.ads" 72 0 0# (if (( temp___is_init_267 \/ (System__crtl__filename_encoding.first <= System__crtl__filename_encoding.last) )) then (
   (System__crtl__filename_encoding.dynamic_property System__crtl__filename_encoding.first System__crtl__filename_encoding.last temp___expr_270)) else true)
 
 predicate default_initial_assumption #"s-crtl.ads" 72 0 0# "inline" 
   (temp___expr_271 : int) (temp___skip_top_level_272 : bool)  =
  #"s-crtl.ads" 72 0 0# true

end

(* Module giving axioms for type "Tinteger_8B" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_8B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_8" defined at interfac.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_8

 predicate dynamic_invariant #"s-crtl.ads" 72 0 0# "inline" 
   (temp___expr_284 : int) (temp___is_init_281 : bool) (temp___skip_constant_282 : bool) (temp___do_toplevel_283 : bool)  =
  #"interfac.ads" 46 0 0# (if (( temp___is_init_281 \/ (Interfaces__integer_8.first <= Interfaces__integer_8.last) )) then (
   (Interfaces__integer_8.dynamic_property Interfaces__integer_8.first Interfaces__integer_8.last temp___expr_284)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 46 0 0# "inline" 
   (temp___expr_285 : int) (temp___skip_top_level_286 : bool)  =
  #"interfac.ads" 46 0 0# true

end

(* Module giving axioms for type "Tinteger_16B" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_16B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_16" defined at interfac.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_16

 predicate dynamic_invariant #"interfac.ads" 46 0 0# "inline" 
   (temp___expr_290 : int) (temp___is_init_287 : bool) (temp___skip_constant_288 : bool) (temp___do_toplevel_289 : bool)  =
  #"interfac.ads" 49 0 0# (if (( temp___is_init_287 \/ (Interfaces__integer_16.first <= Interfaces__integer_16.last) )) then (
   (Interfaces__integer_16.dynamic_property Interfaces__integer_16.first Interfaces__integer_16.last temp___expr_290)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 49 0 0# "inline" 
   (temp___expr_291 : int) (temp___skip_top_level_292 : bool)  =
  #"interfac.ads" 49 0 0# true

end

(* Module giving axioms for type "Tinteger_32B" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_32" defined at interfac.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_32

 predicate dynamic_invariant #"interfac.ads" 49 0 0# "inline" 
   (temp___expr_296 : int) (temp___is_init_293 : bool) (temp___skip_constant_294 : bool) (temp___do_toplevel_295 : bool)  =
  #"interfac.ads" 52 0 0# (if (( temp___is_init_293 \/ (Interfaces__integer_32.first <= Interfaces__integer_32.last) )) then (
   (Interfaces__integer_32.dynamic_property Interfaces__integer_32.first Interfaces__integer_32.last temp___expr_296)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 52 0 0# "inline" 
   (temp___expr_297 : int) (temp___skip_top_level_298 : bool)  =
  #"interfac.ads" 52 0 0# true

end

(* Module giving axioms for type "Tinteger_64B" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tinteger_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "integer_64" defined at interfac.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__integer_64

 predicate dynamic_invariant #"interfac.ads" 52 0 0# "inline" 
   (temp___expr_302 : int) (temp___is_init_299 : bool) (temp___skip_constant_300 : bool) (temp___do_toplevel_301 : bool)  =
  #"interfac.ads" 55 0 0# (if (( temp___is_init_299 \/ (Interfaces__integer_64.first <= Interfaces__integer_64.last) )) then (
   (Interfaces__integer_64.dynamic_property Interfaces__integer_64.first Interfaces__integer_64.last temp___expr_302)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 55 0 0# "inline" 
   (temp___expr_303 : int) (temp___skip_top_level_304 : bool)  =
  #"interfac.ads" 55 0 0# true

end

(* Module giving axioms for type "unsigned_8" defined at interfac.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_8___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV8
 use        Interfaces__unsigned_8

 predicate dynamic_invariant #"interfac.ads" 55 0 0# "inline" 
   (temp___expr_308 : BV8.t) (temp___is_init_305 : bool) (temp___skip_constant_306 : bool) (temp___do_toplevel_307 : bool)  =
  #"interfac.ads" 63 0 0# (if (( temp___is_init_305 \/ (BV8.ule Interfaces__unsigned_8.first Interfaces__unsigned_8.last) )) then (
   (Interfaces__unsigned_8.dynamic_property Interfaces__unsigned_8.first Interfaces__unsigned_8.last temp___expr_308)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 63 0 0# "inline" 
   (temp___expr_309 : BV8.t) (temp___skip_top_level_310 : bool)  =
  #"interfac.ads" 63 0 0# true

end

(* Module giving axioms for type "unsigned_16" defined at interfac.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_16___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV16
 use        Interfaces__unsigned_16

 predicate dynamic_invariant #"interfac.ads" 63 0 0# "inline" 
   (temp___expr_314 : BV16.t) (temp___is_init_311 : bool) (temp___skip_constant_312 : bool) (temp___do_toplevel_313 : bool)  =
  #"interfac.ads" 66 0 0# (if (( temp___is_init_311 \/ (BV16.ule Interfaces__unsigned_16.first Interfaces__unsigned_16.last) )) then (
   (Interfaces__unsigned_16.dynamic_property Interfaces__unsigned_16.first Interfaces__unsigned_16.last temp___expr_314)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 66 0 0# "inline" 
   (temp___expr_315 : BV16.t) (temp___skip_top_level_316 : bool)  =
  #"interfac.ads" 66 0 0# true

end

(* Module giving axioms for type "unsigned_24" defined at interfac.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_24___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_24

 predicate dynamic_invariant #"interfac.ads" 66 0 0# "inline" 
   (temp___expr_320 : BV32.t) (temp___is_init_317 : bool) (temp___skip_constant_318 : bool) (temp___do_toplevel_319 : bool)  =
  #"interfac.ads" 69 0 0# (if (( temp___is_init_317 \/ (BV32.ule Interfaces__unsigned_24.first Interfaces__unsigned_24.last) )) then (
   (Interfaces__unsigned_24.dynamic_property Interfaces__unsigned_24.first Interfaces__unsigned_24.last temp___expr_320)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 69 0 0# "inline" 
   (temp___expr_321 : BV32.t) (temp___skip_top_level_322 : bool)  =
  #"interfac.ads" 69 0 0# true

end

(* Module giving axioms for type "unsigned_32" defined at interfac.ads:74, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV32
 use        Interfaces__unsigned_32

 predicate dynamic_invariant #"interfac.ads" 69 0 0# "inline" 
   (temp___expr_326 : BV32.t) (temp___is_init_323 : bool) (temp___skip_constant_324 : bool) (temp___do_toplevel_325 : bool)  =
  #"interfac.ads" 74 0 0# (if (( temp___is_init_323 \/ (BV32.ule Interfaces__unsigned_32.first Interfaces__unsigned_32.last) )) then (
   (Interfaces__unsigned_32.dynamic_property Interfaces__unsigned_32.first Interfaces__unsigned_32.last temp___expr_326)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 74 0 0# "inline" 
   (temp___expr_327 : BV32.t) (temp___skip_top_level_328 : bool)  =
  #"interfac.ads" 74 0 0# true

end

(* Module giving axioms for type "unsigned_64" defined at interfac.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__unsigned_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__unsigned_64

 predicate dynamic_invariant #"interfac.ads" 74 0 0# "inline" 
   (temp___expr_332 : BV64.t) (temp___is_init_329 : bool) (temp___skip_constant_330 : bool) (temp___do_toplevel_331 : bool)  =
  #"interfac.ads" 77 0 0# (if (( temp___is_init_329 \/ (BV64.ule Interfaces__unsigned_64.first Interfaces__unsigned_64.last) )) then (
   (Interfaces__unsigned_64.dynamic_property Interfaces__unsigned_64.first Interfaces__unsigned_64.last temp___expr_332)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 77 0 0# "inline" 
   (temp___expr_333 : BV64.t) (temp___skip_top_level_334 : bool)  =
  #"interfac.ads" 77 0 0# true

end

(* Module giving axioms for type "Tieee_float_32B" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_32B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_32" defined at interfac.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_32___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Interfaces__ieee_float_32

 predicate dynamic_invariant #"interfac.ads" 77 0 0# "inline" 
   (temp___expr_338 : Float32.t) (temp___is_init_335 : bool) (temp___skip_constant_336 : bool) (temp___do_toplevel_337 : bool)  =
  #"interfac.ads" 169 0 0# (if (( temp___is_init_335 \/ (Float32.le Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last) )) then (
   (Interfaces__ieee_float_32.dynamic_property Interfaces__ieee_float_32.first Interfaces__ieee_float_32.last temp___expr_338)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 169 0 0# "inline" 
   (temp___expr_339 : Float32.t) (temp___skip_top_level_340 : bool)  =
  #"interfac.ads" 169 0 0# true

end

(* Module giving axioms for type "Tieee_float_64B" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__Tieee_float_64B___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "ieee_float_64" defined at interfac.ads:172, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__ieee_float_64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Interfaces__ieee_float_64

 predicate dynamic_invariant #"interfac.ads" 169 0 0# "inline" 
   (temp___expr_344 : Float64.t) (temp___is_init_341 : bool) (temp___skip_constant_342 : bool) (temp___do_toplevel_343 : bool)  =
  #"interfac.ads" 172 0 0# (if (( temp___is_init_341 \/ (Float64.le Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last) )) then (
   (Interfaces__ieee_float_64.dynamic_property Interfaces__ieee_float_64.first Interfaces__ieee_float_64.last temp___expr_344)) else true)
 
 predicate default_initial_assumption #"interfac.ads" 172 0 0# "inline" 
   (temp___expr_345 : Float64.t) (temp___skip_top_level_346 : bool)  =
  #"interfac.ads" 172 0 0# true

end

(* Module giving axioms for type "chars" defined at i-cstrea.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__chars___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "files" defined at i-cstrea.ads:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__files___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int" defined at i-cstrea.ads:42, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__int___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__int

 predicate dynamic_invariant #"interfac.ads" 172 0 0# "inline" 
   (temp___expr_350 : int) (temp___is_init_347 : bool) (temp___skip_constant_348 : bool) (temp___do_toplevel_349 : bool)  =
  #"i-cstrea.ads" 42 0 0# (if (( temp___is_init_347 \/ (Interfaces__c_streams__int.first <= Interfaces__c_streams__int.last) )) then (
   (Interfaces__c_streams__int.dynamic_property Interfaces__c_streams__int.first Interfaces__c_streams__int.last temp___expr_350)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 42 0 0# "inline" 
   (temp___expr_351 : int) (temp___skip_top_level_352 : bool)  =
  #"i-cstrea.ads" 42 0 0# true

end

(* Module giving axioms for type "long" defined at i-cstrea.ads:43, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__long___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__long

 predicate dynamic_invariant #"i-cstrea.ads" 42 0 0# "inline" 
   (temp___expr_356 : int) (temp___is_init_353 : bool) (temp___skip_constant_354 : bool) (temp___do_toplevel_355 : bool)  =
  #"i-cstrea.ads" 43 0 0# (if (( temp___is_init_353 \/ (Interfaces__c_streams__long.first <= Interfaces__c_streams__long.last) )) then (
   (Interfaces__c_streams__long.dynamic_property Interfaces__c_streams__long.first Interfaces__c_streams__long.last temp___expr_356)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 43 0 0# "inline" 
   (temp___expr_357 : int) (temp___skip_top_level_358 : bool)  =
  #"i-cstrea.ads" 43 0 0# true

end

(* Module giving axioms for type "size_t" defined at i-cstrea.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__size_t___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__size_t

 predicate dynamic_invariant #"i-cstrea.ads" 43 0 0# "inline" 
   (temp___expr_362 : BV64.t) (temp___is_init_359 : bool) (temp___skip_constant_360 : bool) (temp___do_toplevel_361 : bool)  =
  #"i-cstrea.ads" 44 0 0# (if (( temp___is_init_359 \/ (BV64.ule Interfaces__c_streams__size_t.first Interfaces__c_streams__size_t.last) )) then (
   (Interfaces__c_streams__size_t.dynamic_property Interfaces__c_streams__size_t.first Interfaces__c_streams__size_t.last temp___expr_362)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 44 0 0# "inline" 
   (temp___expr_363 : BV64.t) (temp___skip_top_level_364 : bool)  =
  #"i-cstrea.ads" 44 0 0# true

end

(* Module giving axioms for type "ssize_t" defined at i-cstrea.ads:45, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__ssize_t___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__ssize_t

 predicate dynamic_invariant #"i-cstrea.ads" 44 0 0# "inline" 
   (temp___expr_368 : int) (temp___is_init_365 : bool) (temp___skip_constant_366 : bool) (temp___do_toplevel_367 : bool)  =
  #"i-cstrea.ads" 45 0 0# (if (( temp___is_init_365 \/ (Interfaces__c_streams__ssize_t.first <= Interfaces__c_streams__ssize_t.last) )) then (
   (Interfaces__c_streams__ssize_t.dynamic_property Interfaces__c_streams__ssize_t.first Interfaces__c_streams__ssize_t.last temp___expr_368)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 45 0 0# "inline" 
   (temp___expr_369 : int) (temp___skip_top_level_370 : bool)  =
  #"i-cstrea.ads" 45 0 0# true

end

(* Module giving axioms for type "int64" defined at i-cstrea.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__int64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__int64

 predicate dynamic_invariant #"i-cstrea.ads" 45 0 0# "inline" 
   (temp___expr_374 : int) (temp___is_init_371 : bool) (temp___skip_constant_372 : bool) (temp___do_toplevel_373 : bool)  =
  #"i-cstrea.ads" 46 0 0# (if (( temp___is_init_371 \/ (Interfaces__c_streams__int64.first <= Interfaces__c_streams__int64.last) )) then (
   (Interfaces__c_streams__int64.dynamic_property Interfaces__c_streams__int64.first Interfaces__c_streams__int64.last temp___expr_374)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 46 0 0# "inline" 
   (temp___expr_375 : int) (temp___skip_top_level_376 : bool)  =
  #"i-cstrea.ads" 46 0 0# true

end

(* Module giving axioms for type "voids" defined at i-cstrea.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__voids___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "content_encoding" defined at i-cstrea.ads:230, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__content_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__content_encoding

 predicate dynamic_invariant #"i-cstrea.ads" 46 0 0# "inline" 
   (temp___expr_380 : int) (temp___is_init_377 : bool) (temp___skip_constant_378 : bool) (temp___do_toplevel_379 : bool)  =
  #"i-cstrea.ads" 230 0 0# (if (( temp___is_init_377 \/ (Interfaces__c_streams__content_encoding.first <= Interfaces__c_streams__content_encoding.last) )) then (
   (Interfaces__c_streams__content_encoding.dynamic_property Interfaces__c_streams__content_encoding.first Interfaces__c_streams__content_encoding.last temp___expr_380)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 230 0 0# "inline" 
   (temp___expr_381 : int) (temp___skip_top_level_382 : bool)  =
  #"i-cstrea.ads" 230 0 0# true

end

(* Module giving axioms for type "text_content_encoding" defined at i-cstrea.ads:248, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__text_content_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__text_content_encoding

 predicate dynamic_invariant #"i-cstrea.ads" 230 0 0# "inline" 
   (temp___expr_386 : int) (temp___is_init_383 : bool) (temp___skip_constant_384 : bool) (temp___do_toplevel_385 : bool)  =
  #"i-cstrea.ads" 248 0 0# (if (( temp___is_init_383 \/ (Interfaces__c_streams__text_content_encoding.first <= Interfaces__c_streams__text_content_encoding.last) )) then (
   (Interfaces__c_streams__text_content_encoding.dynamic_property Interfaces__c_streams__text_content_encoding.first Interfaces__c_streams__text_content_encoding.last temp___expr_386)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 248 0 0# "inline" 
   (temp___expr_387 : int) (temp___skip_top_level_388 : bool)  =
  #"i-cstrea.ads" 248 0 0# true

end

(* Module giving axioms for type "non_default_text_content_encoding" defined at i-cstrea.ads:251, created in Gnat2Why.Types.Generate_Type_Completion *)
module Interfaces__c_streams__non_default_text_content_encoding___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Interfaces__c_streams__non_default_text_content_encoding

 predicate dynamic_invariant #"i-cstrea.ads" 248 0 0# "inline" 
   (temp___expr_392 : int) (temp___is_init_389 : bool) (temp___skip_constant_390 : bool) (temp___do_toplevel_391 : bool)  =
  #"i-cstrea.ads" 251 0 0# (if (( temp___is_init_389 \/ (Interfaces__c_streams__non_default_text_content_encoding.first <= Interfaces__c_streams__non_default_text_content_encoding.last) )) then (
   (Interfaces__c_streams__non_default_text_content_encoding.dynamic_property Interfaces__c_streams__non_default_text_content_encoding.first Interfaces__c_streams__non_default_text_content_encoding.last temp___expr_392)) else true)
 
 predicate default_initial_assumption #"i-cstrea.ads" 251 0 0# "inline" 
   (temp___expr_393 : int) (temp___skip_top_level_394 : bool)  =
  #"i-cstrea.ads" 251 0 0# true

end

(* Module giving axioms for type "file_mode" defined at s-ficobl.ads:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__file_mode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__file_mode

 predicate dynamic_invariant #"i-cstrea.ads" 251 0 0# "inline" 
   (temp___expr_398 : int) (temp___is_init_395 : bool) (temp___skip_constant_396 : bool) (temp___do_toplevel_397 : bool)  =
  #"s-ficobl.ads" 63 0 0# (if (( temp___is_init_395 \/ (System__file_control_block__file_mode.first <= System__file_control_block__file_mode.last) )) then (
   (System__file_control_block__file_mode.dynamic_property System__file_control_block__file_mode.first System__file_control_block__file_mode.last temp___expr_398)) else true)
 
 predicate default_initial_assumption #"s-ficobl.ads" 63 0 0# "inline" 
   (temp___expr_399 : int) (temp___skip_top_level_400 : bool)  =
  #"s-ficobl.ads" 63 0 0# true

end

(* Module giving axioms for type "read_file_mode" defined at s-ficobl.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__read_file_mode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__read_file_mode

 predicate dynamic_invariant #"s-ficobl.ads" 63 0 0# "inline" 
   (temp___expr_404 : int) (temp___is_init_401 : bool) (temp___skip_constant_402 : bool) (temp___do_toplevel_403 : bool)  =
  #"s-ficobl.ads" 64 0 0# (if (( temp___is_init_401 \/ (System__file_control_block__read_file_mode.first <= System__file_control_block__read_file_mode.last) )) then (
   (System__file_control_block__read_file_mode.dynamic_property System__file_control_block__read_file_mode.first System__file_control_block__read_file_mode.last temp___expr_404)) else true)
 
 predicate default_initial_assumption #"s-ficobl.ads" 64 0 0# "inline" 
   (temp___expr_405 : int) (temp___skip_top_level_406 : bool)  =
  #"s-ficobl.ads" 64 0 0# true

end

(* Module giving axioms for type "shared_status_type" defined at s-ficobl.ads:69, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__file_control_block__shared_status_type___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__file_control_block__shared_status_type

 predicate dynamic_invariant #"s-ficobl.ads" 64 0 0# "inline" 
   (temp___expr_410 : int) (temp___is_init_407 : bool) (temp___skip_constant_408 : bool) (temp___do_toplevel_409 : bool)  =
  #"s-ficobl.ads" 69 0 0# (if (( temp___is_init_407 \/ (System__file_control_block__shared_status_type.first <= System__file_control_block__shared_status_type.last) )) then (
   (System__file_control_block__shared_status_type.dynamic_property System__file_control_block__shared_status_type.first System__file_control_block__shared_status_type.last temp___expr_410)) else true)
 
 predicate default_initial_assumption #"s-ficobl.ads" 69 0 0# "inline" 
   (temp___expr_411 : int) (temp___skip_top_level_412 : bool)  =
  #"s-ficobl.ads" 69 0 0# true

end

(* Module giving axioms for type "Twc_encoding_methodB" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_methodB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "wc_encoding_method" defined at s-wchcon.ads:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_encoding_method

 predicate dynamic_invariant #"s-ficobl.ads" 69 0 0# "inline" 
   (temp___expr_416 : int) (temp___is_init_413 : bool) (temp___skip_constant_414 : bool) (temp___do_toplevel_415 : bool)  =
  #"s-wchcon.ads" 94 0 0# (if (( temp___is_init_413 \/ (System__wch_con__wc_encoding_method.first <= System__wch_con__wc_encoding_method.last) )) then (
   (System__wch_con__wc_encoding_method.dynamic_property System__wch_con__wc_encoding_method.first System__wch_con__wc_encoding_method.last temp___expr_416)) else true)
 
 predicate default_initial_assumption #"s-wchcon.ads" 94 0 0# "inline" 
   (temp___expr_417 : int) (temp___skip_top_level_418 : bool)  =
  #"s-wchcon.ads" 94 0 0# true

end

(* Module giving axioms for type "Twc_encoding_lettersB" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_lettersB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Twc_encoding_lettersT" defined at s-wchcon.ads:169, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_encoding_lettersT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at s-wchcon.ads:170, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "wc_esc_encoding_method" defined at s-wchcon.ads:180, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_esc_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_esc_encoding_method

 predicate dynamic_invariant #"s-wchcon.ads" 94 0 0# "inline" 
   (temp___expr_422 : int) (temp___is_init_419 : bool) (temp___skip_constant_420 : bool) (temp___do_toplevel_421 : bool)  =
  #"s-wchcon.ads" 180 0 0# (if (( temp___is_init_419 \/ (System__wch_con__wc_esc_encoding_method.first <= System__wch_con__wc_esc_encoding_method.last) )) then (
   (System__wch_con__wc_esc_encoding_method.dynamic_property System__wch_con__wc_esc_encoding_method.first System__wch_con__wc_esc_encoding_method.last temp___expr_422)) else true)
 
 predicate default_initial_assumption #"s-wchcon.ads" 180 0 0# "inline" 
   (temp___expr_423 : int) (temp___skip_top_level_424 : bool)  =
  #"s-wchcon.ads" 180 0 0# true

end

(* Module giving axioms for type "wc_upper_half_encoding_method" defined at s-wchcon.ads:184, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__wc_upper_half_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_upper_half_encoding_method

 predicate dynamic_invariant #"s-wchcon.ads" 180 0 0# "inline" 
   (temp___expr_428 : int) (temp___is_init_425 : bool) (temp___skip_constant_426 : bool) (temp___do_toplevel_427 : bool)  =
  #"s-wchcon.ads" 184 0 0# (if (( temp___is_init_425 \/ (System__wch_con__wc_upper_half_encoding_method.first <= System__wch_con__wc_upper_half_encoding_method.last) )) then (
   (System__wch_con__wc_upper_half_encoding_method.dynamic_property System__wch_con__wc_upper_half_encoding_method.first System__wch_con__wc_upper_half_encoding_method.last temp___expr_428)) else true)
 
 predicate default_initial_assumption #"s-wchcon.ads" 184 0 0# "inline" 
   (temp___expr_429 : int) (temp___skip_top_level_430 : bool)  =
  #"s-wchcon.ads" 184 0 0# true

end

(* Module giving axioms for type "Twc_longest_sequencesB" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_longest_sequencesB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Twc_longest_sequencesT" defined at s-wchcon.ads:193, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__Twc_longest_sequencesT___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T7s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T8s" defined at s-wchcon.ads:194, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__wch_con__T8s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "file_type" defined at a-textio.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_type___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 predicate dynamic_invariant #"s-wchcon.ads" 184 0 0# "inline" 
   (temp___expr_436 : Ada__text_io__file_type.file_type) (temp___is_init_433 : bool) (temp___skip_constant_434 : bool) (temp___do_toplevel_435 : bool)  =
  #"a-textio.ads" 52 0 0# true
 
 predicate default_initial_assumption #"a-textio.ads" 52 0 0# "inline" 
   (temp___expr_437 : Ada__text_io__file_type.file_type) (temp___skip_top_level_438 : bool)  =
  #"a-textio.ads" 52 0 0# true

end

(* Module giving axioms for type "file_mode" defined at a-textio.ads:53, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__file_mode___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__file_mode

 predicate dynamic_invariant #"a-textio.ads" 52 0 0# "inline" 
   (temp___expr_442 : int) (temp___is_init_439 : bool) (temp___skip_constant_440 : bool) (temp___do_toplevel_441 : bool)  =
  #"a-textio.ads" 53 0 0# (if (( temp___is_init_439 \/ (Ada__text_io__file_mode.first <= Ada__text_io__file_mode.last) )) then (
   (Ada__text_io__file_mode.dynamic_property Ada__text_io__file_mode.first Ada__text_io__file_mode.last temp___expr_442)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 53 0 0# "inline" 
   (temp___expr_443 : int) (temp___skip_top_level_444 : bool)  =
  #"a-textio.ads" 53 0 0# true

end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "count" defined at a-textio.ads:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__count

 predicate dynamic_invariant #"a-textio.ads" 53 0 0# "inline" 
   (temp___expr_448 : int) (temp___is_init_445 : bool) (temp___skip_constant_446 : bool) (temp___do_toplevel_447 : bool)  =
  #"a-textio.ads" 64 0 0# (if (( temp___is_init_445 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_448)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 64 0 0# "inline" 
   (temp___expr_449 : int) (temp___skip_top_level_450 : bool)  =
  #"a-textio.ads" 64 0 0# true

end

(* Module giving axioms for type "positive_count" defined at a-textio.ads:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__positive_count___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__positive_count

 predicate dynamic_invariant #"a-textio.ads" 64 0 0# "inline" 
   (temp___expr_454 : int) (temp___is_init_451 : bool) (temp___skip_constant_452 : bool) (temp___do_toplevel_453 : bool)  =
  #"a-textio.ads" 68 0 0# (if (( temp___is_init_451 \/ (Ada__text_io__positive_count.first <= Ada__text_io__positive_count.last) )) then (
   (Ada__text_io__positive_count.dynamic_property Ada__text_io__positive_count.first Ada__text_io__positive_count.last temp___expr_454)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 68 0 0# "inline" 
   (temp___expr_455 : int) (temp___skip_top_level_456 : bool)  =
  #"a-textio.ads" 68 0 0# true

end

(* Module giving axioms for type "field" defined at a-textio.ads:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__field___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__field

 predicate dynamic_invariant #"a-textio.ads" 68 0 0# "inline" 
   (temp___expr_460 : int) (temp___is_init_457 : bool) (temp___skip_constant_458 : bool) (temp___do_toplevel_459 : bool)  =
  #"a-textio.ads" 73 0 0# (if (( temp___is_init_457 \/ (Ada__text_io__field.first <= Ada__text_io__field.last) )) then (
   (Ada__text_io__field.dynamic_property Ada__text_io__field.first Ada__text_io__field.last temp___expr_460)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 73 0 0# "inline" 
   (temp___expr_461 : int) (temp___skip_top_level_462 : bool)  =
  #"a-textio.ads" 73 0 0# true

end

(* Module giving axioms for type "number_base" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__number_base___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__number_base

 predicate dynamic_invariant #"a-textio.ads" 73 0 0# "inline" 
   (temp___expr_466 : int) (temp___is_init_463 : bool) (temp___skip_constant_464 : bool) (temp___do_toplevel_465 : bool)  =
  #"a-textio.ads" 78 0 0# (if (( temp___is_init_463 \/ (Ada__text_io__number_base.first <= Ada__text_io__number_base.last) )) then (
   (Ada__text_io__number_base.dynamic_property Ada__text_io__number_base.first Ada__text_io__number_base.last temp___expr_466)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 78 0 0# "inline" 
   (temp___expr_467 : int) (temp___skip_top_level_468 : bool)  =
  #"a-textio.ads" 78 0 0# true

end

(* Module giving axioms for type "type_set" defined at a-textio.ads:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__type_set___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__type_set

 predicate dynamic_invariant #"a-textio.ads" 78 0 0# "inline" 
   (temp___expr_472 : int) (temp___is_init_469 : bool) (temp___skip_constant_470 : bool) (temp___do_toplevel_471 : bool)  =
  #"a-textio.ads" 80 0 0# (if (( temp___is_init_469 \/ (Ada__text_io__type_set.first <= Ada__text_io__type_set.last) )) then (
   (Ada__text_io__type_set.dynamic_property Ada__text_io__type_set.first Ada__text_io__type_set.last temp___expr_472)) else true)
 
 predicate default_initial_assumption #"a-textio.ads" 80 0 0# "inline" 
   (temp___expr_473 : int) (temp___skip_top_level_474 : bool)  =
  #"a-textio.ads" 80 0 0# true

end

(* Module giving axioms for type "num" defined at a-tiinio.ads:44 instantiated at a-inteio.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__integer_text_io__num___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__integer_text_io__num

 predicate dynamic_invariant #"a-textio.ads" 80 0 0# "inline" 
   (temp___expr_502 : int) (temp___is_init_499 : bool) (temp___skip_constant_500 : bool) (temp___do_toplevel_501 : bool)  =
  #"a-tiinio.ads" 44 0 0# (if (( temp___is_init_499 \/ (Ada__integer_text_io__num.first <= Ada__integer_text_io__num.last) )) then (
   (Ada__integer_text_io__num.dynamic_property Ada__integer_text_io__num.first Ada__integer_text_io__num.last temp___expr_502)) else true)
 
 predicate default_initial_assumption #"a-tiinio.ads" 44 0 0# "inline" 
   (temp___expr_503 : int) (temp___skip_top_level_504 : bool)  =
  #"a-tiinio.ads" 44 0 0# true

end

(* Module giving axioms for type "num" defined at a-tiflio.ads:44 instantiated at a-flteio.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__float_text_io__num___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Ada__float_text_io__num

 predicate dynamic_invariant #"a-tiinio.ads" 44 0 0# "inline" 
   (temp___expr_509 : Float32.t) (temp___is_init_506 : bool) (temp___skip_constant_507 : bool) (temp___do_toplevel_508 : bool)  =
  #"a-tiflio.ads" 44 0 0# (if (( temp___is_init_506 \/ (Float32.le Ada__float_text_io__num.first Ada__float_text_io__num.last) )) then (
   (Ada__float_text_io__num.dynamic_property Ada__float_text_io__num.first Ada__float_text_io__num.last temp___expr_509)) else true)
 
 predicate default_initial_assumption #"a-tiflio.ads" 44 0 0# "inline" 
   (temp___expr_510 : Float32.t) (temp___skip_top_level_511 : bool)  =
  #"a-tiflio.ads" 44 0 0# true

end

(* Module giving axioms for type "tank_height_float" defined at tank1.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tank1__tank_height_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank1__tank_height_float

 predicate dynamic_invariant #"a-tiflio.ads" 44 0 0# "inline" 
   (temp___expr_516 : Float32.t) (temp___is_init_513 : bool) (temp___skip_constant_514 : bool) (temp___do_toplevel_515 : bool)  =
  #"tank1.ads" 8 0 0# (if (( temp___is_init_513 \/ (Float32.le Tank1__tank_height_float.first Tank1__tank_height_float.last) )) then (
   (Tank1__tank_height_float.dynamic_property Tank1__tank_height_float.first Tank1__tank_height_float.last temp___expr_516)) else true)
 
 predicate default_initial_assumption #"tank1.ads" 8 0 0# "inline" 
   (temp___expr_517 : Float32.t) (temp___skip_top_level_518 : bool)  =
  #"tank1.ads" 8 0 0# true

end

(* Module giving axioms for type "tank_area_float" defined at tank1.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tank1__tank_area_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank1__tank_area_float

 predicate dynamic_invariant #"tank1.ads" 8 0 0# "inline" 
   (temp___expr_522 : Float32.t) (temp___is_init_519 : bool) (temp___skip_constant_520 : bool) (temp___do_toplevel_521 : bool)  =
  #"tank1.ads" 9 0 0# (if (( temp___is_init_519 \/ (Float32.le Tank1__tank_area_float.first Tank1__tank_area_float.last) )) then (
   (Tank1__tank_area_float.dynamic_property Tank1__tank_area_float.first Tank1__tank_area_float.last temp___expr_522)) else true)
 
 predicate default_initial_assumption #"tank1.ads" 9 0 0# "inline" 
   (temp___expr_523 : Float32.t) (temp___skip_top_level_524 : bool)  =
  #"tank1.ads" 9 0 0# true

end

(* Module giving axioms for type "tank_volume_float" defined at tank1.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tank1__tank_volume_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank1__tank_volume_float

 predicate dynamic_invariant #"tank1.ads" 9 0 0# "inline" 
   (temp___expr_528 : Float32.t) (temp___is_init_525 : bool) (temp___skip_constant_526 : bool) (temp___do_toplevel_527 : bool)  =
  #"tank1.ads" 10 0 0# (if (( temp___is_init_525 \/ (Float32.le Tank1__tank_volume_float.first Tank1__tank_volume_float.last) )) then (
   (Tank1__tank_volume_float.dynamic_property Tank1__tank_volume_float.first Tank1__tank_volume_float.last temp___expr_528)) else true)
 
 predicate default_initial_assumption #"tank1.ads" 10 0 0# "inline" 
   (temp___expr_529 : Float32.t) (temp___skip_top_level_530 : bool)  =
  #"tank1.ads" 10 0 0# true

end

(* Module giving axioms for type "tank_height_float" defined at tank2.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tank2__tank_height_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank2__tank_height_float

 predicate dynamic_invariant #"tank1.ads" 10 0 0# "inline" 
   (temp___expr_542 : Float32.t) (temp___is_init_539 : bool) (temp___skip_constant_540 : bool) (temp___do_toplevel_541 : bool)  =
  #"tank2.ads" 8 0 0# (if (( temp___is_init_539 \/ (Float32.le Tank2__tank_height_float.first Tank2__tank_height_float.last) )) then (
   (Tank2__tank_height_float.dynamic_property Tank2__tank_height_float.first Tank2__tank_height_float.last temp___expr_542)) else true)
 
 predicate default_initial_assumption #"tank2.ads" 8 0 0# "inline" 
   (temp___expr_543 : Float32.t) (temp___skip_top_level_544 : bool)  =
  #"tank2.ads" 8 0 0# true

end

(* Module giving axioms for type "tank_area_float" defined at tank2.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tank2__tank_area_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank2__tank_area_float

 predicate dynamic_invariant #"tank2.ads" 8 0 0# "inline" 
   (temp___expr_548 : Float32.t) (temp___is_init_545 : bool) (temp___skip_constant_546 : bool) (temp___do_toplevel_547 : bool)  =
  #"tank2.ads" 9 0 0# (if (( temp___is_init_545 \/ (Float32.le Tank2__tank_area_float.first Tank2__tank_area_float.last) )) then (
   (Tank2__tank_area_float.dynamic_property Tank2__tank_area_float.first Tank2__tank_area_float.last temp___expr_548)) else true)
 
 predicate default_initial_assumption #"tank2.ads" 9 0 0# "inline" 
   (temp___expr_549 : Float32.t) (temp___skip_top_level_550 : bool)  =
  #"tank2.ads" 9 0 0# true

end

(* Module giving axioms for type "tank_volume_float" defined at tank2.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tank2__tank_volume_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank2__tank_volume_float

 predicate dynamic_invariant #"tank2.ads" 9 0 0# "inline" 
   (temp___expr_554 : Float32.t) (temp___is_init_551 : bool) (temp___skip_constant_552 : bool) (temp___do_toplevel_553 : bool)  =
  #"tank2.ads" 10 0 0# (if (( temp___is_init_551 \/ (Float32.le Tank2__tank_volume_float.first Tank2__tank_volume_float.last) )) then (
   (Tank2__tank_volume_float.dynamic_property Tank2__tank_volume_float.first Tank2__tank_volume_float.last temp___expr_554)) else true)
 
 predicate default_initial_assumption #"tank2.ads" 10 0 0# "inline" 
   (temp___expr_555 : Float32.t) (temp___skip_top_level_556 : bool)  =
  #"tank2.ads" 10 0 0# true

end

(* Module giving axioms for type "Tpump_typeB" defined at pump.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__Tpump_typeB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "pump_type" defined at pump.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pump__pump_type___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Pump__pump_type

 predicate dynamic_invariant #"tank2.ads" 10 0 0# "inline" 
   (temp___expr_567 : Float32.t) (temp___is_init_564 : bool) (temp___skip_constant_565 : bool) (temp___do_toplevel_566 : bool)  =
  #"pump.ads" 11 0 0# (if (( temp___is_init_564 \/ (Float32.le Pump__pump_type.first Pump__pump_type.last) )) then (
   (Pump__pump_type.dynamic_property Pump__pump_type.first Pump__pump_type.last temp___expr_567)) else true)
 
 predicate default_initial_assumption #"pump.ads" 11 0 0# "inline" 
   (temp___expr_568 : Float32.t) (temp___skip_top_level_569 : bool)  =
  #"pump.ads" 11 0 0# true

end

(* Module giving axioms for type "Tvalve_typeB" defined at valve.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Valve__Tvalve_typeB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "valve_type" defined at valve.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Valve__valve_type___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Valve__valve_type

 predicate dynamic_invariant #"pump.ads" 11 0 0# "inline" 
   (temp___expr_577 : Float32.t) (temp___is_init_574 : bool) (temp___skip_constant_575 : bool) (temp___do_toplevel_576 : bool)  =
  #"valve.ads" 11 0 0# (if (( temp___is_init_574 \/ (Float32.le Valve__valve_type.first Valve__valve_type.last) )) then (
   (Valve__valve_type.dynamic_property Valve__valve_type.first Valve__valve_type.last temp___expr_577)) else true)
 
 predicate default_initial_assumption #"valve.ads" 11 0 0# "inline" 
   (temp___expr_578 : Float32.t) (temp___skip_top_level_579 : bool)  =
  #"valve.ads" 11 0 0# true

end

(* Module giving axioms for type "T1b" defined at tts.adb:85, created in Gnat2Why.Types.Generate_Type_Completion *)
module Tts__L_1__T1b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:105, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 97)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:106, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 98)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:112, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 48)

end

(* Module for defining the value of constant "null_address" defined at system.ads:117, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = (BV64.of_int 0))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:147, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:148, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:149, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:150, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:151, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:152, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:153, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:154, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "unspecified_size" defined at s-parame.ads:67, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__unspecified_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__unspecified_size

 axiom unspecified_size__def_axiom :
  ((System__parameters__unspecified_size.unspecified_size ) = ( -9223372036854775808 ))

end

(* Module for defining the value of constant "default_env_stack_size" defined at s-parame.ads:85, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__default_env_stack_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__default_env_stack_size

 axiom default_env_stack_size__def_axiom :
  ((System__parameters__default_env_stack_size.default_env_stack_size ) = 8192000)

end

(* Module for defining the value of constant "stack_grows_down" defined at s-parame.ads:90, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__stack_grows_down___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__stack_grows_down

 axiom stack_grows_down__def_axiom :
  ((System__parameters__stack_grows_down.stack_grows_down ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "runtime_default_sec_stack_size" defined at s-parame.ads:95, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__runtime_default_sec_stack_size___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__parameters__runtime_default_sec_stack_size

 axiom runtime_default_sec_stack_size__def_axiom :
  ((System__parameters__runtime_default_sec_stack_size.runtime_default_sec_stack_size ) = 10240)

end

(* Module for defining the value of constant "sec_stack_dynamic" defined at s-parame.ads:99, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__sec_stack_dynamic___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__sec_stack_dynamic

 axiom sec_stack_dynamic__def_axiom :
  ((System__parameters__sec_stack_dynamic.sec_stack_dynamic ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "c_malloc_linkname" defined at s-parame.ads:116, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__c_malloc_linkname___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        System__parameters__c_malloc_linkname
 use        Temp___String_Literal_133
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom c_malloc_linkname__def_axiom :
  ((System__parameters__c_malloc_linkname.c_malloc_linkname ) = (Standard__string.of_array (Temp___String_Literal_133.temp___String_Literal_133 ()) 1 13))

end

(* Module for defining the value of constant "garbage_collected" defined at s-parame.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__garbage_collected___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__garbage_collected

 axiom garbage_collected__def_axiom :
  ((System__parameters__garbage_collected.garbage_collected ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "single_lock" defined at s-parame.ads:154, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__single_lock___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__single_lock

 axiom single_lock__def_axiom :
  ((System__parameters__single_lock.single_lock ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "no_abort" defined at s-parame.ads:167, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__parameters__no_abort___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__parameters__no_abort

 axiom no_abort__def_axiom :
  ((System__parameters__no_abort.no_abort ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "eof" defined at i-cstrea.ads:56, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__eof___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "iofbf" defined at i-cstrea.ads:59, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__iofbf___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "iolbf" defined at i-cstrea.ads:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__iolbf___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "ionbf" defined at i-cstrea.ads:61, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__ionbf___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "l_tmpnam" defined at i-cstrea.ads:64, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__l_tmpnam___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_cur" defined at i-cstrea.ads:67, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_cur___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_end" defined at i-cstrea.ads:68, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_end___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "seek_set" defined at i-cstrea.ads:69, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__seek_set___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "max_path_len" defined at i-cstrea.ads:270, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__max_path_len___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "null_stream" defined at i-cstrea.ads:313, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Interfaces__c_streams__null_stream___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__null_address
 use        Interfaces__c_streams__null_stream

 axiom null_stream__def_axiom :
  ((Interfaces__c_streams__null_stream.null_stream ) = System__null_address.null_address)

end

(* Module for defining the value of constant "wcem_hex" defined at s-wchcon.ads:100, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_hex___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_hex

 axiom wcem_hex__def_axiom :
  ((System__wch_con__wcem_hex.wcem_hex ) = 1)

end

(* Module for defining the value of constant "wcem_upper" defined at s-wchcon.ads:108, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_upper___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_upper

 axiom wcem_upper__def_axiom :
  ((System__wch_con__wcem_upper.wcem_upper ) = 2)

end

(* Module for defining the value of constant "wcem_shift_jis" defined at s-wchcon.ads:117, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_shift_jis___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_shift_jis

 axiom wcem_shift_jis__def_axiom :
  ((System__wch_con__wcem_shift_jis.wcem_shift_jis ) = 3)

end

(* Module for defining the value of constant "wcem_euc" defined at s-wchcon.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_euc___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_euc

 axiom wcem_euc__def_axiom :
  ((System__wch_con__wcem_euc.wcem_euc ) = 4)

end

(* Module for defining the value of constant "wcem_utf8" defined at s-wchcon.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_utf8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_utf8

 axiom wcem_utf8__def_axiom :
  ((System__wch_con__wcem_utf8.wcem_utf8 ) = 5)

end

(* Module for defining the value of constant "wcem_brackets" defined at s-wchcon.ads:156, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wcem_brackets___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wcem_brackets

 axiom wcem_brackets__def_axiom :
  ((System__wch_con__wcem_brackets.wcem_brackets ) = 6)

end

(* Module for defining the value of constant "wc_encoding_letters" defined at s-wchcon.ads:169, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wc_encoding_letters___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_encoding_letters
 use        Array__Int__Standard__character
 use        System__wch_con__wc_encoding_letters__aggregate_def
 use        Array__Int__Standard__character

 axiom wc_encoding_letters__def_axiom :
  ((System__wch_con__wc_encoding_letters.wc_encoding_letters ) = (System__wch_con__wc_encoding_letters__aggregate_def.system__wch_con__wc_encoding_letters__aggregate_def 104 117 115 101 56 98))

end

(* Module for defining the value of constant "wc_longest_sequences" defined at s-wchcon.ads:193, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__wch_con__wc_longest_sequences___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__wch_con__wc_longest_sequences
 use        Array__Int__Standard__natural
 use        System__wch_con__wc_longest_sequences__aggregate_def
 use        Array__Int__Standard__natural

 axiom wc_longest_sequences__def_axiom :
  ((System__wch_con__wc_longest_sequences.wc_longest_sequences ) = (System__wch_con__wc_longest_sequences__aggregate_def.system__wch_con__wc_longest_sequences__aggregate_def 5 2 2 2 6 12))

end

(* Module for defining the value of constant "unbounded" defined at a-textio.ads:70, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Ada__text_io__unbounded___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Ada__text_io__unbounded

 axiom unbounded__def_axiom :
  ((Ada__text_io__unbounded.unbounded ) = 0)

end

(* Module for defining the value of constant "the_pump" defined at tts.adb:16, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__the_pump___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__the_pump

 axiom the_pump__def_axiom :
  ((Tts__the_pump.the_pump ) = (0.4000000059604644775390625:Float32.t))

end

(* Module for defining the value of constant "t1_valve" defined at tts.adb:21, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t1_valve___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t1_valve

 axiom t1_valve__def_axiom :
  ((Tts__t1_valve.t1_valve ) = (0.20000000298023223876953125:Float32.t))

end

(* Module for defining the value of constant "prod_valve" defined at tts.adb:26, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__prod_valve___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__prod_valve

 axiom prod_valve__def_axiom :
  ((Tts__prod_valve.prod_valve ) = (0.100000001490116119384765625:Float32.t))

end

(* Module for defining the value of constant "emer_valve" defined at tts.adb:31, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__emer_valve___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__emer_valve

 axiom emer_valve__def_axiom :
  ((Tts__emer_valve.emer_valve ) = (0.699999988079071044921875:Float32.t))

end

(* Module for defining the value of constant "t1_crossection" defined at tts.adb:36, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t1_crossection___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t1_crossection

 axiom t1_crossection__def_axiom :
  ((Tts__t1_crossection.t1_crossection ) = (1.0:Float32.t))

end

(* Module for defining the value of constant "t1_height" defined at tts.adb:37, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t1_height___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t1_height

 axiom t1_height__def_axiom :
  ((Tts__t1_height.t1_height ) = (7.0:Float32.t))

end

(* Module for defining the value of constant "t1_hs_loc" defined at tts.adb:38, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t1_hs_loc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t1_hs_loc

 axiom t1_hs_loc__def_axiom :
  ((Tts__t1_hs_loc.t1_hs_loc ) = (5.0:Float32.t))

end

(* Module for defining the value of constant "t1_ls_loc" defined at tts.adb:39, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t1_ls_loc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t1_ls_loc

 axiom t1_ls_loc__def_axiom :
  ((Tts__t1_ls_loc.t1_ls_loc ) = (3.0:Float32.t))

end

(* Module for defining the value of constant "t2_crossection" defined at tts.adb:42, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t2_crossection___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t2_crossection

 axiom t2_crossection__def_axiom :
  ((Tts__t2_crossection.t2_crossection ) = (1.0:Float32.t))

end

(* Module for defining the value of constant "t2_height" defined at tts.adb:43, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t2_height___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t2_height

 axiom t2_height__def_axiom :
  ((Tts__t2_height.t2_height ) = (8.0:Float32.t))

end

(* Module for defining the value of constant "t2_hs_loc" defined at tts.adb:44, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t2_hs_loc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t2_hs_loc

 axiom t2_hs_loc__def_axiom :
  ((Tts__t2_hs_loc.t2_hs_loc ) = (6.0:Float32.t))

end

(* Module for defining the value of constant "t2_ms_loc" defined at tts.adb:45, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t2_ms_loc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t2_ms_loc

 axiom t2_ms_loc__def_axiom :
  ((Tts__t2_ms_loc.t2_ms_loc ) = (4.0:Float32.t))

end

(* Module for defining the value of constant "t2_ls_loc" defined at tts.adb:46, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Tts__t2_ls_loc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tts__t2_ls_loc

 axiom t2_ls_loc__def_axiom :
  ((Tts__t2_ls_loc.t2_ls_loc ) = (2.0:Float32.t))

end

(* Module for declaring a program function (and possibly an axiom) for "read" defined at a-stream.ads:57, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__streams__read___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type
 use        Ada__streams__root_stream_type___axiom
 use        Ada__streams__Tstream_element_offsetB
 use        Ada__streams__Tstream_element_offsetB__rep
 use        Ada__streams__stream_element_offset
 use        Ada__streams__stream_element_offset___axiom
 use        Ada__streams__stream_element_array
 use        Array__Int__Ada__streams__stream_element
 use        Array__Int__Ada__streams__stream_element
 use        Array__Int__Ada__streams__stream_element
 use        Array__Int__Ada__streams__stream_element

 val read #"a-stream.ads" 57 0 0# 
   (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Array__Int__Ada__streams__stream_element.map__ref) (item__first : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (item__last : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (last : int__ref) : unit
  requires { #"a-stream.ads" 44 0 0# true }
  ensures { #"a-stream.ads" 44 0 0# ( ( (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) /\ (if (True) then (
   true) else (
   (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last (Ada__streams__Tstream_element_offsetB__rep.to_rep item__first) (Ada__streams__Tstream_element_offsetB__rep.to_rep item__last)))) ) /\ (Ada__streams__stream_element_offset___axiom.dynamic_invariant last.int__content True True True) ) }
  writes {stream__split_fields, item, last}
 
 namespace Dispatch
  predicate read__specific_post #"a-stream.ads" 60 0 0# 
    (attr__tag : int) (ada__streams__read__stream__fields : Ada__streams__root_stream_type.__split_fields) (stream__attr__tag : int) (ada__streams__read__item : Array__Int__Ada__streams__stream_element.map) (item__first : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (item__last : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (ada__streams__read__last : int) (ada__streams__read__stream__old__fields : Ada__streams__root_stream_type.__split_fields) (ada__streams__read__item__old : Array__Int__Ada__streams__stream_element.map) (ada__streams__read__last__old : int) 
  
  val read #"a-stream.ads" 57 0 0# 
    (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Array__Int__Ada__streams__stream_element.map__ref) (item__first : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (item__last : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB) (last : int__ref) : unit
   requires { #"a-stream.ads" 44 0 0# true }
   ensures { #"a-stream.ads" 44 0 0# ( ( true /\ ( ( (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) /\ (if (True) then (
    true) else (
    (Ada__streams__stream_element_array.dynamic_property Ada__streams__stream_element_offset.first Ada__streams__stream_element_offset.last (Ada__streams__Tstream_element_offsetB__rep.to_rep item__first) (Ada__streams__Tstream_element_offsetB__rep.to_rep item__last)))) ) /\ (Ada__streams__stream_element_offset___axiom.dynamic_invariant last.int__content True True True) ) ) /\ (read__specific_post stream__attr__tag stream__split_fields.Ada__streams__root_stream_type.__split_fields__content stream__attr__tag item.Array__Int__Ada__streams__stream_element.map__content item__first item__last last.int__content (old stream__split_fields.Ada__streams__root_stream_type.__split_fields__content ) (old item.Array__Int__Ada__streams__stream_element.map__content ) (old last.int__content )) ) }
   writes {stream__split_fields, item, last}

 end
 
 axiom ada__streams__root_stream_type__compat_axiom :
  (forall ada__streams__read__stream__fields #"a-stream.ads" 58 0 0#  ada__streams__read__stream__old__fields #"a-stream.ads" 58 0 0#  : Ada__streams__root_stream_type.__split_fields.
  (forall stream__attr__tag #"a-stream.ads" 58 0 0#  ada__streams__read__last #"a-stream.ads" 60 0 0#  ada__streams__read__last__old #"a-stream.ads" 60 0 0#  : int.
  (forall ada__streams__read__item #"a-stream.ads" 59 0 0#  ada__streams__read__item__old #"a-stream.ads" 59 0 0#  : Array__Int__Ada__streams__stream_element.map.
  (forall item__first #"a-stream.ads" 59 0 0#  item__last #"a-stream.ads" 59 0 0#  : Ada__streams__Tstream_element_offsetB.tstream_element_offsetB [(Dispatch.read__specific_post Ada__streams__root_stream_type.__tag ada__streams__read__stream__fields stream__attr__tag ada__streams__read__item item__first item__last ada__streams__read__last ada__streams__read__stream__old__fields ada__streams__read__item__old ada__streams__read__last__old)].
   ( (Dispatch.read__specific_post Ada__streams__root_stream_type.__tag ada__streams__read__stream__fields stream__attr__tag ada__streams__read__item item__first item__last ada__streams__read__last ada__streams__read__stream__old__fields ada__streams__read__item__old ada__streams__read__last__old) -> (let temp___stream_182 = { Ada__streams__root_stream_type.__split_fields = ada__streams__read__stream__old__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
   (let temp___stream_182 = { Ada__streams__root_stream_type.__split_fields = ada__streams__read__stream__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
    true))
   ))
    )))))

end

(* Module for declaring a program function (and possibly an axiom) for "write" defined at a-stream.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__streams__write___axiom
 use import "_gnatprove_standard".Main
 use        Ada__streams__root_stream_type
 use        Ada__streams__root_stream_type___axiom
 use        Ada__streams__stream_element_array

 val write #"a-stream.ads" 63 0 0# 
   (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) : unit
  requires { #"a-stream.ads" 54 0 0# true }
  ensures { #"a-stream.ads" 54 0 0# (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) }
  writes {stream__split_fields}
 
 namespace Dispatch
  predicate write__specific_post #"a-stream.ads" 64 0 0# 
    (attr__tag : int) (ada__streams__write__stream__fields : Ada__streams__root_stream_type.__split_fields) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) (ada__streams__write__stream__old__fields : Ada__streams__root_stream_type.__split_fields) 
  
  val write #"a-stream.ads" 63 0 0# 
    (stream__split_fields : Ada__streams__root_stream_type.__split_fields__ref) (stream__attr__tag : int) (item : Ada__streams__stream_element_array.stream_element_array) : unit
   requires { #"a-stream.ads" 54 0 0# true }
   ensures { #"a-stream.ads" 54 0 0# ( ( true /\ (Ada__streams__root_stream_type___axiom.dynamic_invariant { Ada__streams__root_stream_type.__split_fields = stream__split_fields.Ada__streams__root_stream_type.__split_fields__content; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } True True True) ) /\ (write__specific_post stream__attr__tag stream__split_fields.Ada__streams__root_stream_type.__split_fields__content stream__attr__tag item (old stream__split_fields.Ada__streams__root_stream_type.__split_fields__content )) ) }
   writes {stream__split_fields}

 end
 
 axiom ada__streams__root_stream_type__compat_axiom :
  (forall ada__streams__write__stream__fields #"a-stream.ads" 64 0 0#  ada__streams__write__stream__old__fields #"a-stream.ads" 64 0 0#  : Ada__streams__root_stream_type.__split_fields.
  (forall stream__attr__tag #"a-stream.ads" 64 0 0#  : int.
  (forall item #"a-stream.ads" 65 0 0#  : Ada__streams__stream_element_array.stream_element_array [(Dispatch.write__specific_post Ada__streams__root_stream_type.__tag ada__streams__write__stream__fields stream__attr__tag item ada__streams__write__stream__old__fields)].
   ( (Dispatch.write__specific_post Ada__streams__root_stream_type.__tag ada__streams__write__stream__fields stream__attr__tag item ada__streams__write__stream__old__fields) -> (let temp___stream_184 = { Ada__streams__root_stream_type.__split_fields = ada__streams__write__stream__old__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
   (let temp___stream_184 = { Ada__streams__root_stream_type.__split_fields = ada__streams__write__stream__fields; Ada__streams__root_stream_type.attr__tag = stream__attr__tag } in (
    true))
   ))
    ))))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__Olt

 val olt #"system.ads" 77 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__Olt.olt left right)) /\ true ) /\ true ) }
 
 axiom olt__post_axiom :
  (forall left #"system.ads" 77 0 0#  right #"system.ads" 77 0 0#  : BV64.t [(System__Olt.olt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True) /\ (System__address___axiom.dynamic_invariant right True True True) ) -> (let result = (System__Olt.olt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__Ole

 val ole #"system.ads" 78 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__Ole.ole left right)) /\ true ) /\ true ) }
 
 axiom ole__post_axiom :
  (forall left #"system.ads" 78 0 0#  right #"system.ads" 78 0 0#  : BV64.t [(System__Ole.ole left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True) /\ (System__address___axiom.dynamic_invariant right True True True) ) -> (let result = (System__Ole.ole left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__Ogt

 val ogt #"system.ads" 79 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__Ogt.ogt left right)) /\ true ) /\ true ) }
 
 axiom ogt__post_axiom :
  (forall left #"system.ads" 79 0 0#  right #"system.ads" 79 0 0#  : BV64.t [(System__Ogt.ogt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True) /\ (System__address___axiom.dynamic_invariant right True True True) ) -> (let result = (System__Ogt.ogt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__Oge

 val oge #"system.ads" 80 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__Oge.oge left right)) /\ true ) /\ true ) }
 
 axiom oge__post_axiom :
  (forall left #"system.ads" 80 0 0#  right #"system.ads" 80 0 0#  : BV64.t [(System__Oge.oge left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True) /\ (System__address___axiom.dynamic_invariant right True True True) ) -> (let result = (System__Oge.oge left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__Oeq

 val oeq #"system.ads" 81 0 0# 
   (left : BV64.t) (right : BV64.t) : bool
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__Oeq.oeq left right)) /\ true ) /\ true ) }
 
 axiom oeq__post_axiom :
  (forall left #"system.ads" 81 0 0#  right #"system.ads" 81 0 0#  : BV64.t [(System__Oeq.oeq left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True) /\ (System__address___axiom.dynamic_invariant right True True True) ) -> (let result = (System__Oeq.oeq left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "default_stack_size" defined at s-parame.ads:70, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__default_stack_size___axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type___axiom
 use        System__parameters__default_stack_size

 val default_stack_size #"s-parame.ads" 70 0 0# 
   (__void_param : unit) : int
  requires { #"s-parame.ads" 58 0 0# true }
  ensures { #"s-parame.ads" 58 0 0# ( ( (result = (System__parameters__default_stack_size.default_stack_size ())) /\ true ) /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom default_stack_size__post_axiom :
  (forall __void_param #"s-parame.ads" 70 0 0#  : unit [(System__parameters__default_stack_size.default_stack_size __void_param)].
   ( true -> (let result = (System__parameters__default_stack_size.default_stack_size __void_param) in (
    ( ( true /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "minimum_stack_size" defined at s-parame.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__minimum_stack_size___axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type___axiom
 use        System__parameters__minimum_stack_size

 val minimum_stack_size #"s-parame.ads" 73 0 0# 
   (__void_param : unit) : int
  requires { #"s-parame.ads" 58 0 0# true }
  ensures { #"s-parame.ads" 58 0 0# ( ( (result = (System__parameters__minimum_stack_size.minimum_stack_size ())) /\ true ) /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom minimum_stack_size__post_axiom :
  (forall __void_param #"s-parame.ads" 73 0 0#  : unit [(System__parameters__minimum_stack_size.minimum_stack_size __void_param)].
   ( true -> (let result = (System__parameters__minimum_stack_size.minimum_stack_size __void_param) in (
    ( ( true /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "adjust_storage_size" defined at s-parame.ads:76, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__parameters__adjust_storage_size___axiom
 use import "_gnatprove_standard".Main
 use        System__parameters__size_type___axiom
 use        System__parameters__adjust_storage_size

 val adjust_storage_size #"s-parame.ads" 76 0 0# 
   (size : int) : int
  requires { #"s-parame.ads" 58 0 0# true }
  ensures { #"s-parame.ads" 58 0 0# ( ( (result = (System__parameters__adjust_storage_size.adjust_storage_size size)) /\ true ) /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom adjust_storage_size__post_axiom :
  (forall size #"s-parame.ads" 76 0 0#  : int [(System__parameters__adjust_storage_size.adjust_storage_size size)].
   ( (System__parameters__size_type___axiom.dynamic_invariant size True True True) -> (let result = (System__parameters__adjust_storage_size.adjust_storage_size size) in (
    ( ( true /\ (System__parameters__size_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "strlen" defined at s-crtl.ads:85, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__strlen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__strlen

 val strlen #"s-crtl.ads" 85 0 0# 
   (a : BV64.t) : BV64.t
  requires { #"s-crtl.ads" 60 0 0# true }
  ensures { #"s-crtl.ads" 60 0 0# ( ( (result = (System__crtl__strlen.strlen a)) /\ true ) /\ (System__crtl__size_t___axiom.dynamic_invariant result True False True) ) }
 
 axiom strlen__post_axiom :
  (forall a #"s-crtl.ads" 85 0 0#  : BV64.t [(System__crtl__strlen.strlen a)].
   ( (System__address___axiom.dynamic_invariant a True True True) -> (let result = (System__crtl__strlen.strlen a) in (
    ( ( true /\ (System__crtl__size_t___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "strncpy" defined at s-crtl.ads:88, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__strncpy___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val strncpy #"s-crtl.ads" 88 0 0# 
   (dest : BV64.t) (src : BV64.t) (n : BV64.t) : unit
  requires { #"s-crtl.ads" 60 0 0# true }
  ensures { #"s-crtl.ads" 60 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "atoi" defined at s-crtl.ads:95, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__atoi___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__integer___axiom
 use        System__address___axiom
 use        System__crtl__atoi

 val atoi #"s-crtl.ads" 95 0 0# 
   (a : BV64.t) : int
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (System__crtl__atoi.atoi a)) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant result True False True) ) }
 
 axiom atoi__post_axiom :
  (forall a #"s-crtl.ads" 95 0 0#  : BV64.t [(System__crtl__atoi.atoi a)].
   ( (System__address___axiom.dynamic_invariant a True True True) -> (let result = (System__crtl__atoi.atoi a) in (
    ( ( true /\ (Standard__integer___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "clearerr" defined at s-crtl.ads:98, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__clearerr___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val clearerr #"s-crtl.ads" 98 0 0# 
   (stream : BV64.t) : unit
  requires { #"s-crtl.ads" 50 0 0# true }
  ensures { #"s-crtl.ads" 50 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "dup" defined at s-crtl.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__dup___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int___axiom
 use        System__crtl__dup

 val dup #"s-crtl.ads" 101 0 0# 
   (handle : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__dup.dup handle)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom dup__post_axiom :
  (forall handle #"s-crtl.ads" 101 0 0#  : int [(System__crtl__dup.dup handle)].
   ( (System__crtl__int___axiom.dynamic_invariant handle True True True) -> (let result = (System__crtl__dup.dup handle) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "dup2" defined at s-crtl.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__dup2___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int___axiom
 use        System__crtl__dup2

 val dup2 #"s-crtl.ads" 104 0 0# 
   (from : int) (to__ : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__dup2.dup2 from to__)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom dup2__post_axiom :
  (forall from #"s-crtl.ads" 104 0 0#  to__ #"s-crtl.ads" 104 0 0#  : int [(System__crtl__dup2.dup2 from to__)].
   ( ( (System__crtl__int___axiom.dynamic_invariant from True True True) /\ (System__crtl__int___axiom.dynamic_invariant to__ True True True) ) -> (let result = (System__crtl__dup2.dup2 from to__) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fclose" defined at s-crtl.ads:107, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fclose___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fclose

 val fclose #"s-crtl.ads" 107 0 0# 
   (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fclose.fclose stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fclose__post_axiom :
  (forall stream #"s-crtl.ads" 107 0 0#  : BV64.t [(System__crtl__fclose.fclose stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fclose.fclose stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fdopen" defined at s-crtl.ads:110, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fdopen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fdopen

 val fdopen #"s-crtl.ads" 110 0 0# 
   (handle : int) (mode : BV64.t) : BV64.t
  requires { #"s-crtl.ads" 50 0 0# true }
  ensures { #"s-crtl.ads" 50 0 0# ( ( (result = (System__crtl__fdopen.fdopen handle mode)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom fdopen__post_axiom :
  (forall handle #"s-crtl.ads" 110 0 0#  : int.
  (forall mode #"s-crtl.ads" 110 0 0#  : BV64.t [(System__crtl__fdopen.fdopen handle mode)].
   ( ( (System__crtl__int___axiom.dynamic_invariant handle True True True) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) -> (let result = (System__crtl__fdopen.fdopen handle mode) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fflush" defined at s-crtl.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fflush___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fflush

 val fflush #"s-crtl.ads" 113 0 0# 
   (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fflush.fflush stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fflush__post_axiom :
  (forall stream #"s-crtl.ads" 113 0 0#  : BV64.t [(System__crtl__fflush.fflush stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fflush.fflush stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fgetc" defined at s-crtl.ads:116, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fgetc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fgetc

 val fgetc #"s-crtl.ads" 116 0 0# 
   (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fgetc.fgetc stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fgetc__post_axiom :
  (forall stream #"s-crtl.ads" 116 0 0#  : BV64.t [(System__crtl__fgetc.fgetc stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__fgetc.fgetc stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fgets" defined at s-crtl.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fgets___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fgets

 val fgets #"s-crtl.ads" 119 0 0# 
   (strng : BV64.t) (n : int) (stream : BV64.t) : BV64.t
  requires { #"s-crtl.ads" 41 0 0# true }
  ensures { #"s-crtl.ads" 41 0 0# ( ( (result = (System__crtl__fgets.fgets strng n stream)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
   (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last result)) else true) ) }
 
 axiom fgets__post_axiom :
  (forall strng #"s-crtl.ads" 119 0 0#  stream #"s-crtl.ads" 119 0 0#  : BV64.t.
  (forall n #"s-crtl.ads" 119 0 0#  : int [(System__crtl__fgets.fgets strng n stream)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last strng)) else true) /\ (System__crtl__int___axiom.dynamic_invariant n True True True) ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fgets.fgets strng n stream) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
     (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fopen" defined at s-crtl.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fopen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__filename_encoding___axiom
 use        System__crtl__fopen

 val fopen #"s-crtl.ads" 122 0 0# 
   (filename : BV64.t) (mode : BV64.t) (encoding : int) : BV64.t
  requires { #"s-crtl.ads" 50 0 0# true }
  ensures { #"s-crtl.ads" 50 0 0# ( ( (result = (System__crtl__fopen.fopen filename mode encoding)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom fopen__post_axiom :
  (forall filename #"s-crtl.ads" 123 0 0#  mode #"s-crtl.ads" 124 0 0#  : BV64.t.
  (forall encoding #"s-crtl.ads" 125 0 0#  : int [(System__crtl__fopen.fopen filename mode encoding)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) /\ (System__crtl__filename_encoding___axiom.dynamic_invariant encoding True True True) ) -> (let result = (System__crtl__fopen.fopen filename mode encoding) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputc" defined at s-crtl.ads:128, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fputc

 val fputc #"s-crtl.ads" 128 0 0# 
   (c : int) (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fputc.fputc c stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fputc__post_axiom :
  (forall c #"s-crtl.ads" 128 0 0#  : int.
  (forall stream #"s-crtl.ads" 128 0 0#  : BV64.t [(System__crtl__fputc.fputc c stream)].
   ( ( (System__crtl__int___axiom.dynamic_invariant c True True True) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputc.fputc c stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputwc" defined at s-crtl.ads:131, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputwc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fputwc

 val fputwc #"s-crtl.ads" 131 0 0# 
   (c : int) (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fputwc.fputwc c stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fputwc__post_axiom :
  (forall c #"s-crtl.ads" 131 0 0#  : int.
  (forall stream #"s-crtl.ads" 131 0 0#  : BV64.t [(System__crtl__fputwc.fputwc c stream)].
   ( ( (System__crtl__int___axiom.dynamic_invariant c True True True) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputwc.fputwc c stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fputs" defined at s-crtl.ads:134, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fputs___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__fputs

 val fputs #"s-crtl.ads" 134 0 0# 
   (strng : BV64.t) (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fputs.fputs strng stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fputs__post_axiom :
  (forall strng #"s-crtl.ads" 134 0 0#  stream #"s-crtl.ads" 134 0 0#  : BV64.t [(System__crtl__fputs.fputs strng stream)].
   ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last strng)) else true) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__fputs.fputs strng stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "free" defined at s-crtl.ads:137, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__free___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val free #"s-crtl.ads" 137 0 0# 
   (ptr : BV64.t) : unit
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "freopen" defined at s-crtl.ads:140, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__freopen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__filename_encoding___axiom
 use        System__crtl__freopen

 val freopen #"s-crtl.ads" 140 0 0# 
   (filename : BV64.t) (mode : BV64.t) (stream : BV64.t) (encoding : int) : BV64.t
  requires { #"s-crtl.ads" 50 0 0# true }
  ensures { #"s-crtl.ads" 50 0 0# ( ( (result = (System__crtl__freopen.freopen filename mode stream encoding)) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom freopen__post_axiom :
  (forall filename #"s-crtl.ads" 141 0 0#  mode #"s-crtl.ads" 142 0 0#  stream #"s-crtl.ads" 143 0 0#  : BV64.t.
  (forall encoding #"s-crtl.ads" 144 0 0#  : int [(System__crtl__freopen.freopen filename mode stream encoding)].
   ( ( ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last mode)) else true) ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) /\ (System__crtl__filename_encoding___axiom.dynamic_invariant encoding True True True) ) -> (let result = (System__crtl__freopen.freopen filename mode stream encoding) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fseek" defined at s-crtl.ads:147, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fseek___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__long___axiom
 use        System__crtl__fseek

 val fseek #"s-crtl.ads" 147 0 0# 
   (stream : BV64.t) (offset : int) (origin : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fseek.fseek stream offset origin)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fseek__post_axiom :
  (forall stream #"s-crtl.ads" 148 0 0#  : BV64.t.
  (forall offset #"s-crtl.ads" 149 0 0#  origin #"s-crtl.ads" 150 0 0#  : int [(System__crtl__fseek.fseek stream offset origin)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (System__crtl__long___axiom.dynamic_invariant offset True True True) ) /\ (System__crtl__int___axiom.dynamic_invariant origin True True True) ) -> (let result = (System__crtl__fseek.fseek stream offset origin) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "fseek64" defined at s-crtl.ads:153, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__fseek64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__int64___axiom
 use        System__crtl__fseek64

 val fseek64 #"s-crtl.ads" 153 0 0# 
   (stream : BV64.t) (offset : int) (origin : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__fseek64.fseek64 stream offset origin)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fseek64__post_axiom :
  (forall stream #"s-crtl.ads" 154 0 0#  : BV64.t.
  (forall offset #"s-crtl.ads" 155 0 0#  origin #"s-crtl.ads" 156 0 0#  : int [(System__crtl__fseek64.fseek64 stream offset origin)].
   ( ( ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (System__crtl__int64___axiom.dynamic_invariant offset True True True) ) /\ (System__crtl__int___axiom.dynamic_invariant origin True True True) ) -> (let result = (System__crtl__fseek64.fseek64 stream offset origin) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "ftell" defined at s-crtl.ads:159, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ftell___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__long___axiom
 use        System__crtl__ftell

 val ftell #"s-crtl.ads" 159 0 0# 
   (stream : BV64.t) : int
  requires { #"s-crtl.ads" 55 0 0# true }
  ensures { #"s-crtl.ads" 55 0 0# ( ( (result = (System__crtl__ftell.ftell stream)) /\ true ) /\ (System__crtl__long___axiom.dynamic_invariant result True False True) ) }
 
 axiom ftell__post_axiom :
  (forall stream #"s-crtl.ads" 159 0 0#  : BV64.t [(System__crtl__ftell.ftell stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__ftell.ftell stream) in (
    ( ( true /\ (System__crtl__long___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ftell64" defined at s-crtl.ads:162, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ftell64___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int64___axiom
 use        System__crtl__ftell64

 val ftell64 #"s-crtl.ads" 162 0 0# 
   (stream : BV64.t) : int
  requires { #"s-crtl.ads" 65 0 0# true }
  ensures { #"s-crtl.ads" 65 0 0# ( ( (result = (System__crtl__ftell64.ftell64 stream)) /\ true ) /\ (System__crtl__int64___axiom.dynamic_invariant result True False True) ) }
 
 axiom ftell64__post_axiom :
  (forall stream #"s-crtl.ads" 162 0 0#  : BV64.t [(System__crtl__ftell64.ftell64 stream)].
   ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) -> (let result = (System__crtl__ftell64.ftell64 stream) in (
    ( ( true /\ (System__crtl__int64___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "getenv" defined at s-crtl.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__getenv___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Standard__string
 use        Standard__string___axiom
 use        System__address___axiom
 use        System__crtl__getenv

 val getenv #"s-crtl.ads" 165 0 0# 
   (s : Standard__string.string) : BV64.t
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__crtl__getenv.getenv s)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True) ) }
 
 axiom getenv__post_axiom :
  (forall s #"s-crtl.ads" 165 0 0#  : Standard__string.string [(System__crtl__getenv.getenv s)].
   ( (Standard__string___axiom.dynamic_invariant s True True True) -> (let result = (System__crtl__getenv.getenv s) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "isatty" defined at s-crtl.ads:168, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__isatty___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int___axiom
 use        System__crtl__isatty

 val isatty #"s-crtl.ads" 168 0 0# 
   (handle : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__isatty.isatty handle)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom isatty__post_axiom :
  (forall handle #"s-crtl.ads" 168 0 0#  : int [(System__crtl__isatty.isatty handle)].
   ( (System__crtl__int___axiom.dynamic_invariant handle True True True) -> (let result = (System__crtl__isatty.isatty handle) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "lseek" defined at s-crtl.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__lseek___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int___axiom
 use        System__crtl__off_t___axiom
 use        System__crtl__lseek

 val lseek #"s-crtl.ads" 171 0 0# 
   (fd : int) (offset : int) (direction : int) : int
  requires { #"s-crtl.ads" 58 0 0# true }
  ensures { #"s-crtl.ads" 58 0 0# ( ( (result = (System__crtl__lseek.lseek fd offset direction)) /\ true ) /\ (System__crtl__off_t___axiom.dynamic_invariant result True False True) ) }
 
 axiom lseek__post_axiom :
  (forall fd #"s-crtl.ads" 171 0 0#  offset #"s-crtl.ads" 171 0 0#  direction #"s-crtl.ads" 171 0 0#  : int [(System__crtl__lseek.lseek fd offset direction)].
   ( ( ( (System__crtl__int___axiom.dynamic_invariant fd True True True) /\ (System__crtl__off_t___axiom.dynamic_invariant offset True True True) ) /\ (System__crtl__int___axiom.dynamic_invariant direction True True True) ) -> (let result = (System__crtl__lseek.lseek fd offset direction) in (
    ( ( true /\ (System__crtl__off_t___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "malloc" defined at s-crtl.ads:174, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__malloc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__malloc

 val malloc #"s-crtl.ads" 174 0 0# 
   (size : BV64.t) : BV64.t
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__crtl__malloc.malloc size)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True) ) }
 
 axiom malloc__post_axiom :
  (forall size #"s-crtl.ads" 174 0 0#  : BV64.t [(System__crtl__malloc.malloc size)].
   ( (System__crtl__size_t___axiom.dynamic_invariant size True True True) -> (let result = (System__crtl__malloc.malloc size) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "memcpy" defined at s-crtl.ads:177, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__memcpy___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val memcpy #"s-crtl.ads" 177 0 0# 
   (s1 : BV64.t) (s2 : BV64.t) (n : BV64.t) : unit
  requires { #"s-crtl.ads" 60 0 0# true }
  ensures { #"s-crtl.ads" 60 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "memmove" defined at s-crtl.ads:180, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__memmove___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val memmove #"s-crtl.ads" 180 0 0# 
   (s1 : BV64.t) (s2 : BV64.t) (n : BV64.t) : unit
  requires { #"s-crtl.ads" 60 0 0# true }
  ensures { #"s-crtl.ads" 60 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "mktemp" defined at s-crtl.ads:183, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__mktemp___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val mktemp #"s-crtl.ads" 183 0 0# 
   (template : BV64.t) : unit
  requires { #"s-crtl.ads" 41 0 0# true }
  ensures { #"s-crtl.ads" 41 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "pclose" defined at s-crtl.ads:186, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__pclose___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__crtl__int___axiom
 use        System__crtl__pclose

 val pclose #"s-crtl.ads" 186 0 0# 
   (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__pclose.pclose stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom pclose__post_axiom :
  (forall stream #"s-crtl.ads" 186 0 0#  : BV64.t [(System__crtl__pclose.pclose stream)].
   ( (System__address___axiom.dynamic_invariant stream True True True) -> (let result = (System__crtl__pclose.pclose stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "popen" defined at s-crtl.ads:189, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__popen___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__crtl__popen

 val popen #"s-crtl.ads" 189 0 0# 
   (command : BV64.t) (mode : BV64.t) : BV64.t
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__crtl__popen.popen command mode)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True) ) }
 
 axiom popen__post_axiom :
  (forall command #"s-crtl.ads" 189 0 0#  mode #"s-crtl.ads" 189 0 0#  : BV64.t [(System__crtl__popen.popen command mode)].
   ( ( (System__address___axiom.dynamic_invariant command True True True) /\ (System__address___axiom.dynamic_invariant mode True True True) ) -> (let result = (System__crtl__popen.popen command mode) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "realloc" defined at s-crtl.ads:192, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__realloc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__realloc

 val realloc #"s-crtl.ads" 192 0 0# 
   (ptr : BV64.t) (size : BV64.t) : BV64.t
  requires { #"system.ads" 116 0 0# true }
  ensures { #"system.ads" 116 0 0# ( ( (result = (System__crtl__realloc.realloc ptr size)) /\ true ) /\ (System__address___axiom.dynamic_invariant result True False True) ) }
 
 axiom realloc__post_axiom :
  (forall ptr #"s-crtl.ads" 193 0 0#  size #"s-crtl.ads" 193 0 0#  : BV64.t [(System__crtl__realloc.realloc ptr size)].
   ( ( (System__address___axiom.dynamic_invariant ptr True True True) /\ (System__crtl__size_t___axiom.dynamic_invariant size True True True) ) -> (let result = (System__crtl__realloc.realloc ptr size) in (
    ( ( true /\ (System__address___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "rewind" defined at s-crtl.ads:196, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__rewind___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val rewind #"s-crtl.ads" 196 0 0# 
   (stream : BV64.t) : unit
  requires { #"s-crtl.ads" 50 0 0# true }
  ensures { #"s-crtl.ads" 50 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "rmdir" defined at s-crtl.ads:199, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__rmdir___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__crtl__int___axiom
 use        System__crtl__rmdir

 val rmdir #"s-crtl.ads" 199 0 0# 
   (dir_name : Standard__string.string) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__rmdir.rmdir dir_name)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom rmdir__post_axiom :
  (forall dir_name #"s-crtl.ads" 199 0 0#  : Standard__string.string [(System__crtl__rmdir.rmdir dir_name)].
   ( (Standard__string___axiom.dynamic_invariant dir_name True True True) -> (let result = (System__crtl__rmdir.rmdir dir_name) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "chdir" defined at s-crtl.ads:202, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__chdir___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__crtl__int___axiom
 use        System__crtl__chdir

 val chdir #"s-crtl.ads" 202 0 0# 
   (dir_name : Standard__string.string) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__chdir.chdir dir_name)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom chdir__post_axiom :
  (forall dir_name #"s-crtl.ads" 202 0 0#  : Standard__string.string [(System__crtl__chdir.chdir dir_name)].
   ( (Standard__string___axiom.dynamic_invariant dir_name True True True) -> (let result = (System__crtl__chdir.chdir dir_name) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "mkdir" defined at s-crtl.ads:205, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__mkdir___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__crtl__int___axiom
 use        System__crtl__filename_encoding___axiom
 use        System__crtl__mkdir

 val mkdir #"s-crtl.ads" 205 0 0# 
   (dir_name : Standard__string.string) (encoding : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__mkdir.mkdir dir_name encoding)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom mkdir__post_axiom :
  (forall dir_name #"s-crtl.ads" 206 0 0#  : Standard__string.string.
  (forall encoding #"s-crtl.ads" 207 0 0#  : int [(System__crtl__mkdir.mkdir dir_name encoding)].
   ( ( (Standard__string___axiom.dynamic_invariant dir_name True True True) /\ (System__crtl__filename_encoding___axiom.dynamic_invariant encoding True True True) ) -> (let result = (System__crtl__mkdir.mkdir dir_name encoding) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "setvbuf" defined at s-crtl.ads:210, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__setvbuf___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__setvbuf

 val setvbuf #"s-crtl.ads" 210 0 0# 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__setvbuf.setvbuf stream buffer mode size)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom setvbuf__post_axiom :
  (forall stream #"s-crtl.ads" 211 0 0#  buffer #"s-crtl.ads" 212 0 0#  size #"s-crtl.ads" 214 0 0#  : BV64.t.
  (forall mode #"s-crtl.ads" 213 0 0#  : int [(System__crtl__setvbuf.setvbuf stream buffer mode size)].
   ( ( ( ( (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__int___axiom.dynamic_invariant mode True True True) ) /\ (System__crtl__size_t___axiom.dynamic_invariant size True True True) ) -> (let result = (System__crtl__setvbuf.setvbuf stream buffer mode size) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "tmpnam" defined at s-crtl.ads:217, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__tmpnam___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val tmpnam #"s-crtl.ads" 217 0 0# 
   (str : BV64.t) : unit
  requires { #"s-crtl.ads" 41 0 0# true }
  ensures { #"s-crtl.ads" 41 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "tmpfile" defined at s-crtl.ads:220, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__tmpfile___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__tmpfile

 val tmpfile #"s-crtl.ads" 220 0 0# 
   (__void_param : unit) : BV64.t
  requires { #"s-crtl.ads" 50 0 0# true }
  ensures { #"s-crtl.ads" 50 0 0# ( ( (result = (System__crtl__tmpfile.tmpfile ())) /\ true ) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
   (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) }
 
 axiom tmpfile__post_axiom :
  (forall __void_param #"s-crtl.ads" 220 0 0#  : unit [(System__crtl__tmpfile.tmpfile __void_param)].
   ( true -> (let result = (System__crtl__tmpfile.tmpfile __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
     (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ungetc" defined at s-crtl.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__ungetc___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__files
 use        System__crtl__int___axiom
 use        System__crtl__ungetc

 val ungetc #"s-crtl.ads" 223 0 0# 
   (c : int) (stream : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__ungetc.ungetc c stream)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom ungetc__post_axiom :
  (forall c #"s-crtl.ads" 223 0 0#  : int.
  (forall stream #"s-crtl.ads" 223 0 0#  : BV64.t [(System__crtl__ungetc.ungetc c stream)].
   ( ( (System__crtl__int___axiom.dynamic_invariant c True True True) /\ (if (( True \/ (BV64.ule System__crtl__files.first System__crtl__files.last) )) then (
    (System__crtl__files.dynamic_property System__crtl__files.first System__crtl__files.last stream)) else true) ) -> (let result = (System__crtl__ungetc.ungetc c stream) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "unlink" defined at s-crtl.ads:226, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__unlink___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__int___axiom
 use        System__crtl__unlink

 val unlink #"s-crtl.ads" 226 0 0# 
   (filename : BV64.t) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__unlink.unlink filename)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom unlink__post_axiom :
  (forall filename #"s-crtl.ads" 226 0 0#  : BV64.t [(System__crtl__unlink.unlink filename)].
   ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) -> (let result = (System__crtl__unlink.unlink filename) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "open" defined at s-crtl.ads:229, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__open___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__int___axiom
 use        System__crtl__open

 val open #"s-crtl.ads" 229 0 0# 
   (filename : BV64.t) (oflag : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__open.open filename oflag)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom open__post_axiom :
  (forall filename #"s-crtl.ads" 229 0 0#  : BV64.t.
  (forall oflag #"s-crtl.ads" 229 0 0#  : int [(System__crtl__open.open filename oflag)].
   ( ( (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last filename)) else true) /\ (System__crtl__int___axiom.dynamic_invariant oflag True True True) ) -> (let result = (System__crtl__open.open filename oflag) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "close" defined at s-crtl.ads:232, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__close___axiom
 use import "_gnatprove_standard".Main
 use        System__crtl__int___axiom
 use        System__crtl__close

 val close #"s-crtl.ads" 232 0 0# 
   (fd : int) : int
  requires { #"s-crtl.ads" 53 0 0# true }
  ensures { #"s-crtl.ads" 53 0 0# ( ( (result = (System__crtl__close.close fd)) /\ true ) /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom close__post_axiom :
  (forall fd #"s-crtl.ads" 232 0 0#  : int [(System__crtl__close.close fd)].
   ( (System__crtl__int___axiom.dynamic_invariant fd True True True) -> (let result = (System__crtl__close.close fd) in (
    ( ( true /\ (System__crtl__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "read" defined at s-crtl.ads:235, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__read___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__int___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__ssize_t___axiom
 use        System__crtl__read

 val read #"s-crtl.ads" 235 0 0# 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
  requires { #"s-crtl.ads" 62 0 0# true }
  ensures { #"s-crtl.ads" 62 0 0# ( ( (result = (System__crtl__read.read fd buffer count)) /\ true ) /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True) ) }
 
 axiom read__post_axiom :
  (forall fd #"s-crtl.ads" 235 0 0#  : int.
  (forall buffer #"s-crtl.ads" 235 0 0#  count #"s-crtl.ads" 235 0 0#  : BV64.t [(System__crtl__read.read fd buffer count)].
   ( ( ( (System__crtl__int___axiom.dynamic_invariant fd True True True) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__size_t___axiom.dynamic_invariant count True True True) ) -> (let result = (System__crtl__read.read fd buffer count) in (
    ( ( true /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "write" defined at s-crtl.ads:238, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__crtl__write___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__crtl__chars
 use        System__crtl__int___axiom
 use        System__crtl__size_t___axiom
 use        System__crtl__ssize_t___axiom
 use        System__crtl__write

 val write #"s-crtl.ads" 238 0 0# 
   (fd : int) (buffer : BV64.t) (count : BV64.t) : int
  requires { #"s-crtl.ads" 62 0 0# true }
  ensures { #"s-crtl.ads" 62 0 0# ( ( (result = (System__crtl__write.write fd buffer count)) /\ true ) /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True) ) }
 
 axiom write__post_axiom :
  (forall fd #"s-crtl.ads" 238 0 0#  : int.
  (forall buffer #"s-crtl.ads" 238 0 0#  count #"s-crtl.ads" 238 0 0#  : BV64.t [(System__crtl__write.write fd buffer count)].
   ( ( ( (System__crtl__int___axiom.dynamic_invariant fd True True True) /\ (if (( True \/ (BV64.ule System__crtl__chars.first System__crtl__chars.last) )) then (
    (System__crtl__chars.dynamic_property System__crtl__chars.first System__crtl__chars.last buffer)) else true) ) /\ (System__crtl__size_t___axiom.dynamic_invariant count True True True) ) -> (let result = (System__crtl__write.write fd buffer count) in (
    ( ( true /\ (System__crtl__ssize_t___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "stdin" defined at i-cstrea.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stdin___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__stdin

 val stdin #"i-cstrea.ads" 72 0 0# 
   (__void_param : unit) : BV64.t
  requires { #"i-cstrea.ads" 41 0 0# true }
  ensures { #"i-cstrea.ads" 41 0 0# ( ( (result = (Interfaces__c_streams__stdin.stdin ())) /\ true ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stdin__post_axiom :
  (forall __void_param #"i-cstrea.ads" 72 0 0#  : unit [(Interfaces__c_streams__stdin.stdin __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stdin.stdin __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "stdout" defined at i-cstrea.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stdout___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__stdout

 val stdout #"i-cstrea.ads" 73 0 0# 
   (__void_param : unit) : BV64.t
  requires { #"i-cstrea.ads" 41 0 0# true }
  ensures { #"i-cstrea.ads" 41 0 0# ( ( (result = (Interfaces__c_streams__stdout.stdout ())) /\ true ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stdout__post_axiom :
  (forall __void_param #"i-cstrea.ads" 73 0 0#  : unit [(Interfaces__c_streams__stdout.stdout __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stdout.stdout __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "stderr" defined at i-cstrea.ads:74, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__stderr___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__stderr

 val stderr #"i-cstrea.ads" 74 0 0# 
   (__void_param : unit) : BV64.t
  requires { #"i-cstrea.ads" 41 0 0# true }
  ensures { #"i-cstrea.ads" 41 0 0# ( ( (result = (Interfaces__c_streams__stderr.stderr ())) /\ true ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
   (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) }
 
 axiom stderr__post_axiom :
  (forall __void_param #"i-cstrea.ads" 74 0 0#  : unit [(Interfaces__c_streams__stderr.stderr __void_param)].
   ( true -> (let result = (Interfaces__c_streams__stderr.stderr __void_param) in (
    ( ( true /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
     (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last result)) else true) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "feof" defined at i-cstrea.ads:95, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__feof___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom
 use        Interfaces__c_streams__feof

 val feof #"i-cstrea.ads" 95 0 0# 
   (stream : BV64.t) : int
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# ( ( (result = (Interfaces__c_streams__feof.feof stream)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom feof__post_axiom :
  (forall stream #"i-cstrea.ads" 95 0 0#  : BV64.t [(Interfaces__c_streams__feof.feof stream)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__feof.feof stream) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "ferror" defined at i-cstrea.ads:97, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__ferror___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom
 use        Interfaces__c_streams__ferror

 val ferror #"i-cstrea.ads" 97 0 0# 
   (stream : BV64.t) : int
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# ( ( (result = (Interfaces__c_streams__ferror.ferror stream)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom ferror__post_axiom :
  (forall stream #"i-cstrea.ads" 97 0 0#  : BV64.t [(Interfaces__c_streams__ferror.ferror stream)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__ferror.ferror stream) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fileno" defined at i-cstrea.ads:106, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fileno___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom
 use        Interfaces__c_streams__fileno

 val fileno #"i-cstrea.ads" 106 0 0# 
   (stream : BV64.t) : int
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# ( ( (result = (Interfaces__c_streams__fileno.fileno stream)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom fileno__post_axiom :
  (forall stream #"i-cstrea.ads" 106 0 0#  : BV64.t [(Interfaces__c_streams__fileno.fileno stream)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) -> (let result = (Interfaces__c_streams__fileno.fileno stream) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fread" defined at i-cstrea.ads:128, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fread___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t___axiom
 use        Interfaces__c_streams__voids
 use        Interfaces__c_streams__fread

 val fread #"i-cstrea.ads" 128 0 0# 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
  requires { #"i-cstrea.ads" 44 0 0# true }
  ensures { #"i-cstrea.ads" 44 0 0# ( ( (result = (Interfaces__c_streams__fread.fread buffer size count stream)) /\ true ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True) ) }
 
 axiom fread__post_axiom :
  (forall buffer #"i-cstrea.ads" 129 0 0#  size #"i-cstrea.ads" 130 0 0#  count #"i-cstrea.ads" 131 0 0#  stream #"i-cstrea.ads" 132 0 0#  : BV64.t [(Interfaces__c_streams__fread.fread buffer size count stream)].
   ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant count True True True) ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fread.fread buffer size count stream) in (
    ( ( true /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fread__2" defined at i-cstrea.ads:134, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fread__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t___axiom
 use        Interfaces__c_streams__voids
 use        Interfaces__c_streams__fread__2

 val fread__2 #"i-cstrea.ads" 134 0 0# 
   (buffer : BV64.t) (index : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
  requires { #"i-cstrea.ads" 44 0 0# true }
  ensures { #"i-cstrea.ads" 44 0 0# ( ( (result = (Interfaces__c_streams__fread__2.fread__2 buffer index size count stream)) /\ true ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True) ) }
 
 axiom fread__2__post_axiom :
  (forall buffer #"i-cstrea.ads" 135 0 0#  index #"i-cstrea.ads" 136 0 0#  size #"i-cstrea.ads" 137 0 0#  count #"i-cstrea.ads" 138 0 0#  stream #"i-cstrea.ads" 139 0 0#  : BV64.t [(Interfaces__c_streams__fread__2.fread__2 buffer index size count stream)].
   ( ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant index True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant count True True True) ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fread__2.fread__2 buffer index size count stream) in (
    ( ( true /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "fwrite" defined at i-cstrea.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__fwrite___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__size_t___axiom
 use        Interfaces__c_streams__voids
 use        Interfaces__c_streams__fwrite

 val fwrite #"i-cstrea.ads" 171 0 0# 
   (buffer : BV64.t) (size : BV64.t) (count : BV64.t) (stream : BV64.t) : BV64.t
  requires { #"i-cstrea.ads" 44 0 0# true }
  ensures { #"i-cstrea.ads" 44 0 0# ( ( (result = (Interfaces__c_streams__fwrite.fwrite buffer size count stream)) /\ true ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True) ) }
 
 axiom fwrite__post_axiom :
  (forall buffer #"i-cstrea.ads" 172 0 0#  size #"i-cstrea.ads" 173 0 0#  count #"i-cstrea.ads" 174 0 0#  stream #"i-cstrea.ads" 175 0 0#  : BV64.t [(Interfaces__c_streams__fwrite.fwrite buffer size count stream)].
   ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last) )) then (
    (Interfaces__c_streams__voids.dynamic_property Interfaces__c_streams__voids.first Interfaces__c_streams__voids.last buffer)) else true) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant count True True True) ) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) ) -> (let result = (Interfaces__c_streams__fwrite.fwrite buffer size count stream) in (
    ( ( true /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "setvbuf" defined at i-cstrea.ads:184, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__setvbuf___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__chars
 use        Interfaces__c_streams__files
 use        Interfaces__c_streams__int___axiom
 use        Interfaces__c_streams__size_t___axiom
 use        Interfaces__c_streams__setvbuf

 val setvbuf #"i-cstrea.ads" 184 0 0# 
   (stream : BV64.t) (buffer : BV64.t) (mode : int) (size : BV64.t) : int
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# ( ( (result = (Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom setvbuf__post_axiom :
  (forall stream #"i-cstrea.ads" 185 0 0#  buffer #"i-cstrea.ads" 186 0 0#  size #"i-cstrea.ads" 188 0 0#  : BV64.t.
  (forall mode #"i-cstrea.ads" 187 0 0#  : int [(Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size)].
   ( ( ( ( (if (( True \/ (BV64.ule Interfaces__c_streams__files.first Interfaces__c_streams__files.last) )) then (
    (Interfaces__c_streams__files.dynamic_property Interfaces__c_streams__files.first Interfaces__c_streams__files.last stream)) else true) /\ (if (( True \/ (BV64.ule Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last) )) then (
    (Interfaces__c_streams__chars.dynamic_property Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last buffer)) else true) ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant mode True True True) ) /\ (Interfaces__c_streams__size_t___axiom.dynamic_invariant size True True True) ) -> (let result = (Interfaces__c_streams__setvbuf.setvbuf stream buffer mode size) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "file_exists" defined at i-cstrea.ads:212, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__file_exists___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        Interfaces__c_streams__chars
 use        Interfaces__c_streams__int___axiom
 use        Interfaces__c_streams__file_exists

 val file_exists #"i-cstrea.ads" 212 0 0# 
   (name : BV64.t) : int
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# ( ( (result = (Interfaces__c_streams__file_exists.file_exists name)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom file_exists__post_axiom :
  (forall name #"i-cstrea.ads" 212 0 0#  : BV64.t [(Interfaces__c_streams__file_exists.file_exists name)].
   ( (if (( True \/ (BV64.ule Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last) )) then (
    (Interfaces__c_streams__chars.dynamic_property Interfaces__c_streams__chars.first Interfaces__c_streams__chars.last name)) else true) -> (let result = (Interfaces__c_streams__file_exists.file_exists name) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_regular_file" defined at i-cstrea.ads:215, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__is_regular_file___axiom
 use import "_gnatprove_standard".Main
 use        Interfaces__c_streams__int___axiom
 use        Interfaces__c_streams__is_regular_file

 val is_regular_file #"i-cstrea.ads" 215 0 0# 
   (handle : int) : int
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# ( ( (result = (Interfaces__c_streams__is_regular_file.is_regular_file handle)) /\ true ) /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) }
 
 axiom is_regular_file__post_axiom :
  (forall handle #"i-cstrea.ads" 215 0 0#  : int [(Interfaces__c_streams__is_regular_file.is_regular_file handle)].
   ( (Interfaces__c_streams__int___axiom.dynamic_invariant handle True True True) -> (let result = (Interfaces__c_streams__is_regular_file.is_regular_file handle) in (
    ( ( true /\ (Interfaces__c_streams__int___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_binary_mode" defined at i-cstrea.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_binary_mode___axiom
 use import "_gnatprove_standard".Main

 val set_binary_mode #"i-cstrea.ads" 223 0 0# 
   (handle : int) : unit
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_text_mode" defined at i-cstrea.ads:224, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_text_mode___axiom
 use import "_gnatprove_standard".Main

 val set_text_mode #"i-cstrea.ads" 224 0 0# 
   (handle : int) : unit
  requires { #"i-cstrea.ads" 42 0 0# true }
  ensures { #"i-cstrea.ads" 42 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_mode" defined at i-cstrea.ads:254, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__set_mode___axiom
 use import "_gnatprove_standard".Main

 val set_mode #"i-cstrea.ads" 254 0 0# 
   (handle : int) (mode : int) : unit
  requires { #"i-cstrea.ads" 230 0 0# true }
  ensures { #"i-cstrea.ads" 230 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "full_name" defined at i-cstrea.ads:262, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Interfaces__c_streams__full_name___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 val full_name #"i-cstrea.ads" 262 0 0# 
   (nam : BV64.t) (buffer : BV64.t) : unit
  requires { #"i-cstrea.ads" 40 0 0# true }
  ensures { #"i-cstrea.ads" 40 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "get_wc_encoding_method" defined at s-wchcon.ads:203, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__get_wc_encoding_method___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        System__wch_con__wc_encoding_method___axiom
 use        System__wch_con__get_wc_encoding_method

 val get_wc_encoding_method #"s-wchcon.ads" 203 0 0# 
   (c : int) : int
  requires { #"s-wchcon.ads" 94 0 0# true }
  ensures { #"s-wchcon.ads" 94 0 0# ( ( (result = (System__wch_con__get_wc_encoding_method.get_wc_encoding_method c)) /\ true ) /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True) ) }
 
 axiom get_wc_encoding_method__post_axiom :
  (forall c #"s-wchcon.ads" 203 0 0#  : int [(System__wch_con__get_wc_encoding_method.get_wc_encoding_method c)].
   ( (Standard__character___axiom.dynamic_invariant c True True True) -> (let result = (System__wch_con__get_wc_encoding_method.get_wc_encoding_method c) in (
    ( ( true /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_wc_encoding_method__2" defined at s-wchcon.ads:207, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__get_wc_encoding_method__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        System__wch_con__wc_encoding_method___axiom
 use        System__wch_con__get_wc_encoding_method__2

 val get_wc_encoding_method__2 #"s-wchcon.ads" 207 0 0# 
   (s : Standard__string.string) : int
  requires { #"s-wchcon.ads" 94 0 0# true }
  ensures { #"s-wchcon.ads" 94 0 0# ( ( (result = (System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s)) /\ true ) /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True) ) }
 
 axiom get_wc_encoding_method__2__post_axiom :
  (forall s #"s-wchcon.ads" 207 0 0#  : Standard__string.string [(System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s)].
   ( (Standard__string___axiom.dynamic_invariant s True True True) -> (let result = (System__wch_con__get_wc_encoding_method__2.get_wc_encoding_method__2 s) in (
    ( ( true /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_start_of_encoding" defined at s-wchcon.ads:212, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__wch_con__is_start_of_encoding___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        System__wch_con__wc_encoding_method___axiom
 use        System__wch_con__is_start_of_encoding

 val is_start_of_encoding #"s-wchcon.ads" 212 0 0# 
   (c : int) (em : int) : bool
  requires { #"s-wchcon.ads" 94 0 0# true }
  ensures { #"s-wchcon.ads" 94 0 0# ( ( (result = (System__wch_con__is_start_of_encoding.is_start_of_encoding c em)) /\ true ) /\ true ) }
 
 axiom is_start_of_encoding__post_axiom :
  (forall c #"s-wchcon.ads" 213 0 0#  em #"s-wchcon.ads" 214 0 0#  : int [(System__wch_con__is_start_of_encoding.is_start_of_encoding c em)].
   ( ( (Standard__character___axiom.dynamic_invariant c True True True) /\ (System__wch_con__wc_encoding_method___axiom.dynamic_invariant em True True True) ) -> (let result = (System__wch_con__is_start_of_encoding.is_start_of_encoding c em) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "create" defined at a-textio.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__create___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val create #"a-textio.ads" 86 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) (name : Standard__string.string) (form : Standard__string.string) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "open" defined at a-textio.ads:92, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__open___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val open #"a-textio.ads" 92 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) (name : Standard__string.string) (form : Standard__string.string) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "close" defined at a-textio.ads:98, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__close___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val close #"a-textio.ads" 98 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "delete" defined at a-textio.ads:99, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__delete___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val delete #"a-textio.ads" 99 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset" defined at a-textio.ads:100, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__reset___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val reset #"a-textio.ads" 100 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) (mode : int) : unit
  requires { #"a-textio.ads" 53 0 0# true }
  ensures { #"a-textio.ads" 53 0 0# (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "reset__2" defined at a-textio.ads:101, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__reset__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom

 val reset__2 #"a-textio.ads" 101 0 0# 
   (file : Ada__text_io__file_type.file_type__ref) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# (Ada__text_io__file_type___axiom.dynamic_invariant file.Ada__text_io__file_type.file_type__content True True True) }
  writes {file}

end

(* Module for declaring a program function (and possibly an axiom) for "mode" defined at a-textio.ads:103, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__mode___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__file_mode___axiom
 use        Ada__text_io__mode

 val mode #"a-textio.ads" 103 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { #"a-textio.ads" 53 0 0# true }
  ensures { #"a-textio.ads" 53 0 0# ( ( (result = (Ada__text_io__mode.mode file)) /\ true ) /\ (Ada__text_io__file_mode___axiom.dynamic_invariant result True False True) ) }
 
 axiom mode__post_axiom :
  (forall file #"a-textio.ads" 103 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__mode.mode file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__mode.mode file) in (
    ( ( true /\ (Ada__text_io__file_mode___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "name" defined at a-textio.ads:104, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__name___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__name

 val name #"a-textio.ads" 104 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Ada__text_io__name.name file)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True) ) }
 
 axiom name__post_axiom :
  (forall file #"a-textio.ads" 104 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__name.name file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__name.name file) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "form" defined at a-textio.ads:105, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__form___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__form

 val form #"a-textio.ads" 105 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Ada__text_io__form.form file)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True) ) }
 
 axiom form__post_axiom :
  (forall file #"a-textio.ads" 105 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__form.form file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__form.form file) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "is_open" defined at a-textio.ads:107, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__is_open___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__is_open

 val is_open #"a-textio.ads" 107 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__is_open.is_open file)) /\ true ) /\ true ) }
 
 axiom is_open__post_axiom :
  (forall file #"a-textio.ads" 107 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__is_open.is_open file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__is_open.is_open file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_input" defined at a-textio.ads:113, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_input___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_input #"a-textio.ads" 113 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_output" defined at a-textio.ads:114, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_output___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_output #"a-textio.ads" 114 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_error" defined at a-textio.ads:115, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_error___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_error #"a-textio.ads" 115 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "standard_input" defined at a-textio.ads:117, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_input___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__standard_input

 val standard_input #"a-textio.ads" 117 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__standard_input.standard_input ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom standard_input__post_axiom :
  (forall __void_param #"a-textio.ads" 117 0 0#  : unit [(Ada__text_io__standard_input.standard_input __void_param)].
   ( true -> (let result = (Ada__text_io__standard_input.standard_input __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "standard_output" defined at a-textio.ads:118, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_output___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__standard_output

 val standard_output #"a-textio.ads" 118 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__standard_output.standard_output ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom standard_output__post_axiom :
  (forall __void_param #"a-textio.ads" 118 0 0#  : unit [(Ada__text_io__standard_output.standard_output __void_param)].
   ( true -> (let result = (Ada__text_io__standard_output.standard_output __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "standard_error" defined at a-textio.ads:119, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__standard_error___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__standard_error

 val standard_error #"a-textio.ads" 119 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__standard_error.standard_error ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom standard_error__post_axiom :
  (forall __void_param #"a-textio.ads" 119 0 0#  : unit [(Ada__text_io__standard_error.standard_error __void_param)].
   ( true -> (let result = (Ada__text_io__standard_error.standard_error __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_input" defined at a-textio.ads:121, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_input___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__current_input

 val current_input #"a-textio.ads" 121 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__current_input.current_input ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom current_input__post_axiom :
  (forall __void_param #"a-textio.ads" 121 0 0#  : unit [(Ada__text_io__current_input.current_input __void_param)].
   ( true -> (let result = (Ada__text_io__current_input.current_input __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_output" defined at a-textio.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_output___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__current_output

 val current_output #"a-textio.ads" 122 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__current_output.current_output ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom current_output__post_axiom :
  (forall __void_param #"a-textio.ads" 122 0 0#  : unit [(Ada__text_io__current_output.current_output __void_param)].
   ( true -> (let result = (Ada__text_io__current_output.current_output __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "current_error" defined at a-textio.ads:123, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__current_error___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__current_error

 val current_error #"a-textio.ads" 123 0 0# 
   (__void_param : unit) : Ada__text_io__file_type.file_type
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__current_error.current_error ())) /\ true ) /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) }
 
 axiom current_error__post_axiom :
  (forall __void_param #"a-textio.ads" 123 0 0#  : unit [(Ada__text_io__current_error.current_error __void_param)].
   ( true -> (let result = (Ada__text_io__current_error.current_error __void_param) in (
    ( ( true /\ (Ada__text_io__file_type___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "flush" defined at a-textio.ads:142, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__flush___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val flush #"a-textio.ads" 142 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "flush__2" defined at a-textio.ads:143, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__flush__2___axiom
 use import "_gnatprove_standard".Main

 val flush__2 #"a-textio.ads" 143 0 0# 
   (__void_param : unit) : unit
  requires { #"a-textio.ads" 143 0 0# true }
  ensures { #"a-textio.ads" 143 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length" defined at a-textio.ads:149, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_line_length #"a-textio.ads" 149 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line_length__2" defined at a-textio.ads:150, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line_length__2___axiom
 use import "_gnatprove_standard".Main

 val set_line_length__2 #"a-textio.ads" 150 0 0# 
   (to__ : int) : unit
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length" defined at a-textio.ads:152, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_page_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_page_length #"a-textio.ads" 152 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_page_length__2" defined at a-textio.ads:153, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_page_length__2___axiom
 use import "_gnatprove_standard".Main

 val set_page_length__2 #"a-textio.ads" 153 0 0# 
   (to__ : int) : unit
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:155, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__count___axiom
 use        Ada__text_io__line_length

 val line_length #"a-textio.ads" 155 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# ( ( (result = (Ada__text_io__line_length.line_length file)) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) }
 
 axiom line_length__post_axiom :
  (forall file #"a-textio.ads" 155 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__line_length.line_length file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__line_length.line_length file) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:156, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2

 val line_length__2 #"a-textio.ads" 156 0 0# 
   (__void_param : unit) : int
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# ( ( (result = (Ada__text_io__line_length__2.line_length__2 ())) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) }
 
 axiom line_length__2__post_axiom :
  (forall __void_param #"a-textio.ads" 156 0 0#  : unit [(Ada__text_io__line_length__2.line_length__2 __void_param)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 __void_param) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:158, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__count___axiom
 use        Ada__text_io__page_length

 val page_length #"a-textio.ads" 158 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# ( ( (result = (Ada__text_io__page_length.page_length file)) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) }
 
 axiom page_length__post_axiom :
  (forall file #"a-textio.ads" 158 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__page_length.page_length file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__page_length.page_length file) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:159, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__count___axiom
 use        Ada__text_io__page_length__2

 val page_length__2 #"a-textio.ads" 159 0 0# 
   (__void_param : unit) : int
  requires { #"a-textio.ads" 64 0 0# true }
  ensures { #"a-textio.ads" 64 0 0# ( ( (result = (Ada__text_io__page_length__2.page_length__2 ())) /\ true ) /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) }
 
 axiom page_length__2__post_axiom :
  (forall __void_param #"a-textio.ads" 159 0 0#  : unit [(Ada__text_io__page_length__2.page_length__2 __void_param)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 __void_param) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "new_line" defined at a-textio.ads:165, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val new_line #"a-textio.ads" 165 0 0# 
   (file : Ada__text_io__file_type.file_type) (spacing : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_line__2" defined at a-textio.ads:166, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_line__2___axiom
 use import "_gnatprove_standard".Main

 val new_line__2 #"a-textio.ads" 166 0 0# 
   (spacing : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line" defined at a-textio.ads:168, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val skip_line #"a-textio.ads" 168 0 0# 
   (file : Ada__text_io__file_type.file_type) (spacing : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_line__2" defined at a-textio.ads:169, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_line__2___axiom
 use import "_gnatprove_standard".Main

 val skip_line__2 #"a-textio.ads" 169 0 0# 
   (spacing : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line" defined at a-textio.ads:171, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__end_of_line

 val end_of_line #"a-textio.ads" 171 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__end_of_line.end_of_line file)) /\ true ) /\ true ) }
 
 axiom end_of_line__post_axiom :
  (forall file #"a-textio.ads" 171 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__end_of_line.end_of_line file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__end_of_line.end_of_line file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_line__2" defined at a-textio.ads:172, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_line__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_line__2

 val end_of_line__2 #"a-textio.ads" 172 0 0# 
   (__void_param : unit) : bool
  requires { #"a-textio.ads" 172 0 0# true }
  ensures { #"a-textio.ads" 172 0 0# ( ( (result = (Ada__text_io__end_of_line__2.end_of_line__2 ())) /\ true ) /\ true ) }
 
 axiom end_of_line__2__post_axiom :
  (forall __void_param #"a-textio.ads" 172 0 0#  : unit [(Ada__text_io__end_of_line__2.end_of_line__2 __void_param)].
   ( true -> (let result = (Ada__text_io__end_of_line__2.end_of_line__2 __void_param) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "new_page" defined at a-textio.ads:174, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val new_page #"a-textio.ads" 174 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "new_page__2" defined at a-textio.ads:175, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__new_page__2___axiom
 use import "_gnatprove_standard".Main

 val new_page__2 #"a-textio.ads" 175 0 0# 
   (__void_param : unit) : unit
  requires { #"a-textio.ads" 175 0 0# true }
  ensures { #"a-textio.ads" 175 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page" defined at a-textio.ads:177, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val skip_page #"a-textio.ads" 177 0 0# 
   (file : Ada__text_io__file_type.file_type) : unit
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "skip_page__2" defined at a-textio.ads:178, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__skip_page__2___axiom
 use import "_gnatprove_standard".Main

 val skip_page__2 #"a-textio.ads" 178 0 0# 
   (__void_param : unit) : unit
  requires { #"a-textio.ads" 178 0 0# true }
  ensures { #"a-textio.ads" 178 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page" defined at a-textio.ads:180, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__end_of_page

 val end_of_page #"a-textio.ads" 180 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__end_of_page.end_of_page file)) /\ true ) /\ true ) }
 
 axiom end_of_page__post_axiom :
  (forall file #"a-textio.ads" 180 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__end_of_page.end_of_page file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__end_of_page.end_of_page file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_page__2" defined at a-textio.ads:181, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_page__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_page__2

 val end_of_page__2 #"a-textio.ads" 181 0 0# 
   (__void_param : unit) : bool
  requires { #"a-textio.ads" 181 0 0# true }
  ensures { #"a-textio.ads" 181 0 0# ( ( (result = (Ada__text_io__end_of_page__2.end_of_page__2 ())) /\ true ) /\ true ) }
 
 axiom end_of_page__2__post_axiom :
  (forall __void_param #"a-textio.ads" 181 0 0#  : unit [(Ada__text_io__end_of_page__2.end_of_page__2 __void_param)].
   ( true -> (let result = (Ada__text_io__end_of_page__2.end_of_page__2 __void_param) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file" defined at a-textio.ads:183, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_file___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__end_of_file

 val end_of_file #"a-textio.ads" 183 0 0# 
   (file : Ada__text_io__file_type.file_type) : bool
  requires { #"a-textio.ads" 52 0 0# true }
  ensures { #"a-textio.ads" 52 0 0# ( ( (result = (Ada__text_io__end_of_file.end_of_file file)) /\ true ) /\ true ) }
 
 axiom end_of_file__post_axiom :
  (forall file #"a-textio.ads" 183 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__end_of_file.end_of_file file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__end_of_file.end_of_file file) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "end_of_file__2" defined at a-textio.ads:184, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__end_of_file__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__end_of_file__2

 val end_of_file__2 #"a-textio.ads" 184 0 0# 
   (__void_param : unit) : bool
  requires { #"a-textio.ads" 184 0 0# true }
  ensures { #"a-textio.ads" 184 0 0# ( ( (result = (Ada__text_io__end_of_file__2.end_of_file__2 ())) /\ true ) /\ true ) }
 
 axiom end_of_file__2__post_axiom :
  (forall __void_param #"a-textio.ads" 184 0 0#  : unit [(Ada__text_io__end_of_file__2.end_of_file__2 __void_param)].
   ( true -> (let result = (Ada__text_io__end_of_file__2.end_of_file__2 __void_param) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "set_col" defined at a-textio.ads:186, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_col___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_col #"a-textio.ads" 186 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_col__2" defined at a-textio.ads:187, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_col__2___axiom
 use import "_gnatprove_standard".Main

 val set_col__2 #"a-textio.ads" 187 0 0# 
   (to__ : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line" defined at a-textio.ads:189, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val set_line #"a-textio.ads" 189 0 0# 
   (file : Ada__text_io__file_type.file_type) (to__ : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "set_line__2" defined at a-textio.ads:190, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__set_line__2___axiom
 use import "_gnatprove_standard".Main

 val set_line__2 #"a-textio.ads" 190 0 0# 
   (to__ : int) : unit
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "col" defined at a-textio.ads:192, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__col___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__positive_count___axiom
 use        Ada__text_io__col

 val col #"a-textio.ads" 192 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# ( ( (result = (Ada__text_io__col.col file)) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) }
 
 axiom col__post_axiom :
  (forall file #"a-textio.ads" 192 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__col.col file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__col.col file) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "col__2" defined at a-textio.ads:193, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__col__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__positive_count___axiom
 use        Ada__text_io__col__2

 val col__2 #"a-textio.ads" 193 0 0# 
   (__void_param : unit) : int
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# ( ( (result = (Ada__text_io__col__2.col__2 ())) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) }
 
 axiom col__2__post_axiom :
  (forall __void_param #"a-textio.ads" 193 0 0#  : unit [(Ada__text_io__col__2.col__2 __void_param)].
   ( true -> (let result = (Ada__text_io__col__2.col__2 __void_param) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line" defined at a-textio.ads:195, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__positive_count___axiom
 use        Ada__text_io__line

 val line #"a-textio.ads" 195 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# ( ( (result = (Ada__text_io__line.line file)) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) }
 
 axiom line__post_axiom :
  (forall file #"a-textio.ads" 195 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__line.line file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__line.line file) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "line__2" defined at a-textio.ads:196, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__positive_count___axiom
 use        Ada__text_io__line__2

 val line__2 #"a-textio.ads" 196 0 0# 
   (__void_param : unit) : int
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# ( ( (result = (Ada__text_io__line__2.line__2 ())) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) }
 
 axiom line__2__post_axiom :
  (forall __void_param #"a-textio.ads" 196 0 0#  : unit [(Ada__text_io__line__2.line__2 __void_param)].
   ( true -> (let result = (Ada__text_io__line__2.line__2 __void_param) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page" defined at a-textio.ads:198, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__positive_count___axiom
 use        Ada__text_io__page

 val page #"a-textio.ads" 198 0 0# 
   (file : Ada__text_io__file_type.file_type) : int
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# ( ( (result = (Ada__text_io__page.page file)) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) }
 
 axiom page__post_axiom :
  (forall file #"a-textio.ads" 198 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__page.page file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__page.page file) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page__2" defined at a-textio.ads:199, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__positive_count___axiom
 use        Ada__text_io__page__2

 val page__2 #"a-textio.ads" 199 0 0# 
   (__void_param : unit) : int
  requires { #"a-textio.ads" 68 0 0# true }
  ensures { #"a-textio.ads" 68 0 0# ( ( (result = (Ada__text_io__page__2.page__2 ())) /\ true ) /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) }
 
 axiom page__2__post_axiom :
  (forall __void_param #"a-textio.ads" 199 0 0#  : unit [(Ada__text_io__page__2.page__2 __void_param)].
   ( true -> (let result = (Ada__text_io__page__2.page__2 __void_param) in (
    ( ( true /\ (Ada__text_io__positive_count___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at a-textio.ads:205, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val get #"a-textio.ads" 205 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at a-textio.ads:206, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val get__2 #"a-textio.ads" 206 0 0# 
   (item : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-textio.ads:207, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val put #"a-textio.ads" 207 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-textio.ads:208, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__2___axiom
 use import "_gnatprove_standard".Main

 val put__2 #"a-textio.ads" 208 0 0# 
   (item : int) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead" defined at a-textio.ads:210, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__look_ahead___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val look_ahead #"a-textio.ads" 210 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) (end_of_line : bool__ref) : unit
  requires { #"a-textio.ads" 213 0 0# true }
  ensures { #"a-textio.ads" 213 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "look_ahead__2" defined at a-textio.ads:215, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__look_ahead__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val look_ahead__2 #"a-textio.ads" 215 0 0# 
   (item : int__ref) (end_of_line : bool__ref) : unit
  requires { #"a-textio.ads" 217 0 0# true }
  ensures { #"a-textio.ads" 217 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item, end_of_line}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate" defined at a-textio.ads:219, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val get_immediate #"a-textio.ads" 219 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__2" defined at a-textio.ads:223, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val get_immediate__2 #"a-textio.ads" 223 0 0# 
   (item : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__3" defined at a-textio.ads:226, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom
 use        Ada__text_io__file_type

 val get_immediate__3 #"a-textio.ads" 226 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) (available : bool__ref) : unit
  requires { #"a-textio.ads" 229 0 0# true }
  ensures { #"a-textio.ads" 229 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get_immediate__4" defined at a-textio.ads:231, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_immediate__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__character___axiom

 val get_immediate__4 #"a-textio.ads" 231 0 0# 
   (item : int__ref) (available : bool__ref) : unit
  requires { #"a-textio.ads" 233 0 0# true }
  ensures { #"a-textio.ads" 233 0 0# (Standard__character___axiom.dynamic_invariant item.int__content True True True) }
  writes {item, available}

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at a-textio.ads:239, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Ada__text_io__file_type
 use        Array__Int__Standard__character

 val get__3 #"a-textio.ads" 239 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__4" defined at a-textio.ads:240, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__character

 val get__4 #"a-textio.ads" 240 0 0# 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at a-textio.ads:241, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 val put__3 #"a-textio.ads" 241 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Standard__string.string) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:242, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put__4 #"a-textio.ads" 242 0 0# 
   (item : Standard__string.string) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at a-textio.ads:244, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive
 use        Standard__integer__rep
 use        Ada__text_io__file_type
 use        Array__Int__Standard__character

 val get_line #"a-textio.ads" 244 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__character

 val get_line__2 #"a-textio.ads" 249 0 0# 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__3" defined at a-textio.ads:253, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__file_type
 use        Ada__text_io__file_type___axiom
 use        Ada__text_io__get_line__3

 val get_line__3 #"a-textio.ads" 253 0 0# 
   (file : Ada__text_io__file_type.file_type) : Standard__string.string
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Ada__text_io__get_line__3.get_line__3 file)) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True) ) }
 
 axiom get_line__3__post_axiom :
  (forall file #"a-textio.ads" 253 0 0#  : Ada__text_io__file_type.file_type [(Ada__text_io__get_line__3.get_line__3 file)].
   ( (Ada__text_io__file_type___axiom.dynamic_invariant file True True True) -> (let result = (Ada__text_io__get_line__3.get_line__3 file) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__4" defined at a-textio.ads:256, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__4___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__string___axiom
 use        Ada__text_io__get_line__4

 val get_line__4 #"a-textio.ads" 256 0 0# 
   (__void_param : unit) : Standard__string.string
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Ada__text_io__get_line__4.get_line__4 ())) /\ true ) /\ (Standard__string___axiom.dynamic_invariant result True False True) ) }
 
 axiom get_line__4__post_axiom :
  (forall __void_param #"a-textio.ads" 256 0 0#  : unit [(Ada__text_io__get_line__4.get_line__4 __void_param)].
   ( true -> (let result = (Ada__text_io__get_line__4.get_line__4 __void_param) in (
    ( ( true /\ (Standard__string___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:259, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Ada__text_io__file_type

 val put_line #"a-textio.ads" 259 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Standard__string.string) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:263, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put_line__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val put_line__2 #"a-textio.ads" 263 0 0# 
   (item : Standard__string.string) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "eof_char" defined at a-textio.ads:460, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__eof_char___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer___axiom
 use        Ada__text_io__eof_char

 val eof_char #"a-textio.ads" 460 0 0# 
   (__void_param : unit) : int
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Ada__text_io__eof_char.eof_char ())) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant result True False True) ) }
 
 axiom eof_char__post_axiom :
  (forall __void_param #"a-textio.ads" 460 0 0#  : unit [(Ada__text_io__eof_char.eof_char __void_param)].
   ( true -> (let result = (Ada__text_io__eof_char.eof_char __void_param) in (
    ( ( true /\ (Standard__integer___axiom.dynamic_invariant result True False True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "initialize_standard_files" defined at a-textio.ads:466, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__initialize_standard_files___axiom
 use import "_gnatprove_standard".Main

 val initialize_standard_files #"a-textio.ads" 466 0 0# 
   (__void_param : unit) : unit
  requires { #"a-textio.ads" 466 0 0# true }
  ensures { #"a-textio.ads" 466 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at a-tiinio.ads:51 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__get___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type
 use        Ada__integer_text_io__num___axiom

 val get #"a-tiinio.ads" 51 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int__ref) (width : int) : unit
  requires { #"a-textio.ads" 73 0 0# true }
  ensures { #"a-textio.ads" 73 0 0# (Ada__integer_text_io__num___axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at a-tiinio.ads:56 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__get__2___axiom
 use import "_gnatprove_standard".Main
 use        Ada__integer_text_io__num___axiom

 val get__2 #"a-tiinio.ads" 56 0 0# 
   (item : int__ref) (width : int) : unit
  requires { #"a-textio.ads" 73 0 0# true }
  ensures { #"a-textio.ads" 73 0 0# (Ada__integer_text_io__num___axiom.dynamic_invariant item.int__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-tiinio.ads:60 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__put___axiom
 use import "_gnatprove_standard".Main
 use        Ada__text_io__file_type

 val put #"a-tiinio.ads" 60 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : int) (width : int) (base : int) : unit
  requires { #"a-textio.ads" 78 0 0# true }
  ensures { #"a-textio.ads" 78 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-tiinio.ads:66 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__put__2___axiom
 use import "_gnatprove_standard".Main

 val put__2 #"a-tiinio.ads" 66 0 0# 
   (item : int) (width : int) (base : int) : unit
  requires { #"a-textio.ads" 78 0 0# true }
  ensures { #"a-textio.ads" 78 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at a-tiinio.ads:71 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__get__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive___axiom
 use        Ada__integer_text_io__num___axiom

 val get__3 #"a-tiinio.ads" 71 0 0# 
   (from : Standard__string.string) (item : int__ref) (last : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( (Ada__integer_text_io__num___axiom.dynamic_invariant item.int__content True True True) /\ (Standard__positive___axiom.dynamic_invariant last.int__content True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at a-tiinio.ads:76 instantiated at a-inteio.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__integer_text_io__put__3___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__character

 val put__3 #"a-tiinio.ads" 76 0 0# 
   (to__ : Array__Int__Standard__character.map__ref) (to____first : Standard__integer.integer) (to____last : Standard__integer.integer) (item : int) (base : int) : unit
  requires { #"a-textio.ads" 78 0 0# true }
  ensures { #"a-textio.ads" 78 0 0# (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep to____first) (Standard__integer__rep.to_rep to____last)))) }
  writes {to__}

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at a-tiflio.ads:52 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__float_text_io__get___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Ada__text_io__file_type
 use        Ada__float_text_io__num___axiom

 val get #"a-tiflio.ads" 52 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Float32.t__ref) (width : int) : unit
  requires { #"a-textio.ads" 73 0 0# true }
  ensures { #"a-textio.ads" 73 0 0# (Ada__float_text_io__num___axiom.dynamic_invariant item.Float32.t__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at a-tiflio.ads:57 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__float_text_io__get__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Ada__float_text_io__num___axiom

 val get__2 #"a-tiflio.ads" 57 0 0# 
   (item : Float32.t__ref) (width : int) : unit
  requires { #"a-textio.ads" 73 0 0# true }
  ensures { #"a-textio.ads" 73 0 0# (Ada__float_text_io__num___axiom.dynamic_invariant item.Float32.t__content True True True) }
  writes {item}

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-tiflio.ads:61 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__float_text_io__put___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Ada__text_io__file_type

 val put #"a-tiflio.ads" 61 0 0# 
   (file : Ada__text_io__file_type.file_type) (item : Float32.t) (fore : int) (aft : int) (exp : int) : unit
  requires { #"a-textio.ads" 73 0 0# true }
  ensures { #"a-textio.ads" 73 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "put__2" defined at a-tiflio.ads:68 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__float_text_io__put__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 val put__2 #"a-tiflio.ads" 68 0 0# 
   (item : Float32.t) (fore : int) (aft : int) (exp : int) : unit
  requires { #"a-textio.ads" 73 0 0# true }
  ensures { #"a-textio.ads" 73 0 0# true }

end

(* Module for declaring a program function (and possibly an axiom) for "get__3" defined at a-tiflio.ads:74 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__float_text_io__get__3___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__string
 use        Standard__positive___axiom
 use        Ada__float_text_io__num___axiom

 val get__3 #"a-tiflio.ads" 74 0 0# 
   (from : Standard__string.string) (item : Float32.t__ref) (last : int__ref) : unit
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( (Ada__float_text_io__num___axiom.dynamic_invariant item.Float32.t__content True True True) /\ (Standard__positive___axiom.dynamic_invariant last.int__content True True True) ) }
  writes {item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "put__3" defined at a-tiflio.ads:79 instantiated at a-flteio.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__float_text_io__put__3___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__character

 val put__3 #"a-tiflio.ads" 79 0 0# 
   (to__ : Array__Int__Standard__character.map__ref) (to____first : Standard__integer.integer) (to____last : Standard__integer.integer) (item : Float32.t) (aft : int) (exp : int) : unit
  requires { #"a-textio.ads" 73 0 0# true }
  ensures { #"a-textio.ads" 73 0 0# (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep to____first) (Standard__integer__rep.to_rep to____last)))) }
  writes {to__}

end

(* Module for declaring a program function (and possibly an axiom) for "initialize" defined at tank1.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__initialize___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank1__tank_state

 val initialize #"tank1.ads" 13 0 0# 
   (crossection_area : Float32.t) (height : Float32.t) (high_sensor_loc : Float32.t) (low_sensor_loc : Float32.t) : unit
  requires { #"tank1.ads" 8 0 0# ( ( ( ( ( ( (Float32.gt crossection_area (0.0E-1:Float32.t)) /\ (Float32.gt height (0.0E-1:Float32.t)) ) /\ (Float32.gt high_sensor_loc (0.0E-1:Float32.t)) ) /\ (Float32.le high_sensor_loc height) ) /\ (Float32.lt low_sensor_loc high_sensor_loc) ) /\ (Float32.ge low_sensor_loc (0.0E-1:Float32.t)) ) /\ (Float32.lt low_sensor_loc height) ) }
  ensures { #"tank1.ads" 14 0 0# true }
  writes {Tank1__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "liquid_height" defined at tank1.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__liquid_height___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Tank1__liquid_height
 use        Tank1__tank_state
 use        Tank1__tank_state

 val liquid_height #"tank1.ads" 34 0 0# 
   (__void_param : unit) : Float32.t
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Tank1__liquid_height.liquid_height Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__liquid_height.liquid_height__function_guard result Tank1__tank_state.tank_state.Main.__private__content) ) /\ (Standard__float___axiom.dynamic_invariant result True False True) ) }
  reads {Tank1__tank_state.tank_state}
 
 axiom liquid_height__post_axiom :
  (forall tank1__tank_state #"tank1.ads" 34 0 0#  : Main.__private [(Tank1__liquid_height.liquid_height tank1__tank_state)].
   ( true -> (let result = (Tank1__liquid_height.liquid_height tank1__tank_state) in (
    (if ((Tank1__liquid_height.liquid_height__function_guard result tank1__tank_state)) then (
     ( ( true /\ (Standard__float___axiom.dynamic_invariant result True False True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "valid_tank" defined at tank1.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__valid_tank___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank1__valid_tank
 use        Tank1__tank_state
 use        Tank1__tank_state

 val valid_tank #"tank1.ads" 79 0 0# 
   (__void_param : unit) : bool
  requires { #"tank1.ads" 79 0 0# true }
  ensures { #"tank1.ads" 79 0 0# ( ( (result = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard result Tank1__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank1__tank_state.tank_state}
 
 axiom valid_tank__post_axiom :
  (forall tank1__tank_state #"tank1.ads" 79 0 0#  : Main.__private [(Tank1__valid_tank.valid_tank tank1__tank_state)].
   ( true -> (let result = (Tank1__valid_tank.valid_tank tank1__tank_state) in (
    (if ((Tank1__valid_tank.valid_tank__function_guard result tank1__tank_state)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "liquid_in" defined at tank1.ads:42, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__liquid_in___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank1__valid_tank
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state

 val liquid_in #"tank1.ads" 42 0 0# 
   (flow_in : Float32.t) : unit
  requires { #"tank1.ads" 10 0 0# ( (Float32.ge flow_in (0.0E-1:Float32.t)) /\ ((epsilon temp___result_531 : bool.
   ( (temp___result_531 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_531 Tank1__tank_state.tank_state.Main.__private__content) )) = True) ) }
  ensures { #"tank1.ads" 46 0 0# ((epsilon temp___result_532 : bool.
   ( (temp___result_532 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_532 Tank1__tank_state.tank_state.Main.__private__content) )) = True) }
  reads {Tank1__tank_state.tank_state}
  writes {Tank1__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "liquid_out" defined at tank1.ads:51, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__liquid_out___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank1__valid_tank
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state

 val liquid_out #"tank1.ads" 51 0 0# 
   (flow_out : Float32.t) : unit
  requires { #"tank1.ads" 10 0 0# ( (Float32.ge flow_out (0.0E-1:Float32.t)) /\ ((epsilon temp___result_533 : bool.
   ( (temp___result_533 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_533 Tank1__tank_state.tank_state.Main.__private__content) )) = True) ) }
  ensures { #"tank1.ads" 55 0 0# ((epsilon temp___result_534 : bool.
   ( (temp___result_534 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_534 Tank1__tank_state.tank_state.Main.__private__content) )) = True) }
  reads {Tank1__tank_state.tank_state}
  writes {Tank1__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "high_sensor_status" defined at tank1.ads:59, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__high_sensor_status___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank1__valid_tank
 use        Tank1__high_sensor_status
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state

 val high_sensor_status #"tank1.ads" 59 0 0# 
   (__void_param : unit) : bool
  requires { #"tank1.ads" 59 0 0# ((epsilon temp___result_535 : bool.
   ( (temp___result_535 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_535 Tank1__tank_state.tank_state.Main.__private__content) )) = True) }
  ensures { #"tank1.ads" 63 0 0# ( ( (result = (Tank1__high_sensor_status.high_sensor_status Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__high_sensor_status.high_sensor_status__function_guard result Tank1__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank1__tank_state.tank_state}
 
 axiom high_sensor_status__post_axiom :
  (forall tank1__tank_state #"tank1.ads" 59 0 0#  : Main.__private [(Tank1__high_sensor_status.high_sensor_status tank1__tank_state)].
   ( ((epsilon temp___result_536 : bool.
    ( (temp___result_536 = (Tank1__valid_tank.valid_tank tank1__tank_state)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_536 tank1__tank_state) )) = True) -> (let result = (Tank1__high_sensor_status.high_sensor_status tank1__tank_state) in (
    (if ((Tank1__high_sensor_status.high_sensor_status__function_guard result tank1__tank_state)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "low_sensor_status" defined at tank1.ads:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__low_sensor_status___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank1__valid_tank
 use        Tank1__low_sensor_status
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state

 val low_sensor_status #"tank1.ads" 66 0 0# 
   (__void_param : unit) : bool
  requires { #"tank1.ads" 66 0 0# ((epsilon temp___result_537 : bool.
   ( (temp___result_537 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_537 Tank1__tank_state.tank_state.Main.__private__content) )) = True) }
  ensures { #"tank1.ads" 70 0 0# ( ( (result = (Tank1__low_sensor_status.low_sensor_status Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__low_sensor_status.low_sensor_status__function_guard result Tank1__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank1__tank_state.tank_state}
 
 axiom low_sensor_status__post_axiom :
  (forall tank1__tank_state #"tank1.ads" 66 0 0#  : Main.__private [(Tank1__low_sensor_status.low_sensor_status tank1__tank_state)].
   ( ((epsilon temp___result_538 : bool.
    ( (temp___result_538 = (Tank1__valid_tank.valid_tank tank1__tank_state)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_538 tank1__tank_state) )) = True) -> (let result = (Tank1__low_sensor_status.low_sensor_status tank1__tank_state) in (
    (if ((Tank1__low_sensor_status.low_sensor_status__function_guard result tank1__tank_state)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "valid_sensors" defined at tank1.ads:73, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__valid_sensors___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank1__valid_sensors
 use        Tank1__tank_state
 use        Tank1__tank_state

 val valid_sensors #"tank1.ads" 73 0 0# 
   (__void_param : unit) : bool
  requires { #"tank1.ads" 73 0 0# true }
  ensures { #"tank1.ads" 73 0 0# ( ( (result = (Tank1__valid_sensors.valid_sensors Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_sensors.valid_sensors__function_guard result Tank1__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank1__tank_state.tank_state}
 
 axiom valid_sensors__post_axiom :
  (forall tank1__tank_state #"tank1.ads" 73 0 0#  : Main.__private [(Tank1__valid_sensors.valid_sensors tank1__tank_state)].
   ( true -> (let result = (Tank1__valid_sensors.valid_sensors tank1__tank_state) in (
    (if ((Tank1__valid_sensors.valid_sensors__function_guard result tank1__tank_state)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "no_overflow" defined at tank1.ads:86, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__no_overflow___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank1__no_overflow
 use        Tank1__tank_state
 use        Tank1__tank_state

 val no_overflow #"tank1.ads" 86 0 0# 
   (__void_param : unit) : bool
  requires { #"tank1.ads" 86 0 0# true }
  ensures { #"tank1.ads" 86 0 0# ( ( (result = (Tank1__no_overflow.no_overflow Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__no_overflow.no_overflow__function_guard result Tank1__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank1__tank_state.tank_state}
 
 axiom no_overflow__post_axiom :
  (forall tank1__tank_state #"tank1.ads" 86 0 0#  : Main.__private [(Tank1__no_overflow.no_overflow tank1__tank_state)].
   ( true -> (let result = (Tank1__no_overflow.no_overflow tank1__tank_state) in (
    (if ((Tank1__no_overflow.no_overflow__function_guard result tank1__tank_state)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "no_underflow" defined at tank1.ads:92, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank1__no_underflow___axiom
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank1__no_underflow
 use        Tank1__tank_state
 use        Tank1__tank_state

 val no_underflow #"tank1.ads" 92 0 0# 
   (__void_param : unit) : bool
  requires { #"tank1.ads" 92 0 0# true }
  ensures { #"tank1.ads" 92 0 0# ( ( (result = (Tank1__no_underflow.no_underflow Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__no_underflow.no_underflow__function_guard result Tank1__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank1__tank_state.tank_state}
 
 axiom no_underflow__post_axiom :
  (forall tank1__tank_state #"tank1.ads" 92 0 0#  : Main.__private [(Tank1__no_underflow.no_underflow tank1__tank_state)].
   ( true -> (let result = (Tank1__no_underflow.no_underflow tank1__tank_state) in (
    (if ((Tank1__no_underflow.no_underflow__function_guard result tank1__tank_state)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "valid_tank" defined at tank2.ads:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__valid_tank___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank2__valid_tank
 use        Tank2__tank_state
 use        Tank2__tank_state

 val valid_tank #"tank2.ads" 84 0 0# 
   (__void_param : unit) : bool
  requires { #"tank2.ads" 84 0 0# true }
  ensures { #"tank2.ads" 84 0 0# ( ( (result = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard result Tank2__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "initialize" defined at tank2.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__initialize___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank2__valid_tank
 use        Tank2__tank_state
 use        Tank2__tank_state

 val initialize #"tank2.ads" 13 0 0# 
   (crossection_area : Float32.t) (height : Float32.t) (high_sensor_loc : Float32.t) (mid_sensor_loc : Float32.t) (low_sensor_loc : Float32.t) : unit
  requires { #"tank2.ads" 8 0 0# ( ( ( ( ( ( ( ( ( (Float32.gt crossection_area (0.0E-1:Float32.t)) /\ (Float32.gt height (0.0E-1:Float32.t)) ) /\ (Float32.gt high_sensor_loc (0.0E-1:Float32.t)) ) /\ (Float32.le high_sensor_loc height) ) /\ (Float32.gt mid_sensor_loc (0.0E-1:Float32.t)) ) /\ (Float32.lt mid_sensor_loc height) ) /\ (Float32.lt mid_sensor_loc high_sensor_loc) ) /\ (Float32.lt low_sensor_loc mid_sensor_loc) ) /\ (Float32.ge low_sensor_loc (0.0E-1:Float32.t)) ) /\ (Float32.lt low_sensor_loc height) ) }
  ensures { #"tank2.ads" 14 0 0# ((epsilon temp___result_557 : bool.
   ( (temp___result_557 = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard temp___result_557 Tank2__tank_state.tank_state.Main.__private__content) )) = True) }
  writes {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "liquid_height" defined at tank2.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__liquid_height___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Tank2__liquid_height
 use        Tank2__tank_state
 use        Tank2__tank_state

 val liquid_height #"tank2.ads" 40 0 0# 
   (__void_param : unit) : Float32.t
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Tank2__liquid_height.liquid_height Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__liquid_height.liquid_height__function_guard result Tank2__tank_state.tank_state.Main.__private__content) ) /\ (Standard__float___axiom.dynamic_invariant result True False True) ) }
  reads {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "liquid_in" defined at tank2.ads:47, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__liquid_in___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank2__valid_tank
 use        Tank2__tank_state
 use        Tank2__tank_state
 use        Tank2__tank_state
 use        Tank2__tank_state

 val liquid_in #"tank2.ads" 47 0 0# 
   (flow_in : Float32.t) : unit
  requires { #"tank2.ads" 10 0 0# ( (Float32.ge flow_in (0.0E-1:Float32.t)) /\ ((epsilon temp___result_558 : bool.
   ( (temp___result_558 = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard temp___result_558 Tank2__tank_state.tank_state.Main.__private__content) )) = True) ) }
  ensures { #"tank2.ads" 51 0 0# ((epsilon temp___result_559 : bool.
   ( (temp___result_559 = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard temp___result_559 Tank2__tank_state.tank_state.Main.__private__content) )) = True) }
  reads {Tank2__tank_state.tank_state}
  writes {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "liquid_out" defined at tank2.ads:56, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__liquid_out___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Tank2__valid_tank
 use        Tank2__tank_state
 use        Tank2__tank_state
 use        Tank2__tank_state
 use        Tank2__tank_state

 val liquid_out #"tank2.ads" 56 0 0# 
   (flow_out : Float32.t) : unit
  requires { #"tank2.ads" 10 0 0# ( (Float32.ge flow_out (0.0E-1:Float32.t)) /\ ((epsilon temp___result_560 : bool.
   ( (temp___result_560 = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard temp___result_560 Tank2__tank_state.tank_state.Main.__private__content) )) = True) ) }
  ensures { #"tank2.ads" 60 0 0# ((epsilon temp___result_561 : bool.
   ( (temp___result_561 = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard temp___result_561 Tank2__tank_state.tank_state.Main.__private__content) )) = True) }
  reads {Tank2__tank_state.tank_state}
  writes {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "high_sensor_status" defined at tank2.ads:64, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__high_sensor_status___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank2__valid_tank
 use        Tank2__high_sensor_status
 use        Tank2__tank_state
 use        Tank2__tank_state
 use        Tank2__tank_state

 val high_sensor_status #"tank2.ads" 64 0 0# 
   (__void_param : unit) : bool
  requires { #"tank2.ads" 64 0 0# ((epsilon temp___result_562 : bool.
   ( (temp___result_562 = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard temp___result_562 Tank2__tank_state.tank_state.Main.__private__content) )) = True) }
  ensures { #"tank2.ads" 68 0 0# ( ( (result = (Tank2__high_sensor_status.high_sensor_status Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__high_sensor_status.high_sensor_status__function_guard result Tank2__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "mid_sensor_status" defined at tank2.ads:71, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__mid_sensor_status___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank2__valid_tank
 use        Tank2__mid_sensor_status
 use        Tank2__tank_state
 use        Tank2__tank_state
 use        Tank2__tank_state

 val mid_sensor_status #"tank2.ads" 71 0 0# 
   (__void_param : unit) : bool
  requires { #"tank2.ads" 71 0 0# ((epsilon temp___result_563 : bool.
   ( (temp___result_563 = (Tank2__valid_tank.valid_tank Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__valid_tank.valid_tank__function_guard temp___result_563 Tank2__tank_state.tank_state.Main.__private__content) )) = True) }
  ensures { #"tank2.ads" 75 0 0# ( ( (result = (Tank2__mid_sensor_status.mid_sensor_status Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__mid_sensor_status.mid_sensor_status__function_guard result Tank2__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "low_sensor_status" defined at tank2.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__low_sensor_status___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank2__low_sensor_status
 use        Tank2__tank_state
 use        Tank2__tank_state

 val low_sensor_status #"tank2.ads" 78 0 0# 
   (__void_param : unit) : bool
  requires { #"tank2.ads" 78 0 0# true }
  ensures { #"tank2.ads" 78 0 0# ( ( (result = (Tank2__low_sensor_status.low_sensor_status Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__low_sensor_status.low_sensor_status__function_guard result Tank2__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "no_overflow" defined at tank2.ads:90, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__no_overflow___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank2__no_overflow
 use        Tank2__tank_state
 use        Tank2__tank_state

 val no_overflow #"tank2.ads" 90 0 0# 
   (__void_param : unit) : bool
  requires { #"tank2.ads" 90 0 0# true }
  ensures { #"tank2.ads" 90 0 0# ( ( (result = (Tank2__no_overflow.no_overflow Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__no_overflow.no_overflow__function_guard result Tank2__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "no_underflow" defined at tank2.ads:96, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tank2__no_underflow___axiom
 use        Tank2__tank_state
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Main
 use        Tank2__no_underflow
 use        Tank2__tank_state
 use        Tank2__tank_state

 val no_underflow #"tank2.ads" 96 0 0# 
   (__void_param : unit) : bool
  requires { #"tank2.ads" 96 0 0# true }
  ensures { #"tank2.ads" 96 0 0# ( ( (result = (Tank2__no_underflow.no_underflow Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__no_underflow.no_underflow__function_guard result Tank2__tank_state.tank_state.Main.__private__content) ) /\ true ) }
  reads {Tank2__tank_state.tank_state}

end

(* Module for declaring a program function (and possibly an axiom) for "tank1_control" defined at control.ads:9, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Control__tank1_control___axiom
 use import "_gnatprove_standard".Main

 val tank1_control #"control.ads" 9 0 0# 
   (hs_status : bool) (ls_status : bool) (pump_signal : bool__ref) (valve_signal : bool__ref) : unit
  requires { #"control.ads" 12 0 0# ( (if ((hs_status = True)) then (
   (ls_status = True)) else (
   true)) /\ ( (if (not ( (ls_status = True) )) then (
   not ( (hs_status = True) )) else (
   true)) /\ ( (if ((pump_signal.bool__content = True)) then (
   not ( (valve_signal.bool__content = True) )) else (
   true)) /\ (if ((valve_signal.bool__content = True)) then (
   not ( (pump_signal.bool__content = True) )) else (
   true)) ) ) ) }
  ensures { #"system.ads" 1 0 0# (if ((hs_status = True)) then (
   ( (valve_signal.bool__content = True) /\ not ( (pump_signal.bool__content = True) ) )) else ((if (not ( (ls_status = True) )) then (
   ( (pump_signal.bool__content = True) /\ not ( (valve_signal.bool__content = True) ) )) else (
   ( ( (pump_signal.bool__content = True) <-> ((old pump_signal.bool__content ) = True) ) /\ ( (valve_signal.bool__content = True) <-> ((old valve_signal.bool__content ) = True) ) ))))) }
  writes {pump_signal, valve_signal}

end

(* Module for declaring a program function (and possibly an axiom) for "tank2_control" defined at control.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Control__tank2_control___axiom
 use import "_gnatprove_standard".Main

 val tank2_control #"control.ads" 27 0 0# 
   (hs_status : bool) (ms_status : bool) (ls_status : bool) (tank1_valve : bool) (prod_valve_signal : bool__ref) (emer_valve_signal : bool__ref) : unit
  requires { #"control.ads" 32 0 0# ( (if ((hs_status = True)) then (
   (ms_status = True)) else (
   true)) /\ (if ((ms_status = True)) then (
   (ls_status = True)) else (
   true)) ) }
  ensures { #"system.ads" 1 0 0# ( (if ((ls_status = True)) then (
   (prod_valve_signal.bool__content = True)) else (
   not ( (prod_valve_signal.bool__content = True) ))) /\ (if (( (hs_status = True) \/ ( ( (ms_status = True) /\ (tank1_valve = True) ) /\ (emer_valve_signal.bool__content = True) ) )) then (
   (emer_valve_signal.bool__content = True)) else (
   not ( (emer_valve_signal.bool__content = True) ))) ) }
  writes {prod_valve_signal, emer_valve_signal}

end

(* Module giving a program function and a defining axiom for the expression function "valid_pump" defined at pump.ads:24, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Pump__valid_pump___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Pump__pump_type___axiom
 use        Pump__valid_pump

 val valid_pump #"pump.ads" 24 0 0# 
   (pump : Float32.t) : bool
  requires { #"pump.ads" 11 0 0# true }
  ensures { #"pump.ads" 11 0 0# ( ( (result = (Pump__valid_pump.valid_pump pump)) /\ (Pump__valid_pump.valid_pump__function_guard result pump) ) /\ ( ( (result = True) <-> (Float32.gt pump (0.0E-1:Float32.t)) ) /\ ( (result = True) <-> (Float32.gt pump (0.0E-1:Float32.t)) ) ) ) }
 
 axiom valid_pump__post_axiom :
  (forall pump #"pump.ads" 24 0 0#  : Float32.t [(Pump__valid_pump.valid_pump pump)].
   ( (Pump__pump_type___axiom.dynamic_invariant pump True True True) -> (let result = (Pump__valid_pump.valid_pump pump) in (
    (if ((Pump__valid_pump.valid_pump__function_guard result pump)) then (
     ( ( ( (result = True) <-> (Float32.gt pump (0.0E-1:Float32.t)) ) /\ true ) /\ true )) else true)))
    ))
 
 axiom valid_pump__def_axiom :
  (forall pump #"pump.ads" 24 0 0#  : Float32.t [(Pump__valid_pump.valid_pump pump)].
   ( (let result = (Pump__valid_pump.valid_pump pump) in (
    (Pump__valid_pump.valid_pump__function_guard result pump)))
    -> ( ((Pump__valid_pump.valid_pump pump) = True) <-> (Float32.gt pump (0.0E-1:Float32.t)) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "valid_flow" defined at pump.ads:32, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Pump__valid_flow___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Pump__valid_flow

 val valid_flow #"pump.ads" 32 0 0# 
   (flow : Float32.t) : bool
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Pump__valid_flow.valid_flow flow)) /\ (Pump__valid_flow.valid_flow__function_guard result flow) ) /\ ( ( (result = True) <-> (Float32.ge flow (0.0E-1:Float32.t)) ) /\ ( (result = True) <-> (Float32.ge flow (0.0E-1:Float32.t)) ) ) ) }
 
 axiom valid_flow__post_axiom :
  (forall flow #"pump.ads" 32 0 0#  : Float32.t [(Pump__valid_flow.valid_flow flow)].
   ( (Standard__float___axiom.dynamic_invariant flow True True True) -> (let result = (Pump__valid_flow.valid_flow flow) in (
    (if ((Pump__valid_flow.valid_flow__function_guard result flow)) then (
     ( ( ( (result = True) <-> (Float32.ge flow (0.0E-1:Float32.t)) ) /\ true ) /\ true )) else true)))
    ))
 
 axiom valid_flow__def_axiom :
  (forall flow #"pump.ads" 32 0 0#  : Float32.t [(Pump__valid_flow.valid_flow flow)].
   ( (let result = (Pump__valid_flow.valid_flow flow) in (
    (Pump__valid_flow.valid_flow__function_guard result flow)))
    -> ( ((Pump__valid_flow.valid_flow flow) = True) <-> (Float32.ge flow (0.0E-1:Float32.t)) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "pump_operate" defined at pump.ads:16, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pump__pump_operate___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Pump__pump_type___axiom
 use        Pump__valid_pump
 use        Pump__valid_flow
 use        Pump__pump_operate

 val pump_operate #"pump.ads" 16 0 0# 
   (pump : Float32.t) (enable : bool) : Float32.t
  requires { #"system.ads" 1 0 0# ((epsilon temp___result_570 : bool.
   ( (temp___result_570 = (Pump__valid_pump.valid_pump pump)) /\ (Pump__valid_pump.valid_pump__function_guard temp___result_570 pump) )) = True) }
  ensures { #"pump.ads" 16 0 0# ( ( (result = (Pump__pump_operate.pump_operate pump enable)) /\ (Pump__pump_operate.pump_operate__function_guard result pump enable) ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True) /\ ((epsilon temp___result_571 : bool.
   ( (temp___result_571 = (Pump__valid_flow.valid_flow result)) /\ (Pump__valid_flow.valid_flow__function_guard temp___result_571 result) )) = True) ) ) }
 
 axiom pump_operate__post_axiom :
  (forall pump #"pump.ads" 16 0 0#  : Float32.t.
  (forall enable #"pump.ads" 17 0 0#  : bool [(Pump__pump_operate.pump_operate pump enable)].
   ( ( (Pump__pump_type___axiom.dynamic_invariant pump True True True) /\ ((epsilon temp___result_572 : bool.
    ( (temp___result_572 = (Pump__valid_pump.valid_pump pump)) /\ (Pump__valid_pump.valid_pump__function_guard temp___result_572 pump) )) = True) ) -> (let result = (Pump__pump_operate.pump_operate pump enable) in (
    (if ((Pump__pump_operate.pump_operate__function_guard result pump enable)) then (
     ( ( ((epsilon temp___result_573 : bool.
      ( (temp___result_573 = (Pump__valid_flow.valid_flow result)) /\ (Pump__valid_flow.valid_flow__function_guard temp___result_573 result) )) = True) /\ (Standard__float___axiom.dynamic_invariant result True False True) ) /\ true )) else true)))
    )))

end

(* Module giving a program function and a defining axiom for the expression function "valid_valve" defined at valve.ads:23, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Valve__valid_valve___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Valve__valve_type___axiom
 use        Valve__valid_valve

 val valid_valve #"valve.ads" 23 0 0# 
   (valve : Float32.t) : bool
  requires { #"valve.ads" 11 0 0# true }
  ensures { #"valve.ads" 11 0 0# ( ( (result = (Valve__valid_valve.valid_valve valve)) /\ (Valve__valid_valve.valid_valve__function_guard result valve) ) /\ ( (result = True) <-> (Float32.gt valve (0.0E-1:Float32.t)) ) ) }
 
 axiom valid_valve__post_axiom :
  (forall valve #"valve.ads" 23 0 0#  : Float32.t [(Valve__valid_valve.valid_valve valve)].
   ( (Valve__valve_type___axiom.dynamic_invariant valve True True True) -> (let result = (Valve__valid_valve.valid_valve valve) in (
    (if ((Valve__valid_valve.valid_valve__function_guard result valve)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom valid_valve__def_axiom :
  (forall valve #"valve.ads" 23 0 0#  : Float32.t [(Valve__valid_valve.valid_valve valve)].
   ( (let result = (Valve__valid_valve.valid_valve valve) in (
    (Valve__valid_valve.valid_valve__function_guard result valve)))
    -> ( ((Valve__valid_valve.valid_valve valve) = True) <-> (Float32.gt valve (0.0E-1:Float32.t)) ) ))

end

(* Module giving a program function and a defining axiom for the expression function "valid_flow" defined at valve.ads:29, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Valve__valid_flow___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Valve__valid_flow

 val valid_flow #"valve.ads" 29 0 0# 
   (flow : Float32.t) : bool
  requires { #"system.ads" 1 0 0# true }
  ensures { #"system.ads" 1 0 0# ( ( (result = (Valve__valid_flow.valid_flow flow)) /\ (Valve__valid_flow.valid_flow__function_guard result flow) ) /\ ( (result = True) <-> (Float32.ge flow (0.0E-1:Float32.t)) ) ) }
 
 axiom valid_flow__post_axiom :
  (forall flow #"valve.ads" 29 0 0#  : Float32.t [(Valve__valid_flow.valid_flow flow)].
   ( (Standard__float___axiom.dynamic_invariant flow True True True) -> (let result = (Valve__valid_flow.valid_flow flow) in (
    (if ((Valve__valid_flow.valid_flow__function_guard result flow)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom valid_flow__def_axiom :
  (forall flow #"valve.ads" 29 0 0#  : Float32.t [(Valve__valid_flow.valid_flow flow)].
   ( (let result = (Valve__valid_flow.valid_flow flow) in (
    (Valve__valid_flow.valid_flow__function_guard result flow)))
    -> ( ((Valve__valid_flow.valid_flow flow) = True) <-> (Float32.ge flow (0.0E-1:Float32.t)) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "valve_operate" defined at valve.ads:15, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Valve__valve_operate___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Valve__valve_type___axiom
 use        Valve__valid_valve
 use        Valve__valid_flow
 use        Valve__valve_operate

 val valve_operate #"valve.ads" 15 0 0# 
   (valve : Float32.t) (enable : bool) : Float32.t
  requires { #"system.ads" 1 0 0# ((epsilon temp___result_580 : bool.
   ( (temp___result_580 = (Valve__valid_valve.valid_valve valve)) /\ (Valve__valid_valve.valid_valve__function_guard temp___result_580 valve) )) = True) }
  ensures { #"valve.ads" 15 0 0# ( ( (result = (Valve__valve_operate.valve_operate valve enable)) /\ (Valve__valve_operate.valve_operate__function_guard result valve enable) ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True) /\ ((epsilon temp___result_581 : bool.
   ( (temp___result_581 = (Valve__valid_flow.valid_flow result)) /\ (Valve__valid_flow.valid_flow__function_guard temp___result_581 result) )) = True) ) ) }
 
 axiom valve_operate__post_axiom :
  (forall valve #"valve.ads" 15 0 0#  : Float32.t.
  (forall enable #"valve.ads" 16 0 0#  : bool [(Valve__valve_operate.valve_operate valve enable)].
   ( ( (Valve__valve_type___axiom.dynamic_invariant valve True True True) /\ ((epsilon temp___result_582 : bool.
    ( (temp___result_582 = (Valve__valid_valve.valid_valve valve)) /\ (Valve__valid_valve.valid_valve__function_guard temp___result_582 valve) )) = True) ) -> (let result = (Valve__valve_operate.valve_operate valve enable) in (
    (if ((Valve__valve_operate.valve_operate__function_guard result valve enable)) then (
     ( ( ((epsilon temp___result_583 : bool.
      ( (temp___result_583 = (Valve__valid_flow.valid_flow result)) /\ (Valve__valid_flow.valid_flow__function_guard temp___result_583 result) )) = True) /\ (Standard__float___axiom.dynamic_invariant result True False True) ) /\ true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "tts" defined at tts.adb:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Tts___axiom
 use        Tank2__tank_state
 use        Tank1__tank_state
 use import "_gnatprove_standard".Main
 use        Tank1__tank_state
 use        Tank2__tank_state

 val tts #"tts.adb" 10 0 0# 
   (__void_param : unit) : unit
  requires { #"tts.adb" 10 0 0# true }
  ensures { #"tts.adb" 10 0 0# true }
  writes {Tank1__tank_state.tank_state, Tank2__tank_state.tank_state}

end

(* Module for checking contracts and absence of run-time errors in subprogram "tts" defined at tts.adb:10, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Tts__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        "_gnatprove_standard".Boolean
 use        Standard__float___axiom
 use        Tank1__tank_volume_float
 use        Tank1__initialize___axiom
 use        Tank1__liquid_height
 use        Tank1__liquid_height___axiom
 use        Tank1__valid_tank
 use        Tank1__valid_tank___axiom
 use        Tank1__liquid_in___axiom
 use        Tank1__liquid_out___axiom
 use        Tank1__high_sensor_status
 use        Tank1__high_sensor_status___axiom
 use        Tank1__low_sensor_status
 use        Tank1__low_sensor_status___axiom
 use        Tank1__no_overflow
 use        Tank1__no_overflow___axiom
 use        Tank2__tank_volume_float
 use        Tank2__initialize___axiom
 use        Tank2__liquid_in___axiom
 use        Tank2__liquid_out___axiom
 use        Tank2__high_sensor_status___axiom
 use        Tank2__mid_sensor_status___axiom
 use        Tank2__low_sensor_status___axiom
 use        Tank2__no_overflow
 use        Tank2__no_overflow___axiom
 use        Control__tank1_control___axiom
 use        Control__tank2_control___axiom
 use        Pump__pump_type___axiom
 use        Pump__pump_operate___axiom
 use        Valve__valve_type___axiom
 use        Valve__valve_operate___axiom
 use        Tts__the_pump
 use        Tts__pump_flow
 use        Tts__pump_signal
 use        Tts__t1_valve
 use        Tts__t1_valve_flow
 use        Tts__t1_valve_signal
 use        Tts__prod_valve
 use        Tts__prod_valve_flow
 use        Tts__prod_valve_signal
 use        Tts__emer_valve
 use        Tts__emer_valve_flow
 use        Tts__emer_valve_signal
 use        Tts__t1_crossection
 use        Tts__t1_height
 use        Tts__t1_hs_loc
 use        Tts__t1_ls_loc
 use        Tts__t2_crossection
 use        Tts__t2_height
 use        Tts__t2_hs_loc
 use        Tts__t2_ms_loc
 use        Tts__t2_ls_loc
 use        Tts__t1_hs_status
 use        Tts__t1_ls_status
 use        Tts__t2_hs_status
 use        Tts__t2_ms_status
 use        Tts__t2_ls_status
 use        Tts__L_1
 use        Tts__L_1__T1b
 use        Tts__L_1__count
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank1__tank_state
 use        Tank2__tank_state
 use        Standard__float___axiom
 use        Tts__the_pump___axiom
 use        Tts__pump_flow___axiom
 use        Tts__pump_signal___axiom
 use        Tts__t1_valve___axiom
 use        Tts__t1_valve_flow___axiom
 use        Tts__t1_valve_signal___axiom
 use        Tts__prod_valve___axiom
 use        Tts__prod_valve_flow___axiom
 use        Tts__prod_valve_signal___axiom
 use        Tts__emer_valve___axiom
 use        Tts__emer_valve_flow___axiom
 use        Tts__emer_valve_signal___axiom
 use        Tts__t1_crossection___axiom
 use        Tts__t1_height___axiom
 use        Tts__t1_hs_loc___axiom
 use        Tts__t1_ls_loc___axiom
 use        Tts__t2_crossection___axiom
 use        Tts__t2_height___axiom
 use        Tts__t2_hs_loc___axiom
 use        Tts__t2_ms_loc___axiom
 use        Tts__t2_ls_loc___axiom
 use        Tts__t1_hs_status___axiom
 use        Tts__t1_ls_status___axiom
 use        Tts__t2_hs_status___axiom
 use        Tts__t2_ms_status___axiom
 use        Tts__t2_ls_status___axiom
 use        Tts__L_1__count___axiom
 use        Tts__L_1___axiom
 use        Tank1__tank_volume_float___axiom
 use        Tank1__initialize___axiom
 use        Tank1__liquid_height___axiom
 use        Tank1__liquid_in___axiom
 use        Tank1__liquid_out___axiom
 use        Tank1__high_sensor_status___axiom
 use        Tank1__low_sensor_status___axiom
 use        Tank1__valid_tank___axiom
 use        Tank1__no_overflow___axiom
 use        Tank2__tank_volume_float___axiom
 use        Tank2__initialize___axiom
 use        Tank2__liquid_in___axiom
 use        Tank2__liquid_out___axiom
 use        Tank2__high_sensor_status___axiom
 use        Tank2__mid_sensor_status___axiom
 use        Tank2__low_sensor_status___axiom
 use        Tank2__valid_tank___axiom
 use        Tank2__no_overflow___axiom
 use        Control__tank1_control___axiom
 use        Control__tank2_control___axiom
 use        Pump__pump_type___axiom
 use        Pump__pump_operate___axiom
 use        Pump__valid_pump___axiom
 use        Pump__valid_flow___axiom
 use        Valve__valve_type___axiom
 use        Valve__valve_operate___axiom
 use        Valve__valid_valve___axiom
 use        Valve__valid_flow___axiom
 use        Tts__L_1__T1b___axiom

 let def #"tts.adb" 10 0 0# "GP_Subp:tts.adb:10" "W:diverges:N" 
   (__void_param : unit)
  requires { #"tts.adb" 10 0 0# true }
  ensures { #"tts.adb" 10 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram tts.adb:10 *)
  ;
  #"tts.adb" 10 0 0# assume { #"tts.adb" 10 0 0# true };
  () (* Assume Initial_Condition of withed units *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram tts.adb:10 *)
  ;
  () (* Check for RTE in the Pre of the subprogram tts.adb:10 *)
  ;
  #"tts.adb" 10 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram tts.adb:10 *)
  ;
  #"tts.adb" 10 0 0# assert { #"tts.adb" 10 0 0# true };
  #"tts.adb" 10 0 0# try
   ( #"tts.adb" 10 0 0# abstract ensures {true}(let _ = (0.4000000059604644775390625:Float32.t) in (
    ()))
    end ;
   #"pump.ads" 11 0 0# assume { #"pump.ads" 11 0 0# (Pump__pump_type___axiom.dynamic_invariant Tts__the_pump.the_pump True False True) };
   #"tts.adb" 16 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"tts.adb" 17 0 0# assume { #"tts.adb" 17 0 0# (Standard__float___axiom.default_initial_assumption Tts__pump_flow.pump_flow.Float32.t__content False) };
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__pump_flow.pump_flow.Float32.t__content False False True) };
   #"tts.adb" 18 0 0# Tts__pump_signal.pump_signal.bool__content <- ( (Boolean.of_int(0)) );
   #"tts.adb" 18 0 0# abstract ensures {true}(let _ = (0.20000000298023223876953125:Float32.t) in (
    ()))
    end ;
   #"valve.ads" 11 0 0# assume { #"valve.ads" 11 0 0# (Valve__valve_type___axiom.dynamic_invariant Tts__t1_valve.t1_valve True False True) };
   #"tts.adb" 21 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"tts.adb" 22 0 0# assume { #"tts.adb" 22 0 0# (Standard__float___axiom.default_initial_assumption Tts__t1_valve_flow.t1_valve_flow.Float32.t__content False) };
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t1_valve_flow.t1_valve_flow.Float32.t__content False False True) };
   #"tts.adb" 23 0 0# Tts__t1_valve_signal.t1_valve_signal.bool__content <- ( (Boolean.of_int(0)) );
   #"tts.adb" 23 0 0# abstract ensures {true}(let _ = (0.100000001490116119384765625:Float32.t) in (
    ()))
    end ;
   #"valve.ads" 11 0 0# assume { #"valve.ads" 11 0 0# (Valve__valve_type___axiom.dynamic_invariant Tts__prod_valve.prod_valve True False True) };
   #"tts.adb" 26 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"tts.adb" 27 0 0# assume { #"tts.adb" 27 0 0# (Standard__float___axiom.default_initial_assumption Tts__prod_valve_flow.prod_valve_flow.Float32.t__content False) };
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__prod_valve_flow.prod_valve_flow.Float32.t__content False False True) };
   #"system.ads" 1 0 0# abstract ensures {true}(let _ = (0.699999988079071044921875:Float32.t) in (
    ()))
    end ;
   #"valve.ads" 11 0 0# assume { #"valve.ads" 11 0 0# (Valve__valve_type___axiom.dynamic_invariant Tts__emer_valve.emer_valve True False True) };
   #"tts.adb" 31 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"tts.adb" 32 0 0# assume { #"tts.adb" 32 0 0# (Standard__float___axiom.default_initial_assumption Tts__emer_valve_flow.emer_valve_flow.Float32.t__content False) };
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__emer_valve_flow.emer_valve_flow.Float32.t__content False False True) };
   #"tts.adb" 33 0 0# Tts__emer_valve_signal.emer_valve_signal.bool__content <- ( (Boolean.of_int(0)) );
   #"tts.adb" 33 0 0# abstract ensures {true}(let _ = (1.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t1_crossection.t1_crossection True False True) };
   #"tts.adb" 36 0 0# abstract ensures {true}(let _ = (7.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t1_height.t1_height True False True) };
   #"tts.adb" 37 0 0# abstract ensures {true}(let _ = (5.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t1_hs_loc.t1_hs_loc True False True) };
   #"tts.adb" 38 0 0# abstract ensures {true}(let _ = (3.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t1_ls_loc.t1_ls_loc True False True) };
   #"tts.adb" 39 0 0# abstract ensures {true}(let _ = (1.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t2_crossection.t2_crossection True False True) };
   #"tts.adb" 42 0 0# abstract ensures {true}(let _ = (8.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t2_height.t2_height True False True) };
   #"tts.adb" 43 0 0# abstract ensures {true}(let _ = (6.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t2_hs_loc.t2_hs_loc True False True) };
   #"tts.adb" 44 0 0# abstract ensures {true}(let _ = (4.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t2_ms_loc.t2_ms_loc True False True) };
   #"tts.adb" 45 0 0# abstract ensures {true}(let _ = (2.0:Float32.t) in (
    ()))
    end ;
   #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Standard__float___axiom.dynamic_invariant Tts__t2_ls_loc.t2_ls_loc True False True) };
   ( "GP_Sloc:tts.adb:63:9" () );
   ( "GP_Sloc:tts.adb:63:9" ( #"tts.adb" 63 0 0# "model_vc" "keep_on_simp" "GP_Sloc:tts.adb:63:9" "GP_Reason:VC_PRECONDITION" "GP_Id:4" "comment:   Tank1.Initialize(T1_Crossection,
        ^ tts.adb:63:9:VC_PRECONDITION" "GP_Shape:call_initialize" (Tank1__initialize___axiom.initialize((1.0:Float32.t)) ((7.0:Float32.t)) ((5.0:Float32.t)) ((3.0:Float32.t))) ) );
   ( "GP_Sloc:tts.adb:69:9" () );
   ( "GP_Sloc:tts.adb:69:9" ( #"tts.adb" 69 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:call_initialize" "GP_Sloc:tts.adb:69:9" "GP_Id:10" "comment:   Tank2.Initialize(T2_Crossection,
        ^ tts.adb:69:9:VC_PRECONDITION" (Tank2__initialize___axiom.initialize((1.0:Float32.t)) ((8.0:Float32.t)) ((6.0:Float32.t)) ((4.0:Float32.t)) ((2.0:Float32.t))) ) );
   ( "GP_Sloc:tts.adb:85:25" (let temp___605 = 1 in (
   (let temp___606 = 50 in (
    ( #"tts.adb" 85 0 0# Tts__L_1__count.count.int__content <- ( temp___605 );
    () (* Translation of an Ada loop from tts.adb:85 *)
    ;
    (if ((Boolean.andb((temp___605 <= Tts__L_1__count.count.int__content)) ((Tts__L_1__count.count.int__content <= temp___606)))) then (
     #"tts.adb" 85 0 0# try
      ( #"tts.adb" 85 0 0# abstract ensures {true}(let _ = Tts__emer_valve_flow.emer_valve_flow.Float32.t__content in (
       ()))
       end ;
      (let temp___604 = #"tts.adb" 32 0 0# (any Float32.t
      ensures {#"system.ads" 1 0 0# (result = Tts__emer_valve_flow.emer_valve_flow.Float32.t__content)} 
      ) in (
       ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = Tts__t1_valve_flow.t1_valve_flow.Float32.t__content in (
        ()))
        end ;
       (let temp___603 = #"tts.adb" 22 0 0# (any Float32.t
       ensures {#"system.ads" 1 0 0# (result = Tts__t1_valve_flow.t1_valve_flow.Float32.t__content)} 
       ) in (
        ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = Tts__t2_ls_status.t2_ls_status.bool__content in (
         ()))
         end ;
        (let temp___602 = #"tts.adb" 55 0 0# (any bool
        ensures {#"tts.adb" 55 0 0# (result = Tts__t2_ls_status.t2_ls_status.bool__content)} 
        ) in (
         ( #"tts.adb" 55 0 0# abstract ensures {true}(let _ = Tts__prod_valve_signal.prod_valve_signal.bool__content in (
          ()))
          end ;
         (let temp___601 = #"tts.adb" 28 0 0# (any bool
         ensures {#"tts.adb" 28 0 0# (result = Tts__prod_valve_signal.prod_valve_signal.bool__content)} 
         ) in (
          ( #"tts.adb" 28 0 0# abstract ensures {true}(let _ = Tts__t2_ms_status.t2_ms_status.bool__content in (
           ()))
           end ;
          (let temp___600 = #"tts.adb" 54 0 0# (any bool
          ensures {#"tts.adb" 54 0 0# (result = Tts__t2_ms_status.t2_ms_status.bool__content)} 
          ) in (
           ( #"tts.adb" 54 0 0# abstract ensures {true}(let _ = Tts__prod_valve_flow.prod_valve_flow.Float32.t__content in (
            ()))
            end ;
           (let temp___598 = #"tts.adb" 27 0 0# (any Float32.t
           ensures {#"system.ads" 1 0 0# (result = Tts__prod_valve_flow.prod_valve_flow.Float32.t__content)} 
           ) in (
            ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = Tts__pump_signal.pump_signal.bool__content in (
             ()))
             end ;
            (let temp___599 = #"tts.adb" 18 0 0# (any bool
            ensures {#"tts.adb" 18 0 0# (result = Tts__pump_signal.pump_signal.bool__content)} 
            ) in (
             ( #"tts.adb" 18 0 0# abstract ensures {true}(let _ = Tts__t2_hs_status.t2_hs_status.bool__content in (
              ()))
              end ;
             (let temp___597 = #"tts.adb" 53 0 0# (any bool
             ensures {#"tts.adb" 53 0 0# (result = Tts__t2_hs_status.t2_hs_status.bool__content)} 
             ) in (
              ( #"tts.adb" 53 0 0# abstract ensures {true}(let _ = Tts__L_1__count.count.int__content in (
               ()))
               end ;
              (let temp___596 = #"tts.adb" 85 0 0# (any int
              ensures {#"tts.adb" 85 0 0# (result = Tts__L_1__count.count.int__content)} 
              ) in (
               ( #"tts.adb" 85 0 0# abstract ensures {true}(let _ = Tts__pump_flow.pump_flow.Float32.t__content in (
                ()))
                end ;
               (let temp___595 = #"tts.adb" 17 0 0# (any Float32.t
               ensures {#"system.ads" 1 0 0# (result = Tts__pump_flow.pump_flow.Float32.t__content)} 
               ) in (
                ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = Tts__t1_ls_status.t1_ls_status.bool__content in (
                 ()))
                 end ;
                (let temp___594 = #"tts.adb" 50 0 0# (any bool
                ensures {#"tts.adb" 50 0 0# (result = Tts__t1_ls_status.t1_ls_status.bool__content)} 
                ) in (
                 ( #"tts.adb" 50 0 0# abstract ensures {true}(let _ = Tts__emer_valve_signal.emer_valve_signal.bool__content in (
                  ()))
                  end ;
                 (let temp___593 = #"tts.adb" 33 0 0# (any bool
                 ensures {#"tts.adb" 33 0 0# (result = Tts__emer_valve_signal.emer_valve_signal.bool__content)} 
                 ) in (
                  ( #"tts.adb" 33 0 0# abstract ensures {true}(let _ = Tts__t1_hs_status.t1_hs_status.bool__content in (
                   ()))
                   end ;
                  (let temp___592 = #"tts.adb" 49 0 0# (any bool
                  ensures {#"tts.adb" 49 0 0# (result = Tts__t1_hs_status.t1_hs_status.bool__content)} 
                  ) in (
                   ( #"tts.adb" 49 0 0# abstract ensures {true}(let _ = Tts__t1_valve_signal.t1_valve_signal.bool__content in (
                    ()))
                    end ;
                   (let temp___591 = #"tts.adb" 23 0 0# (any bool
                   ensures {#"tts.adb" 23 0 0# (result = Tts__t1_valve_signal.t1_valve_signal.bool__content)} 
                   ) in (
                    ( () (* First unroling of the loop statements appearing before the loop invariant of loop tts.adb:85 *)
                    ;
                    ( "GP_Sloc:tts.adb:90:7" () );
                    ( "GP_Sloc:tts.adb:90:28" () );
                    ( "GP_Sloc:tts.adb:90:20" #"tts.adb" 90 0 0# Tts__t1_hs_status.t1_hs_status.bool__content <- ( ( #"tts.adb" 90 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:90:28" "GP_Id:11" "comment:      T1_HS_Status := Tank1.High_Sensor_Status;
                           ^ tts.adb:90:28:VC_PRECONDITION" "GP_Shape:L_1_while__t1_hs_status_assign__call_high_sensor_status" (Tank1__high_sensor_status___axiom.high_sensor_status(())) ) ) );
                    ( "GP_Sloc:tts.adb:91:7" () );
                    ( "GP_Sloc:tts.adb:91:28" () );
                    ( "GP_Sloc:tts.adb:91:20" #"tts.adb" 91 0 0# Tts__t1_ls_status.t1_ls_status.bool__content <- ( ( #"tts.adb" 91 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:91:28" "GP_Id:12" "comment:      T1_LS_Status := Tank1.Low_Sensor_Status;
                           ^ tts.adb:91:28:VC_PRECONDITION" "GP_Shape:L_1_while__t1_ls_status_assign__call_low_sensor_status" (Tank1__low_sensor_status___axiom.low_sensor_status(())) ) ) );
                    ( "GP_Sloc:tts.adb:92:7" () );
                    ( "GP_Sloc:tts.adb:92:28" () );
                    ( "GP_Sloc:tts.adb:92:20" #"tts.adb" 92 0 0# Tts__t2_hs_status.t2_hs_status.bool__content <- ( ( #"tts.adb" 92 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:92:28" "GP_Id:13" "comment:      T2_HS_Status := Tank2.High_Sensor_Status;
                           ^ tts.adb:92:28:VC_PRECONDITION" "GP_Shape:L_1_while__t2_hs_status_assign__call_high_sensor_status" (Tank2__high_sensor_status___axiom.high_sensor_status(())) ) ) );
                    ( "GP_Sloc:tts.adb:93:7" () );
                    ( "GP_Sloc:tts.adb:93:28" () );
                    ( "GP_Sloc:tts.adb:93:20" #"tts.adb" 93 0 0# Tts__t2_ms_status.t2_ms_status.bool__content <- ( ( #"tts.adb" 93 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:93:28" "GP_Id:14" "comment:      T2_MS_Status := Tank2.Mid_Sensor_Status;
                           ^ tts.adb:93:28:VC_PRECONDITION" "GP_Shape:L_1_while__t2_ms_status_assign__call_mid_sensor_status" (Tank2__mid_sensor_status___axiom.mid_sensor_status(())) ) ) );
                    ( "GP_Sloc:tts.adb:94:7" () );
                    ( "GP_Sloc:tts.adb:94:28" () );
                    ( "GP_Sloc:tts.adb:94:20" #"tts.adb" 94 0 0# Tts__t2_ls_status.t2_ls_status.bool__content <- ( (Tank2__low_sensor_status___axiom.low_sensor_status(())) ) );
                    ( "GP_Sloc:tts.adb:99:30" () );
                    ( "GP_Sloc:tts.adb:99:7" ( #"tank2.ads" 78 0 0# abstract ensures {true}(let _ = (if ((Float32.ge((Tank1__liquid_height___axiom.liquid_height(()))) ((3.0:Float32.t)))) then (
                     ( #"tts.adb" 99 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:99:69" "GP_Id:15" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_LS_Loc) then Tank1.Low_Sensor_Status);
                                                                    ^ tts.adb:99:69:VC_PRECONDITION" "GP_Shape:L_1_while__pragargs__if__call_low_sensor_status" (Tank1__low_sensor_status___axiom.low_sensor_status(())) )) else (
                     (Boolean.of_int(1)))) in (
                     ()))
                     end ;
                    #"tts.adb" 99 0 0# assert { #"tts.adb" 99 0 0# ( #"tts.adb" 99 0 0# "model_vc" "keep_on_simp" "GP_Sloc:tts.adb:99:21" "GP_Reason:VC_ASSERT" "GP_Id:16" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_LS_Loc) then Tank1.Low_Sensor_Status);
                    ^ tts.adb:99:21:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" (if ((Float32.ge (epsilon temp___result_585 : Float32.t.
                     ( (temp___result_585 = (Tank1__liquid_height.liquid_height Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__liquid_height.liquid_height__function_guard temp___result_585 Tank1__tank_state.tank_state.Main.__private__content) )) (3.0:Float32.t))) then (
                     ( "GP_Pretty_Ada:2659" "GP_Sloc:tts.adb:99:64" ((epsilon temp___result_584 : bool.
                      ( (temp___result_584 = (Tank1__low_sensor_status.low_sensor_status Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__low_sensor_status.low_sensor_status__function_guard temp___result_584 Tank1__tank_state.tank_state.Main.__private__content) )) = True) )) else (
                     ( "GP_Pretty_Ada:18490" "GP_Sloc:tts.adb:99:21" true ))) ) } ) );
                    ( "GP_Sloc:tts.adb:100:30" () );
                    ( "GP_Sloc:tts.adb:100:7" ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = (if ((Float32.ge((Tank1__liquid_height___axiom.liquid_height(()))) ((5.0:Float32.t)))) then (
                     ( #"tts.adb" 100 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:100:69" "GP_Id:17" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_HS_Loc) then Tank1.High_Sensor_Status);
                                                                    ^ tts.adb:100:69:VC_PRECONDITION" "GP_Shape:L_1_while__pragargs__if__call_high_sensor_status" (Tank1__high_sensor_status___axiom.high_sensor_status(())) )) else (
                     (Boolean.of_int(1)))) in (
                     ()))
                     end ;
                    #"tts.adb" 100 0 0# assert { #"tts.adb" 100 0 0# ( #"tts.adb" 100 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" "GP_Sloc:tts.adb:100:21" "GP_Id:18" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_HS_Loc) then Tank1.High_Sensor_Status);
                    ^ tts.adb:100:21:VC_ASSERT" (if ((Float32.ge (epsilon temp___result_587 : Float32.t.
                     ( (temp___result_587 = (Tank1__liquid_height.liquid_height Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__liquid_height.liquid_height__function_guard temp___result_587 Tank1__tank_state.tank_state.Main.__private__content) )) (5.0:Float32.t))) then (
                     ( "GP_Pretty_Ada:2671" "GP_Sloc:tts.adb:100:64" ((epsilon temp___result_586 : bool.
                      ( (temp___result_586 = (Tank1__high_sensor_status.high_sensor_status Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__high_sensor_status.high_sensor_status__function_guard temp___result_586 Tank1__tank_state.tank_state.Main.__private__content) )) = True) )) else (
                     ( "GP_Pretty_Ada:18502" "GP_Sloc:tts.adb:100:21" true ))) ) } ) );
                    ( "GP_Sloc:tts.adb:101:30" () );
                    ( "GP_Sloc:tts.adb:101:7" ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = (if ((Boolean.andb((Tank1__valid_tank___axiom.valid_tank(()))) (Tts__t1_hs_status.t1_hs_status.bool__content))) then (
                     Tts__t1_ls_status.t1_ls_status.bool__content) else (
                     (Boolean.of_int(1)))) in (
                     ()))
                     end ;
                    #"tts.adb" 101 0 0# assert { #"tts.adb" 101 0 0# ( #"tts.adb" 101 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" "GP_Sloc:tts.adb:101:21" "GP_Id:19" "comment:      pragma Assert(if (Tank1.Valid_Tank and T1_HS_Status) then T1_LS_Status);
                    ^ tts.adb:101:21:VC_ASSERT" (if (( ((epsilon temp___result_588 : bool.
                     ( (temp___result_588 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_588 Tank1__tank_state.tank_state.Main.__private__content) )) = True) /\ (Tts__t1_hs_status.t1_hs_status.bool__content = True) )) then (
                     ( "GP_Pretty_Ada:2681" "GP_Sloc:tts.adb:101:65" (Tts__t1_ls_status.t1_ls_status.bool__content = True) )) else (
                     ( "GP_Pretty_Ada:18512" "GP_Sloc:tts.adb:101:21" true ))) ) } ) );
                    ( "GP_Sloc:tts.adb:102:7" ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = (if (Tts__t1_hs_status.t1_hs_status.bool__content) then (
                     Tts__t1_ls_status.t1_ls_status.bool__content) else (
                     (Boolean.of_int(1)))) in (
                     ()))
                     end ;
                    #"tts.adb" 102 0 0# assert { #"tts.adb" 102 0 0# ( #"tts.adb" 102 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" "GP_Sloc:tts.adb:102:21" "GP_Id:20" "comment:      pragma Assert(if T1_HS_Status then T1_LS_Status);
                    ^ tts.adb:102:21:VC_ASSERT" (if ((Tts__t1_hs_status.t1_hs_status.bool__content = True)) then (
                     ( "GP_Pretty_Ada:2687" "GP_Sloc:tts.adb:102:42" (Tts__t1_ls_status.t1_ls_status.bool__content = True) )) else (
                     ( "GP_Pretty_Ada:18520" "GP_Sloc:tts.adb:102:21" true ))) ) } ) );
                    () (* While loop translating the Ada loop from tts.adb:85 *)
                    ;
                    #"tts.adb" 85 0 0# while True do
                     invariant { 
                      ( #"tts.adb" 103 0 0# "model_vc" "keep_on_simp" "GP_Shape:L_1_while__pragargs__if" "GP_Sloc:tts.adb:103:29" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:39" "comment:      pragma Loop_Invariant(if T1_Valve_Signal then not Pump_Signal);
                            ^ tts.adb:103:29:VC_LOOP_INVARIANT" (if ((Tts__t1_valve_signal.t1_valve_signal.bool__content = True)) then (
                       ( "GP_Pretty_Ada:2693" "GP_Sloc:tts.adb:103:53" not ( (Tts__pump_signal.pump_signal.bool__content = True) ) )) else (
                       ( "GP_Pretty_Ada:18522" "GP_Sloc:tts.adb:103:29" true ))) )
                      }
                     invariant { 
                      ( #"tts.adb" 104 0 0# "model_vc" "keep_on_simp" "GP_Shape:L_1_while__pragargs__if" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:tts.adb:104:29" "GP_Id:40" "comment:      pragma Loop_Invariant(if Pump_Signal then not T1_Valve_Signal);
                            ^ tts.adb:104:29:VC_LOOP_INVARIANT" (if ((Tts__pump_signal.pump_signal.bool__content = True)) then (
                       ( "GP_Pretty_Ada:2700" "GP_Sloc:tts.adb:104:49" not ( (Tts__t1_valve_signal.t1_valve_signal.bool__content = True) ) )) else (
                       ( "GP_Pretty_Ada:18530" "GP_Sloc:tts.adb:104:29" true ))) )
                      }
                     ( () (* Assume implicit invariants from the loop tts.adb:85 *)
                     ;
                     #"system.ads" 1 0 0# assume { #"system.ads" 1 0 0# (Boolean.andb(( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( true /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ (Standard__float___axiom.dynamic_invariant Tts__pump_flow.pump_flow.Float32.t__content False True True) ) /\ true ) /\ (if ((Tts__L_1__T1b.first <= Tts__L_1__T1b.last)) then (
                      (Tts__L_1__T1b.dynamic_property Tts__L_1__T1b.first Tts__L_1__T1b.last Tts__L_1__count.count.int__content)) else true) ) /\ true ) /\ true ) /\ true ) /\ (Standard__float___axiom.dynamic_invariant Tts__prod_valve_flow.prod_valve_flow.Float32.t__content False True True) ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ true ) /\ (Standard__float___axiom.dynamic_invariant Tts__t1_valve_flow.t1_valve_flow.Float32.t__content False True True) ) /\ true ) /\ (Standard__float___axiom.dynamic_invariant Tts__emer_valve_flow.emer_valve_flow.Float32.t__content False True True) ) /\ true )) (( (1 <= Tts__L_1__count.count.int__content) /\ (Tts__L_1__count.count.int__content <= 50) ))) };
                     () (* Check for absence of RTE in the invariant of loop tts.adb:85 *)
                     ;
                     #"tts.adb" 85 0 0# abstract ensures {true}(let _ = (if (Tts__t1_valve_signal.t1_valve_signal.bool__content) then (
                      not ( Tts__pump_signal.pump_signal.bool__content )) else (
                      (Boolean.of_int(1)))) in (
                      ()))
                      end ;
                     #"tts.adb" 103 0 0# abstract ensures {true}(let _ = (if (Tts__pump_signal.pump_signal.bool__content) then (
                      not ( Tts__t1_valve_signal.t1_valve_signal.bool__content )) else (
                      (Boolean.of_int(1)))) in (
                      ()))
                      end ;
                     () (* Loop statements appearing after the loop invariant of loop tts.adb:85 *)
                     ;
                     ( "GP_Sloc:tts.adb:107:45" () );
                     ( "GP_Sloc:tts.adb:108:45" () );
                     ( "GP_Sloc:tts.adb:109:45" () );
                     ( "GP_Sloc:tts.adb:110:45" () );
                     ( "GP_Sloc:tts.adb:107:14" () );
                     ( "GP_Sloc:tts.adb:107:14" ( #"tts.adb" 107 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:107:14" "GP_Id:21" "comment:      Control.Tank1_Control(HS_Status    => T1_HS_Status,
             ^ tts.adb:107:14:VC_PRECONDITION" "GP_Shape:L_1_while__call_tank1_control" (Control__tank1_control___axiom.tank1_control(Tts__t1_hs_status.t1_hs_status.bool__content) (Tts__t1_ls_status.t1_ls_status.bool__content) (Tts__pump_signal.pump_signal) (Tts__t1_valve_signal.t1_valve_signal)) ) );
                     ( "GP_Sloc:tts.adb:112:50" () );
                     ( "GP_Sloc:tts.adb:113:50" () );
                     ( "GP_Sloc:tts.adb:114:50" () );
                     ( "GP_Sloc:tts.adb:115:50" () );
                     ( "GP_Sloc:tts.adb:116:50" () );
                     ( "GP_Sloc:tts.adb:117:50" () );
                     ( "GP_Sloc:tts.adb:112:14" () );
                     ( "GP_Sloc:tts.adb:112:14" ( #"tts.adb" 112 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:112:14" "GP_Id:22" "comment:      Control.Tank2_Control(HS_Status         => T2_HS_Status,
             ^ tts.adb:112:14:VC_PRECONDITION" "GP_Shape:L_1_while__call_tank2_control" (Control__tank2_control___axiom.tank2_control(Tts__t2_hs_status.t2_hs_status.bool__content) (Tts__t2_ms_status.t2_ms_status.bool__content) (Tts__t2_ls_status.t2_ls_status.bool__content) (Tts__t1_valve_signal.t1_valve_signal.bool__content) (Tts__prod_valve_signal.prod_valve_signal) (Tts__emer_valve_signal.emer_valve_signal)) ) );
                     ( "GP_Sloc:tts.adb:120:7" () );
                     ( "GP_Sloc:tts.adb:122:37" () );
                     ( "GP_Sloc:tts.adb:121:13" () );
                     ( "GP_Sloc:tts.adb:120:17" #"tts.adb" 120 0 0# Tts__pump_flow.pump_flow.Float32.t__content <- ( ( #"tts.adb" 121 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:121:13" "GP_Id:23" "comment:        Pump.Pump_Operate(Pump   => The_Pump,
            ^ tts.adb:121:13:VC_PRECONDITION" "GP_Shape:L_1_while__pump_flow_assign__call_pump_operate" (Pump__pump_operate___axiom.pump_operate((0.4000000059604644775390625:Float32.t)) (Tts__pump_signal.pump_signal.bool__content)) ) ) );
                     ( "GP_Sloc:tts.adb:125:7" () );
                     ( "GP_Sloc:tts.adb:127:39" () );
                     ( "GP_Sloc:tts.adb:126:14" () );
                     ( "GP_Sloc:tts.adb:125:21" #"tts.adb" 125 0 0# Tts__t1_valve_flow.t1_valve_flow.Float32.t__content <- ( ( #"tts.adb" 126 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:126:14" "GP_Id:24" "comment:        Valve.Valve_Operate(Valve  => T1_Valve,
             ^ tts.adb:126:14:VC_PRECONDITION" "GP_Shape:L_1_while__t1_valve_flow_assign__call_valve_operate" (Valve__valve_operate___axiom.valve_operate((0.20000000298023223876953125:Float32.t)) (Tts__t1_valve_signal.t1_valve_signal.bool__content)) ) ) );
                     ( "GP_Sloc:tts.adb:130:7" () );
                     ( "GP_Sloc:tts.adb:132:39" () );
                     ( "GP_Sloc:tts.adb:131:14" () );
                     ( "GP_Sloc:tts.adb:130:23" #"tts.adb" 130 0 0# Tts__prod_valve_flow.prod_valve_flow.Float32.t__content <- ( ( #"tts.adb" 131 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:131:14" "GP_Id:25" "comment:        Valve.Valve_Operate(Valve  => Prod_Valve,
             ^ tts.adb:131:14:VC_PRECONDITION" "GP_Shape:L_1_while__prod_valve_flow_assign__call_valve_operate" (Valve__valve_operate___axiom.valve_operate((0.100000001490116119384765625:Float32.t)) (Tts__prod_valve_signal.prod_valve_signal.bool__content)) ) ) );
                     ( "GP_Sloc:tts.adb:135:7" () );
                     ( "GP_Sloc:tts.adb:137:39" () );
                     ( "GP_Sloc:tts.adb:136:14" () );
                     ( "GP_Sloc:tts.adb:135:23" #"tts.adb" 135 0 0# Tts__emer_valve_flow.emer_valve_flow.Float32.t__content <- ( ( #"tts.adb" 136 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:136:14" "GP_Id:26" "comment:        Valve.Valve_Operate(Valve  => Emer_Valve,
             ^ tts.adb:136:14:VC_PRECONDITION" "GP_Shape:L_1_while__emer_valve_flow_assign__call_valve_operate" (Valve__valve_operate___axiom.valve_operate((0.699999988079071044921875:Float32.t)) (Tts__emer_valve_signal.emer_valve_signal.bool__content)) ) ) );
                     ( "GP_Sloc:tts.adb:148:34" () );
                     ( "GP_Sloc:tts.adb:148:12" () );
                     ( "GP_Sloc:tts.adb:148:12" ( #"tts.adb" 148 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:148:12" "GP_Shape:L_1_while__call_liquid_in" "GP_Id:28" "comment:      Tank1.Liquid_In(Flow_In => Pump_Flow);
           ^ tts.adb:148:12:VC_PRECONDITION" (Tank1__liquid_in___axiom.liquid_in(( #"tts.adb" 148 0 0# "model_vc" "keep_on_simp" "GP_Sloc:tts.adb:148:34" "GP_Reason:VC_RANGE_CHECK" "GP_Id:27" "comment:      Tank1.Liquid_In(Flow_In => Pump_Flow);
                                 ^ tts.adb:148:34:VC_RANGE_CHECK" "GP_Shape:L_1_while__call_liquid_in" (Tank1__tank_volume_float.range_check_(Tts__pump_flow.pump_flow.Float32.t__content)) ))) ) );
                     ( "GP_Sloc:tts.adb:151:36" () );
                     ( "GP_Sloc:tts.adb:151:12" () );
                     ( "GP_Sloc:tts.adb:151:12" ( #"tts.adb" 151 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:151:12" "GP_Shape:L_1_while__call_liquid_out" "GP_Id:30" "comment:      Tank1.Liquid_Out(Flow_Out => T1_Valve_Flow);
           ^ tts.adb:151:12:VC_PRECONDITION" (Tank1__liquid_out___axiom.liquid_out(( #"tts.adb" 151 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:tts.adb:151:36" "GP_Id:29" "comment:      Tank1.Liquid_Out(Flow_Out => T1_Valve_Flow);
                                   ^ tts.adb:151:36:VC_RANGE_CHECK" "GP_Shape:L_1_while__call_liquid_out" (Tank1__tank_volume_float.range_check_(Tts__t1_valve_flow.t1_valve_flow.Float32.t__content)) ))) ) );
                     ( "GP_Sloc:tts.adb:154:34" () );
                     ( "GP_Sloc:tts.adb:154:12" () );
                     ( "GP_Sloc:tts.adb:154:12" ( #"tts.adb" 154 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:L_1_while__call_liquid_in" "GP_Sloc:tts.adb:154:12" "GP_Id:32" "comment:      Tank2.Liquid_In(Flow_In => T1_Valve_Flow);
           ^ tts.adb:154:12:VC_PRECONDITION" (Tank2__liquid_in___axiom.liquid_in(( #"tts.adb" 154 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__call_liquid_in" "GP_Sloc:tts.adb:154:34" "GP_Id:31" "comment:      Tank2.Liquid_In(Flow_In => T1_Valve_Flow);
                                 ^ tts.adb:154:34:VC_RANGE_CHECK" (Tank2__tank_volume_float.range_check_(Tts__t1_valve_flow.t1_valve_flow.Float32.t__content)) ))) ) );
                     ( "GP_Sloc:tts.adb:157:36" () );
                     ( "GP_Sloc:tts.adb:157:12" () );
                     ( "GP_Sloc:tts.adb:157:12" ( #"tts.adb" 157 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:L_1_while__call_liquid_out" "GP_Sloc:tts.adb:157:12" "GP_Id:34" "comment:      Tank2.Liquid_Out(Flow_Out => Prod_Valve_Flow);
           ^ tts.adb:157:12:VC_PRECONDITION" (Tank2__liquid_out___axiom.liquid_out(( #"tts.adb" 157 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__call_liquid_out" "GP_Sloc:tts.adb:157:36" "GP_Id:33" "comment:      Tank2.Liquid_Out(Flow_Out => Prod_Valve_Flow);
                                   ^ tts.adb:157:36:VC_RANGE_CHECK" (Tank2__tank_volume_float.range_check_(Tts__prod_valve_flow.prod_valve_flow.Float32.t__content)) ))) ) );
                     ( "GP_Sloc:tts.adb:160:36" () );
                     ( "GP_Sloc:tts.adb:160:12" () );
                     ( "GP_Sloc:tts.adb:160:12" ( #"tts.adb" 160 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Shape:L_1_while__call_liquid_out" "GP_Sloc:tts.adb:160:12" "GP_Id:36" "comment:      Tank2.Liquid_Out(Flow_Out => Emer_Valve_Flow);
           ^ tts.adb:160:12:VC_PRECONDITION" (Tank2__liquid_out___axiom.liquid_out(( #"tts.adb" 160 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:L_1_while__call_liquid_out" "GP_Sloc:tts.adb:160:36" "GP_Id:35" "comment:      Tank2.Liquid_Out(Flow_Out => Emer_Valve_Flow);
                                   ^ tts.adb:160:36:VC_RANGE_CHECK" (Tank2__tank_volume_float.range_check_(Tts__emer_valve_flow.emer_valve_flow.Float32.t__content)) ))) ) );
                     ( "GP_Sloc:tts.adb:163:27" () );
                     ( "GP_Sloc:tts.adb:163:7" ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = (Tank1__no_overflow___axiom.no_overflow(())) in (
                      ()))
                      end ;
                     #"tts.adb" 163 0 0# assert { #"tts.adb" 163 0 0# ( #"tts.adb" 163 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Sloc:tts.adb:163:22" "GP_Id:37" "comment:      pragma Assert (Tank1.No_Overflow);
                     ^ tts.adb:163:22:VC_ASSERT" "GP_Shape:L_1_while__pragargs__call_no_overflow" ( "GP_Pretty_Ada:2829" "GP_Sloc:tts.adb:163:22" ((epsilon temp___result_589 : bool.
                      ( (temp___result_589 = (Tank1__no_overflow.no_overflow Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__no_overflow.no_overflow__function_guard temp___result_589 Tank1__tank_state.tank_state.Main.__private__content) )) = True) ) ) } ) );
                     ( "GP_Sloc:tts.adb:165:27" () );
                     ( "GP_Sloc:tts.adb:165:7" ( #"tts.adb" 163 0 0# abstract ensures {true}(let _ = (Tank2__no_overflow___axiom.no_overflow(())) in (
                      ()))
                      end ;
                     #"tts.adb" 165 0 0# assert { #"tts.adb" 165 0 0# ( #"tts.adb" 165 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Shape:L_1_while__pragargs__call_no_overflow" "GP_Sloc:tts.adb:165:22" "GP_Id:38" "comment:      pragma Assert (Tank2.No_Overflow);
                     ^ tts.adb:165:22:VC_ASSERT" ( "GP_Pretty_Ada:2835" "GP_Sloc:tts.adb:165:22" ((epsilon temp___result_590 : bool.
                      ( (temp___result_590 = (Tank2__no_overflow.no_overflow Tank2__tank_state.tank_state.Main.__private__content)) /\ (Tank2__no_overflow.no_overflow__function_guard temp___result_590 Tank2__tank_state.tank_state.Main.__private__content) )) = True) ) ) } ) );
                     () (* Check for the exit condition and loop statements appearing before the loop invariant of loop tts.adb:85 *)
                     ;
                     (if ((Tts__L_1__count.count.int__content = temp___606)) then (
                      #"tts.adb" 85 0 0# raise Tts__L_1.L_1));
                     #"tts.adb" 85 0 0# Tts__L_1__count.count.int__content <- ( (Tts__L_1__count.count.int__content + 1) );
                     ( "GP_Sloc:tts.adb:90:7" () );
                     ( "GP_Sloc:tts.adb:90:28" () );
                     ( "GP_Sloc:tts.adb:90:20" #"tts.adb" 90 0 0# Tts__t1_hs_status.t1_hs_status.bool__content <- ( ( #"tts.adb" 90 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:90:28" "GP_Id:11" "comment:      T1_HS_Status := Tank1.High_Sensor_Status;
                           ^ tts.adb:90:28:VC_PRECONDITION" "GP_Shape:L_1_while__t1_hs_status_assign__call_high_sensor_status" (Tank1__high_sensor_status___axiom.high_sensor_status(())) ) ) );
                     ( "GP_Sloc:tts.adb:91:7" () );
                     ( "GP_Sloc:tts.adb:91:28" () );
                     ( "GP_Sloc:tts.adb:91:20" #"tts.adb" 91 0 0# Tts__t1_ls_status.t1_ls_status.bool__content <- ( ( #"tts.adb" 91 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:91:28" "GP_Id:12" "comment:      T1_LS_Status := Tank1.Low_Sensor_Status;
                           ^ tts.adb:91:28:VC_PRECONDITION" "GP_Shape:L_1_while__t1_ls_status_assign__call_low_sensor_status" (Tank1__low_sensor_status___axiom.low_sensor_status(())) ) ) );
                     ( "GP_Sloc:tts.adb:92:7" () );
                     ( "GP_Sloc:tts.adb:92:28" () );
                     ( "GP_Sloc:tts.adb:92:20" #"tts.adb" 92 0 0# Tts__t2_hs_status.t2_hs_status.bool__content <- ( ( #"tts.adb" 92 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:92:28" "GP_Id:13" "comment:      T2_HS_Status := Tank2.High_Sensor_Status;
                           ^ tts.adb:92:28:VC_PRECONDITION" "GP_Shape:L_1_while__t2_hs_status_assign__call_high_sensor_status" (Tank2__high_sensor_status___axiom.high_sensor_status(())) ) ) );
                     ( "GP_Sloc:tts.adb:93:7" () );
                     ( "GP_Sloc:tts.adb:93:28" () );
                     ( "GP_Sloc:tts.adb:93:20" #"tts.adb" 93 0 0# Tts__t2_ms_status.t2_ms_status.bool__content <- ( ( #"tts.adb" 93 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:93:28" "GP_Id:14" "comment:      T2_MS_Status := Tank2.Mid_Sensor_Status;
                           ^ tts.adb:93:28:VC_PRECONDITION" "GP_Shape:L_1_while__t2_ms_status_assign__call_mid_sensor_status" (Tank2__mid_sensor_status___axiom.mid_sensor_status(())) ) ) );
                     ( "GP_Sloc:tts.adb:94:7" () );
                     ( "GP_Sloc:tts.adb:94:28" () );
                     ( "GP_Sloc:tts.adb:94:20" #"tts.adb" 94 0 0# Tts__t2_ls_status.t2_ls_status.bool__content <- ( (Tank2__low_sensor_status___axiom.low_sensor_status(())) ) );
                     ( "GP_Sloc:tts.adb:99:30" () );
                     ( "GP_Sloc:tts.adb:99:7" ( #"tank2.ads" 78 0 0# abstract ensures {true}(let _ = (if ((Float32.ge((Tank1__liquid_height___axiom.liquid_height(()))) ((3.0:Float32.t)))) then (
                      ( #"tts.adb" 99 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:99:69" "GP_Id:15" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_LS_Loc) then Tank1.Low_Sensor_Status);
                                                                    ^ tts.adb:99:69:VC_PRECONDITION" "GP_Shape:L_1_while__pragargs__if__call_low_sensor_status" (Tank1__low_sensor_status___axiom.low_sensor_status(())) )) else (
                      (Boolean.of_int(1)))) in (
                      ()))
                      end ;
                     #"tts.adb" 99 0 0# assert { #"tts.adb" 99 0 0# ( #"tts.adb" 99 0 0# "model_vc" "keep_on_simp" "GP_Sloc:tts.adb:99:21" "GP_Reason:VC_ASSERT" "GP_Id:16" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_LS_Loc) then Tank1.Low_Sensor_Status);
                    ^ tts.adb:99:21:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" (if ((Float32.ge (epsilon temp___result_585 : Float32.t.
                      ( (temp___result_585 = (Tank1__liquid_height.liquid_height Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__liquid_height.liquid_height__function_guard temp___result_585 Tank1__tank_state.tank_state.Main.__private__content) )) (3.0:Float32.t))) then (
                      ( "GP_Pretty_Ada:2659" "GP_Sloc:tts.adb:99:64" ((epsilon temp___result_584 : bool.
                       ( (temp___result_584 = (Tank1__low_sensor_status.low_sensor_status Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__low_sensor_status.low_sensor_status__function_guard temp___result_584 Tank1__tank_state.tank_state.Main.__private__content) )) = True) )) else (
                      ( "GP_Pretty_Ada:18490" "GP_Sloc:tts.adb:99:21" true ))) ) } ) );
                     ( "GP_Sloc:tts.adb:100:30" () );
                     ( "GP_Sloc:tts.adb:100:7" ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = (if ((Float32.ge((Tank1__liquid_height___axiom.liquid_height(()))) ((5.0:Float32.t)))) then (
                      ( #"tts.adb" 100 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:tts.adb:100:69" "GP_Id:17" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_HS_Loc) then Tank1.High_Sensor_Status);
                                                                    ^ tts.adb:100:69:VC_PRECONDITION" "GP_Shape:L_1_while__pragargs__if__call_high_sensor_status" (Tank1__high_sensor_status___axiom.high_sensor_status(())) )) else (
                      (Boolean.of_int(1)))) in (
                      ()))
                      end ;
                     #"tts.adb" 100 0 0# assert { #"tts.adb" 100 0 0# ( #"tts.adb" 100 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" "GP_Sloc:tts.adb:100:21" "GP_Id:18" "comment:      pragma Assert(if (Tank1.Liquid_Height >= T1_HS_Loc) then Tank1.High_Sensor_Status);
                    ^ tts.adb:100:21:VC_ASSERT" (if ((Float32.ge (epsilon temp___result_587 : Float32.t.
                      ( (temp___result_587 = (Tank1__liquid_height.liquid_height Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__liquid_height.liquid_height__function_guard temp___result_587 Tank1__tank_state.tank_state.Main.__private__content) )) (5.0:Float32.t))) then (
                      ( "GP_Pretty_Ada:2671" "GP_Sloc:tts.adb:100:64" ((epsilon temp___result_586 : bool.
                       ( (temp___result_586 = (Tank1__high_sensor_status.high_sensor_status Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__high_sensor_status.high_sensor_status__function_guard temp___result_586 Tank1__tank_state.tank_state.Main.__private__content) )) = True) )) else (
                      ( "GP_Pretty_Ada:18502" "GP_Sloc:tts.adb:100:21" true ))) ) } ) );
                     ( "GP_Sloc:tts.adb:101:30" () );
                     ( "GP_Sloc:tts.adb:101:7" ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = (if ((Boolean.andb((Tank1__valid_tank___axiom.valid_tank(()))) (Tts__t1_hs_status.t1_hs_status.bool__content))) then (
                      Tts__t1_ls_status.t1_ls_status.bool__content) else (
                      (Boolean.of_int(1)))) in (
                      ()))
                      end ;
                     #"tts.adb" 101 0 0# assert { #"tts.adb" 101 0 0# ( #"tts.adb" 101 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" "GP_Sloc:tts.adb:101:21" "GP_Id:19" "comment:      pragma Assert(if (Tank1.Valid_Tank and T1_HS_Status) then T1_LS_Status);
                    ^ tts.adb:101:21:VC_ASSERT" (if (( ((epsilon temp___result_588 : bool.
                      ( (temp___result_588 = (Tank1__valid_tank.valid_tank Tank1__tank_state.tank_state.Main.__private__content)) /\ (Tank1__valid_tank.valid_tank__function_guard temp___result_588 Tank1__tank_state.tank_state.Main.__private__content) )) = True) /\ (Tts__t1_hs_status.t1_hs_status.bool__content = True) )) then (
                      ( "GP_Pretty_Ada:2681" "GP_Sloc:tts.adb:101:65" (Tts__t1_ls_status.t1_ls_status.bool__content = True) )) else (
                      ( "GP_Pretty_Ada:18512" "GP_Sloc:tts.adb:101:21" true ))) ) } ) );
                     ( "GP_Sloc:tts.adb:102:7" ( #"system.ads" 1 0 0# abstract ensures {true}(let _ = (if (Tts__t1_hs_status.t1_hs_status.bool__content) then (
                      Tts__t1_ls_status.t1_ls_status.bool__content) else (
                      (Boolean.of_int(1)))) in (
                      ()))
                      end ;
                     #"tts.adb" 102 0 0# assert { #"tts.adb" 102 0 0# ( #"tts.adb" 102 0 0# "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Shape:L_1_while__pragargs__if" "GP_Sloc:tts.adb:102:21" "GP_Id:20" "comment:      pragma Assert(if T1_HS_Status then T1_LS_Status);
                    ^ tts.adb:102:21:VC_ASSERT" (if ((Tts__t1_hs_status.t1_hs_status.bool__content = True)) then (
                      ( "GP_Pretty_Ada:2687" "GP_Sloc:tts.adb:102:42" (Tts__t1_ls_status.t1_ls_status.bool__content = True) )) else (
                      ( "GP_Pretty_Ada:18520" "GP_Sloc:tts.adb:102:21" true ))) ) } ) ) )
                    done )))
                    )))
                   )))
                  )))
                 )))
                )))
               )))
              )))
             )))
            )))
           )))
          )))
         )))
        )))
       )
     with
      Tts__L_1.L_1 -> ()
     end)) )))
   ))
    );
   #"tts.adb" 10 0 0# raise Return__exc )
  with
   Return__exc -> ()
  end;
  #"tts.adb" 10 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end  )
end
